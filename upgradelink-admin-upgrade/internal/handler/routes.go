// Code generated by goctl. DO NOT EDIT.
// goctls v1.12.0

package handler

import (
	"net/http"

	base "upgradelink-admin-upgrade/internal/handler/base"
	upgrade_apk "upgradelink-admin-upgrade/internal/handler/upgrade_apk"
	upgrade_apk_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_apk_upgrade_strategy"
	upgrade_apk_version "upgradelink-admin-upgrade/internal/handler/upgrade_apk_version"
	upgrade_company_income "upgradelink-admin-upgrade/internal/handler/upgrade_company_income"
	upgrade_company_traffic_packet "upgradelink-admin-upgrade/internal/handler/upgrade_company_traffic_packet"
	upgrade_configuration "upgradelink-admin-upgrade/internal/handler/upgrade_configuration"
	upgrade_configuration_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_configuration_upgrade_strategy"
	upgrade_configuration_version "upgradelink-admin-upgrade/internal/handler/upgrade_configuration_version"
	upgrade_dashboard "upgradelink-admin-upgrade/internal/handler/upgrade_dashboard"
	upgrade_dev "upgradelink-admin-upgrade/internal/handler/upgrade_dev"
	upgrade_dev_group "upgradelink-admin-upgrade/internal/handler/upgrade_dev_group"
	upgrade_dev_group_relation "upgradelink-admin-upgrade/internal/handler/upgrade_dev_group_relation"
	upgrade_dev_model "upgradelink-admin-upgrade/internal/handler/upgrade_dev_model"
	upgrade_electron "upgradelink-admin-upgrade/internal/handler/upgrade_electron"
	upgrade_electron_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_electron_upgrade_strategy"
	upgrade_electron_version "upgradelink-admin-upgrade/internal/handler/upgrade_electron_version"
	upgrade_file "upgradelink-admin-upgrade/internal/handler/upgrade_file"
	upgrade_file_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_file_upgrade_strategy"
	upgrade_file_version "upgradelink-admin-upgrade/internal/handler/upgrade_file_version"
	upgrade_tauri "upgradelink-admin-upgrade/internal/handler/upgrade_tauri"
	upgrade_tauri_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_tauri_upgrade_strategy"
	upgrade_tauri_version "upgradelink-admin-upgrade/internal/handler/upgrade_tauri_version"
	upgrade_url "upgradelink-admin-upgrade/internal/handler/upgrade_url"
	upgrade_url_upgrade_strategy "upgradelink-admin-upgrade/internal/handler/upgrade_url_upgrade_strategy"
	upgrade_url_version "upgradelink-admin-upgrade/internal/handler/upgrade_url_version"
	"upgradelink-admin-upgrade/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/init/database",
				Handler: base.InitDatabaseHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url/create",
					Handler: upgrade_url.CreateUpgradeUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url/update",
					Handler: upgrade_url.UpdateUpgradeUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url/delete",
					Handler: upgrade_url.DeleteUpgradeUrlHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url/list",
					Handler: upgrade_url.GetUpgradeUrlListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url",
					Handler: upgrade_url.GetUpgradeUrlByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_model/create",
					Handler: upgrade_dev_model.CreateUpgradeDevModelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_model/update",
					Handler: upgrade_dev_model.UpdateUpgradeDevModelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_model/delete",
					Handler: upgrade_dev_model.DeleteUpgradeDevModelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_model/list",
					Handler: upgrade_dev_model.GetUpgradeDevModelListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_model",
					Handler: upgrade_dev_model.GetUpgradeDevModelByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_upgrade_strategy/create",
					Handler: upgrade_url_upgrade_strategy.CreateUpgradeUrlUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_upgrade_strategy/update",
					Handler: upgrade_url_upgrade_strategy.UpdateUpgradeUrlUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_upgrade_strategy/delete",
					Handler: upgrade_url_upgrade_strategy.DeleteUpgradeUrlUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_upgrade_strategy/list",
					Handler: upgrade_url_upgrade_strategy.GetUpgradeUrlUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_upgrade_strategy",
					Handler: upgrade_url_upgrade_strategy.GetUpgradeUrlUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_version/create",
					Handler: upgrade_url_version.CreateUpgradeUrlVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_version/update",
					Handler: upgrade_url_version.UpdateUpgradeUrlVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_version/delete",
					Handler: upgrade_url_version.DeleteUpgradeUrlVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_version/list",
					Handler: upgrade_url_version.GetUpgradeUrlVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_url_version",
					Handler: upgrade_url_version.GetUpgradeUrlVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dashboard",
					Handler: upgrade_dashboard.GetUpgradeDashboardHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/tauri_app_upgrade_dashboard",
					Handler: upgrade_dashboard.GetTaruiAppUpgradeDashboardHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file/create",
					Handler: upgrade_file.CreateUpgradeFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file/update",
					Handler: upgrade_file.UpdateUpgradeFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file/delete",
					Handler: upgrade_file.DeleteUpgradeFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file/list",
					Handler: upgrade_file.GetUpgradeFileListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file",
					Handler: upgrade_file.GetUpgradeFileByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_upgrade_strategy/create",
					Handler: upgrade_file_upgrade_strategy.CreateUpgradeFileUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_upgrade_strategy/update",
					Handler: upgrade_file_upgrade_strategy.UpdateUpgradeFileUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_upgrade_strategy/delete",
					Handler: upgrade_file_upgrade_strategy.DeleteUpgradeFileUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_upgrade_strategy/list",
					Handler: upgrade_file_upgrade_strategy.GetUpgradeFileUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_upgrade_strategy",
					Handler: upgrade_file_upgrade_strategy.GetUpgradeFileUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_version/create",
					Handler: upgrade_file_version.CreateUpgradeFileVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_version/update",
					Handler: upgrade_file_version.UpdateUpgradeFileVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_version/delete",
					Handler: upgrade_file_version.DeleteUpgradeFileVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_version/list",
					Handler: upgrade_file_version.GetUpgradeFileVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_file_version",
					Handler: upgrade_file_version.GetUpgradeFileVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev/create",
					Handler: upgrade_dev.CreateUpgradeDevHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev/update",
					Handler: upgrade_dev.UpdateUpgradeDevHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev/delete",
					Handler: upgrade_dev.DeleteUpgradeDevHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev/list",
					Handler: upgrade_dev.GetUpgradeDevListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev",
					Handler: upgrade_dev.GetUpgradeDevByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group/create",
					Handler: upgrade_dev_group.CreateUpgradeDevGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group/update",
					Handler: upgrade_dev_group.UpdateUpgradeDevGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group/delete",
					Handler: upgrade_dev_group.DeleteUpgradeDevGroupHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group/list",
					Handler: upgrade_dev_group.GetUpgradeDevGroupListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group",
					Handler: upgrade_dev_group.GetUpgradeDevGroupByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group_relation/create",
					Handler: upgrade_dev_group_relation.CreateUpgradeDevGroupRelationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group_relation/update",
					Handler: upgrade_dev_group_relation.UpdateUpgradeDevGroupRelationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group_relation/delete",
					Handler: upgrade_dev_group_relation.DeleteUpgradeDevGroupRelationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group_relation/list",
					Handler: upgrade_dev_group_relation.GetUpgradeDevGroupRelationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_dev_group_relation",
					Handler: upgrade_dev_group_relation.GetUpgradeDevGroupRelationByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri/create",
					Handler: upgrade_tauri.CreateUpgradeTauriHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri/update",
					Handler: upgrade_tauri.UpdateUpgradeTauriHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri/delete",
					Handler: upgrade_tauri.DeleteUpgradeTauriHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri/list",
					Handler: upgrade_tauri.GetUpgradeTauriListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri",
					Handler: upgrade_tauri.GetUpgradeTauriByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_upgrade_strategy/create",
					Handler: upgrade_tauri_upgrade_strategy.CreateUpgradeTauriUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_upgrade_strategy/update",
					Handler: upgrade_tauri_upgrade_strategy.UpdateUpgradeTauriUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_upgrade_strategy/delete",
					Handler: upgrade_tauri_upgrade_strategy.DeleteUpgradeTauriUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_upgrade_strategy/list",
					Handler: upgrade_tauri_upgrade_strategy.GetUpgradeTauriUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_upgrade_strategy",
					Handler: upgrade_tauri_upgrade_strategy.GetUpgradeTauriUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_version/create",
					Handler: upgrade_tauri_version.CreateUpgradeTauriVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_version/update",
					Handler: upgrade_tauri_version.UpdateUpgradeTauriVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_version/delete",
					Handler: upgrade_tauri_version.DeleteUpgradeTauriVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_version/list",
					Handler: upgrade_tauri_version.GetUpgradeTauriVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_tauri_version",
					Handler: upgrade_tauri_version.GetUpgradeTauriVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration/create",
					Handler: upgrade_configuration.CreateUpgradeConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration/update",
					Handler: upgrade_configuration.UpdateUpgradeConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration/delete",
					Handler: upgrade_configuration.DeleteUpgradeConfigurationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration/list",
					Handler: upgrade_configuration.GetUpgradeConfigurationListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration",
					Handler: upgrade_configuration.GetUpgradeConfigurationByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_upgrade_strategy/create",
					Handler: upgrade_configuration_upgrade_strategy.CreateUpgradeConfigurationUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_upgrade_strategy/update",
					Handler: upgrade_configuration_upgrade_strategy.UpdateUpgradeConfigurationUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_upgrade_strategy/delete",
					Handler: upgrade_configuration_upgrade_strategy.DeleteUpgradeConfigurationUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_upgrade_strategy/list",
					Handler: upgrade_configuration_upgrade_strategy.GetUpgradeConfigurationUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_upgrade_strategy",
					Handler: upgrade_configuration_upgrade_strategy.GetUpgradeConfigurationUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_version/create",
					Handler: upgrade_configuration_version.CreateUpgradeConfigurationVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_version/update",
					Handler: upgrade_configuration_version.UpdateUpgradeConfigurationVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_version/delete",
					Handler: upgrade_configuration_version.DeleteUpgradeConfigurationVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_version/list",
					Handler: upgrade_configuration_version.GetUpgradeConfigurationVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_configuration_version",
					Handler: upgrade_configuration_version.GetUpgradeConfigurationVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk/create",
					Handler: upgrade_apk.CreateUpgradeApkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk/update",
					Handler: upgrade_apk.UpdateUpgradeApkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk/delete",
					Handler: upgrade_apk.DeleteUpgradeApkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk/list",
					Handler: upgrade_apk.GetUpgradeApkListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk",
					Handler: upgrade_apk.GetUpgradeApkByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_upgrade_strategy/create",
					Handler: upgrade_apk_upgrade_strategy.CreateUpgradeApkUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_upgrade_strategy/update",
					Handler: upgrade_apk_upgrade_strategy.UpdateUpgradeApkUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_upgrade_strategy/delete",
					Handler: upgrade_apk_upgrade_strategy.DeleteUpgradeApkUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_upgrade_strategy/list",
					Handler: upgrade_apk_upgrade_strategy.GetUpgradeApkUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_upgrade_strategy",
					Handler: upgrade_apk_upgrade_strategy.GetUpgradeApkUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_version/create",
					Handler: upgrade_apk_version.CreateUpgradeApkVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_version/update",
					Handler: upgrade_apk_version.UpdateUpgradeApkVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_version/delete",
					Handler: upgrade_apk_version.DeleteUpgradeApkVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_version/list",
					Handler: upgrade_apk_version.GetUpgradeApkVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_apk_version",
					Handler: upgrade_apk_version.GetUpgradeApkVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron/create",
					Handler: upgrade_electron.CreateUpgradeElectronHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron/update",
					Handler: upgrade_electron.UpdateUpgradeElectronHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron/delete",
					Handler: upgrade_electron.DeleteUpgradeElectronHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron/list",
					Handler: upgrade_electron.GetUpgradeElectronListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron",
					Handler: upgrade_electron.GetUpgradeElectronByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_upgrade_strategy/create",
					Handler: upgrade_electron_upgrade_strategy.CreateUpgradeElectronUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_upgrade_strategy/update",
					Handler: upgrade_electron_upgrade_strategy.UpdateUpgradeElectronUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_upgrade_strategy/delete",
					Handler: upgrade_electron_upgrade_strategy.DeleteUpgradeElectronUpgradeStrategyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_upgrade_strategy/list",
					Handler: upgrade_electron_upgrade_strategy.GetUpgradeElectronUpgradeStrategyListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_upgrade_strategy",
					Handler: upgrade_electron_upgrade_strategy.GetUpgradeElectronUpgradeStrategyByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_version/create",
					Handler: upgrade_electron_version.CreateUpgradeElectronVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_version/update",
					Handler: upgrade_electron_version.UpdateUpgradeElectronVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_version/delete",
					Handler: upgrade_electron_version.DeleteUpgradeElectronVersionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_version/list",
					Handler: upgrade_electron_version.GetUpgradeElectronVersionListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_electron_version",
					Handler: upgrade_electron_version.GetUpgradeElectronVersionByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_income/create",
					Handler: upgrade_company_income.CreateUpgradeCompanyIncomeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_income/update",
					Handler: upgrade_company_income.UpdateUpgradeCompanyIncomeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_income/delete",
					Handler: upgrade_company_income.DeleteUpgradeCompanyIncomeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_income/list",
					Handler: upgrade_company_income.GetUpgradeCompanyIncomeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_income",
					Handler: upgrade_company_income.GetUpgradeCompanyIncomeByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_traffic_packet/create",
					Handler: upgrade_company_traffic_packet.CreateUpgradeCompanyTrafficPacketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_traffic_packet/update",
					Handler: upgrade_company_traffic_packet.UpdateUpgradeCompanyTrafficPacketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_traffic_packet/delete",
					Handler: upgrade_company_traffic_packet.DeleteUpgradeCompanyTrafficPacketHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_traffic_packet/list",
					Handler: upgrade_company_traffic_packet.GetUpgradeCompanyTrafficPacketListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upgrade_company_traffic_packet",
					Handler: upgrade_company_traffic_packet.GetUpgradeCompanyTrafficPacketByIdHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
