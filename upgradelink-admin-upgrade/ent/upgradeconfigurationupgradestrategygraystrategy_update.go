// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeConfigurationUpgradeStrategyGrayStrategy entities.
type UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate builder.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyGrayStrategy) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.Where(ps...)
	return ucusgsu
}

// SetEnable sets the "enable" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.ResetEnable()
	ucusgsu.mutation.SetEnable(i)
	return ucusgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ucusgsu.SetEnable(*i)
	}
	return ucusgsu
}

// AddEnable adds i to the "enable" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.AddEnable(i)
	return ucusgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.SetBeginDatetime(t)
	return ucusgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ucusgsu.SetBeginDatetime(*t)
	}
	return ucusgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.SetEndDatetime(t)
	return ucusgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ucusgsu.SetEndDatetime(*t)
	}
	return ucusgsu
}

// SetLimit sets the "limit" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.ResetLimit()
	ucusgsu.mutation.SetLimit(i)
	return ucusgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ucusgsu.SetLimit(*i)
	}
	return ucusgsu
}

// AddLimit adds i to the "limit" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.AddLimit(i)
	return ucusgsu
}

// SetIsDel sets the "is_del" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.ResetIsDel()
	ucusgsu.mutation.SetIsDel(i)
	return ucusgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ucusgsu.SetIsDel(*i)
	}
	return ucusgsu
}

// AddIsDel adds i to the "is_del" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.AddIsDel(i)
	return ucusgsu
}

// SetCreateAt sets the "create_at" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.SetCreateAt(t)
	return ucusgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ucusgsu.SetCreateAt(*t)
	}
	return ucusgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.ClearCreateAt()
	return ucusgsu
}

// SetUpdateAt sets the "update_at" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.SetUpdateAt(t)
	return ucusgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ucusgsu.SetUpdateAt(*t)
	}
	return ucusgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	ucusgsu.mutation.ClearUpdateAt()
	return ucusgsu
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyGrayStrategyMutation object of the builder.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation {
	return ucusgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucusgsu.sqlSave, ucusgsu.mutation, ucusgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ucusgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ucusgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := ucusgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusgsu *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategygraystrategy.Table, upgradeconfigurationupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := ucusgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusgsu.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ucusgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ucusgsu.mutation.Limit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucusgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucusgsu.mutation.done = true
	return n, nil
}

// UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeConfigurationUpgradeStrategyGrayStrategy entity.
type UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.ResetEnable()
	ucusgsuo.mutation.SetEnable(i)
	return ucusgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ucusgsuo.SetEnable(*i)
	}
	return ucusgsuo
}

// AddEnable adds i to the "enable" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.AddEnable(i)
	return ucusgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.SetBeginDatetime(t)
	return ucusgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ucusgsuo.SetBeginDatetime(*t)
	}
	return ucusgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.SetEndDatetime(t)
	return ucusgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ucusgsuo.SetEndDatetime(*t)
	}
	return ucusgsuo
}

// SetLimit sets the "limit" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.ResetLimit()
	ucusgsuo.mutation.SetLimit(i)
	return ucusgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ucusgsuo.SetLimit(*i)
	}
	return ucusgsuo
}

// AddLimit adds i to the "limit" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.AddLimit(i)
	return ucusgsuo
}

// SetIsDel sets the "is_del" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.ResetIsDel()
	ucusgsuo.mutation.SetIsDel(i)
	return ucusgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ucusgsuo.SetIsDel(*i)
	}
	return ucusgsuo
}

// AddIsDel adds i to the "is_del" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.AddIsDel(i)
	return ucusgsuo
}

// SetCreateAt sets the "create_at" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.SetCreateAt(t)
	return ucusgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ucusgsuo.SetCreateAt(*t)
	}
	return ucusgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.ClearCreateAt()
	return ucusgsuo
}

// SetUpdateAt sets the "update_at" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.SetUpdateAt(t)
	return ucusgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ucusgsuo.SetUpdateAt(*t)
	}
	return ucusgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.ClearUpdateAt()
	return ucusgsuo
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyGrayStrategyMutation object of the builder.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation {
	return ucusgsuo.mutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate builder.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyGrayStrategy) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.mutation.Where(ps...)
	return ucusgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	ucusgsuo.fields = append([]string{field}, fields...)
	return ucusgsuo
}

// Save executes the query and returns the updated UpgradeConfigurationUpgradeStrategyGrayStrategy entity.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeConfigurationUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, ucusgsuo.sqlSave, ucusgsuo.mutation, ucusgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeConfigurationUpgradeStrategyGrayStrategy {
	node, err := ucusgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ucusgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ucusgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusgsuo *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeConfigurationUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategygraystrategy.Table, upgradeconfigurationupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := ucusgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeConfigurationUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucusgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeconfigurationupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradeconfigurationupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeconfigurationupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucusgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ucusgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ucusgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeConfigurationUpgradeStrategyGrayStrategy{config: ucusgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucusgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucusgsuo.mutation.done = true
	return _node, nil
}
