// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeapkupgradestrategygraystrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyGrayStrategyDelete is the builder for deleting a UpgradeApkUpgradeStrategyGrayStrategy entity.
type UpgradeApkUpgradeStrategyGrayStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyGrayStrategyDelete builder.
func (uausgsd *UpgradeApkUpgradeStrategyGrayStrategyDelete) Where(ps ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyDelete {
	uausgsd.mutation.Where(ps...)
	return uausgsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uausgsd *UpgradeApkUpgradeStrategyGrayStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uausgsd.sqlExec, uausgsd.mutation, uausgsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uausgsd *UpgradeApkUpgradeStrategyGrayStrategyDelete) ExecX(ctx context.Context) int {
	n, err := uausgsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uausgsd *UpgradeApkUpgradeStrategyGrayStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeapkupgradestrategygraystrategy.Table, sqlgraph.NewFieldSpec(upgradeapkupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := uausgsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uausgsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uausgsd.mutation.done = true
	return affected, err
}

// UpgradeApkUpgradeStrategyGrayStrategyDeleteOne is the builder for deleting a single UpgradeApkUpgradeStrategyGrayStrategy entity.
type UpgradeApkUpgradeStrategyGrayStrategyDeleteOne struct {
	uausgsd *UpgradeApkUpgradeStrategyGrayStrategyDelete
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyGrayStrategyDelete builder.
func (uausgsdo *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne) Where(ps ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne {
	uausgsdo.uausgsd.mutation.Where(ps...)
	return uausgsdo
}

// Exec executes the deletion query.
func (uausgsdo *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := uausgsdo.uausgsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uausgsdo *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := uausgsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
