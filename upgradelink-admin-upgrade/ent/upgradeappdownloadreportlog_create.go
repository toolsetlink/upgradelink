// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradeappdownloadreportlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeAppDownloadReportLogCreate is the builder for creating a UpgradeAppDownloadReportLog entity.
type UpgradeAppDownloadReportLogCreate struct {
	config
	mutation *UpgradeAppDownloadReportLogMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetCompanyID(i int) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetCompanyID(i)
	return uadrlc
}

// SetTimestamp sets the "timestamp" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetTimestamp(t time.Time) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetTimestamp(t)
	return uadrlc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetNillableTimestamp(t *time.Time) *UpgradeAppDownloadReportLogCreate {
	if t != nil {
		uadrlc.SetTimestamp(*t)
	}
	return uadrlc
}

// SetAppKey sets the "app_key" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetAppKey(s string) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetAppKey(s)
	return uadrlc
}

// SetAppVersionID sets the "app_version_id" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetAppVersionID(i int) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetAppVersionID(i)
	return uadrlc
}

// SetAppVersionCode sets the "app_version_code" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetAppVersionCode(i int) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetAppVersionCode(i)
	return uadrlc
}

// SetAppVersionTarget sets the "app_version_target" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetAppVersionTarget(s string) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetAppVersionTarget(s)
	return uadrlc
}

// SetNillableAppVersionTarget sets the "app_version_target" field if the given value is not nil.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetNillableAppVersionTarget(s *string) *UpgradeAppDownloadReportLogCreate {
	if s != nil {
		uadrlc.SetAppVersionTarget(*s)
	}
	return uadrlc
}

// SetAppVersionArch sets the "app_version_arch" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetAppVersionArch(s string) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetAppVersionArch(s)
	return uadrlc
}

// SetNillableAppVersionArch sets the "app_version_arch" field if the given value is not nil.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetNillableAppVersionArch(s *string) *UpgradeAppDownloadReportLogCreate {
	if s != nil {
		uadrlc.SetAppVersionArch(*s)
	}
	return uadrlc
}

// SetCreateAt sets the "create_at" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetCreateAt(t time.Time) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetCreateAt(t)
	return uadrlc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetNillableCreateAt(t *time.Time) *UpgradeAppDownloadReportLogCreate {
	if t != nil {
		uadrlc.SetCreateAt(*t)
	}
	return uadrlc
}

// SetID sets the "id" field.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SetID(i int) *UpgradeAppDownloadReportLogCreate {
	uadrlc.mutation.SetID(i)
	return uadrlc
}

// Mutation returns the UpgradeAppDownloadReportLogMutation object of the builder.
func (uadrlc *UpgradeAppDownloadReportLogCreate) Mutation() *UpgradeAppDownloadReportLogMutation {
	return uadrlc.mutation
}

// Save creates the UpgradeAppDownloadReportLog in the database.
func (uadrlc *UpgradeAppDownloadReportLogCreate) Save(ctx context.Context) (*UpgradeAppDownloadReportLog, error) {
	return withHooks(ctx, uadrlc.sqlSave, uadrlc.mutation, uadrlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uadrlc *UpgradeAppDownloadReportLogCreate) SaveX(ctx context.Context) *UpgradeAppDownloadReportLog {
	v, err := uadrlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uadrlc *UpgradeAppDownloadReportLogCreate) Exec(ctx context.Context) error {
	_, err := uadrlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uadrlc *UpgradeAppDownloadReportLogCreate) ExecX(ctx context.Context) {
	if err := uadrlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uadrlc *UpgradeAppDownloadReportLogCreate) check() error {
	if _, ok := uadrlc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeAppDownloadReportLog.company_id"`)}
	}
	if _, ok := uadrlc.mutation.AppKey(); !ok {
		return &ValidationError{Name: "app_key", err: errors.New(`ent: missing required field "UpgradeAppDownloadReportLog.app_key"`)}
	}
	if _, ok := uadrlc.mutation.AppVersionID(); !ok {
		return &ValidationError{Name: "app_version_id", err: errors.New(`ent: missing required field "UpgradeAppDownloadReportLog.app_version_id"`)}
	}
	if _, ok := uadrlc.mutation.AppVersionCode(); !ok {
		return &ValidationError{Name: "app_version_code", err: errors.New(`ent: missing required field "UpgradeAppDownloadReportLog.app_version_code"`)}
	}
	return nil
}

func (uadrlc *UpgradeAppDownloadReportLogCreate) sqlSave(ctx context.Context) (*UpgradeAppDownloadReportLog, error) {
	if err := uadrlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uadrlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uadrlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uadrlc.mutation.id = &_node.ID
	uadrlc.mutation.done = true
	return _node, nil
}

func (uadrlc *UpgradeAppDownloadReportLogCreate) createSpec() (*UpgradeAppDownloadReportLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeAppDownloadReportLog{config: uadrlc.config}
		_spec = sqlgraph.NewCreateSpec(upgradeappdownloadreportlog.Table, sqlgraph.NewFieldSpec(upgradeappdownloadreportlog.FieldID, field.TypeInt))
	)
	if id, ok := uadrlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uadrlc.mutation.CompanyID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := uadrlc.mutation.Timestamp(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := uadrlc.mutation.AppKey(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppKey, field.TypeString, value)
		_node.AppKey = value
	}
	if value, ok := uadrlc.mutation.AppVersionID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionID, field.TypeInt, value)
		_node.AppVersionID = value
	}
	if value, ok := uadrlc.mutation.AppVersionCode(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionCode, field.TypeInt, value)
		_node.AppVersionCode = value
	}
	if value, ok := uadrlc.mutation.AppVersionTarget(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionTarget, field.TypeString, value)
		_node.AppVersionTarget = value
	}
	if value, ok := uadrlc.mutation.AppVersionArch(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionArch, field.TypeString, value)
		_node.AppVersionArch = value
	}
	if value, ok := uadrlc.mutation.CreateAt(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	return _node, _spec
}

// UpgradeAppDownloadReportLogCreateBulk is the builder for creating many UpgradeAppDownloadReportLog entities in bulk.
type UpgradeAppDownloadReportLogCreateBulk struct {
	config
	err      error
	builders []*UpgradeAppDownloadReportLogCreate
}

// Save creates the UpgradeAppDownloadReportLog entities in the database.
func (uadrlcb *UpgradeAppDownloadReportLogCreateBulk) Save(ctx context.Context) ([]*UpgradeAppDownloadReportLog, error) {
	if uadrlcb.err != nil {
		return nil, uadrlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uadrlcb.builders))
	nodes := make([]*UpgradeAppDownloadReportLog, len(uadrlcb.builders))
	mutators := make([]Mutator, len(uadrlcb.builders))
	for i := range uadrlcb.builders {
		func(i int, root context.Context) {
			builder := uadrlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeAppDownloadReportLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uadrlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uadrlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uadrlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uadrlcb *UpgradeAppDownloadReportLogCreateBulk) SaveX(ctx context.Context) []*UpgradeAppDownloadReportLog {
	v, err := uadrlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uadrlcb *UpgradeAppDownloadReportLogCreateBulk) Exec(ctx context.Context) error {
	_, err := uadrlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uadrlcb *UpgradeAppDownloadReportLogCreateBulk) ExecX(ctx context.Context) {
	if err := uadrlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
