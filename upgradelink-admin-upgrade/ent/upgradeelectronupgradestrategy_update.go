// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyUpdate is the builder for updating UpgradeElectronUpgradeStrategy entities.
type UpgradeElectronUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyUpdate builder.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.Where(ps...)
	return ueusu
}

// SetCompanyID sets the "company_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetCompanyID()
	ueusu.mutation.SetCompanyID(i)
	return ueusu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetCompanyID(*i)
	}
	return ueusu
}

// AddCompanyID adds i to the "company_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddCompanyID(i)
	return ueusu
}

// SetEnable sets the "enable" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetEnable()
	ueusu.mutation.SetEnable(i)
	return ueusu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetEnable(*i)
	}
	return ueusu
}

// AddEnable adds i to the "enable" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddEnable(i)
	return ueusu
}

// SetName sets the "name" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetName(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetName(s)
	return ueusu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetName(*s)
	}
	return ueusu
}

// SetDescription sets the "description" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetDescription(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetDescription(s)
	return ueusu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetDescription(*s)
	}
	return ueusu
}

// ClearDescription clears the value of the "description" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) ClearDescription() *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ClearDescription()
	return ueusu
}

// SetElectronID sets the "electron_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetElectronID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetElectronID()
	ueusu.mutation.SetElectronID(i)
	return ueusu
}

// SetNillableElectronID sets the "electron_id" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableElectronID(i *int) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetElectronID(*i)
	}
	return ueusu
}

// AddElectronID adds i to the "electron_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddElectronID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddElectronID(i)
	return ueusu
}

// SetElectronVersionID sets the "electron_version_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetElectronVersionID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetElectronVersionID()
	ueusu.mutation.SetElectronVersionID(i)
	return ueusu
}

// SetNillableElectronVersionID sets the "electron_version_id" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableElectronVersionID(i *int) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetElectronVersionID(*i)
	}
	return ueusu
}

// AddElectronVersionID adds i to the "electron_version_id" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddElectronVersionID(i int) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddElectronVersionID(i)
	return ueusu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetBeginDatetime(t)
	return ueusu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	if t != nil {
		ueusu.SetBeginDatetime(*t)
	}
	return ueusu
}

// SetEndDatetime sets the "end_datetime" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetEndDatetime(t)
	return ueusu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	if t != nil {
		ueusu.SetEndDatetime(*t)
	}
	return ueusu
}

// SetUpgradeType sets the "upgrade_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetUpgradeType()
	ueusu.mutation.SetUpgradeType(i)
	return ueusu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetUpgradeType(*i)
	}
	return ueusu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddUpgradeType(i)
	return ueusu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetPromptUpgradeContent(s)
	return ueusu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetPromptUpgradeContent(*s)
	}
	return ueusu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ClearPromptUpgradeContent()
	return ueusu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetUpgradeDevType()
	ueusu.mutation.SetUpgradeDevType(i)
	return ueusu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetUpgradeDevType(*i)
	}
	return ueusu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddUpgradeDevType(i)
	return ueusu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetUpgradeDevData(s)
	return ueusu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetUpgradeDevData(*s)
	}
	return ueusu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetUpgradeVersionType()
	ueusu.mutation.SetUpgradeVersionType(i)
	return ueusu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetUpgradeVersionType(*i)
	}
	return ueusu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddUpgradeVersionType(i)
	return ueusu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetUpgradeVersionData(s)
	return ueusu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetUpgradeVersionData(*s)
	}
	return ueusu
}

// SetIsGray sets the "is_gray" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetIsGray()
	ueusu.mutation.SetIsGray(i)
	return ueusu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetIsGray(*i)
	}
	return ueusu
}

// AddIsGray adds i to the "is_gray" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddIsGray(i)
	return ueusu
}

// SetGrayData sets the "gray_data" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetGrayData(s)
	return ueusu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetGrayData(*s)
	}
	return ueusu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetIsFlowLimit()
	ueusu.mutation.SetIsFlowLimit(i)
	return ueusu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetIsFlowLimit(*i)
	}
	return ueusu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddIsFlowLimit(i)
	return ueusu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetFlowLimitData(s)
	return ueusu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeElectronUpgradeStrategyUpdate {
	if s != nil {
		ueusu.SetFlowLimitData(*s)
	}
	return ueusu
}

// SetIsDel sets the "is_del" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ResetIsDel()
	ueusu.mutation.SetIsDel(i)
	return ueusu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyUpdate {
	if i != nil {
		ueusu.SetIsDel(*i)
	}
	return ueusu
}

// AddIsDel adds i to the "is_del" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.AddIsDel(i)
	return ueusu
}

// SetCreateAt sets the "create_at" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetCreateAt(t)
	return ueusu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	if t != nil {
		ueusu.SetCreateAt(*t)
	}
	return ueusu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) ClearCreateAt() *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ClearCreateAt()
	return ueusu
}

// SetUpdateAt sets the "update_at" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.SetUpdateAt(t)
	return ueusu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyUpdate {
	if t != nil {
		ueusu.SetUpdateAt(*t)
	}
	return ueusu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeElectronUpgradeStrategyUpdate {
	ueusu.mutation.ClearUpdateAt()
	return ueusu
}

// Mutation returns the UpgradeElectronUpgradeStrategyMutation object of the builder.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) Mutation() *UpgradeElectronUpgradeStrategyMutation {
	return ueusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusu.sqlSave, ueusu.mutation, ueusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ueusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ueusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusu *UpgradeElectronUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := ueusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusu *UpgradeElectronUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategy.Table, upgradeelectronupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategy.FieldID, field.TypeInt))
	if ps := ueusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.Name(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ueusu.mutation.Description(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ueusu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ueusu.mutation.ElectronID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.AddedElectronID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.ElectronVersionID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldElectronVersionID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.AddedElectronVersionID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldElectronVersionID, field.TypeInt, value)
	}
	if value, ok := ueusu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ueusu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ueusu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ueusu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ueusu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ueusu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ueusu.mutation.IsGray(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.GrayData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ueusu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ueusu.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ueusu.mutation.done = true
	return n, nil
}

// UpgradeElectronUpgradeStrategyUpdateOne is the builder for updating a single UpgradeElectronUpgradeStrategy entity.
type UpgradeElectronUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetCompanyID()
	ueusuo.mutation.SetCompanyID(i)
	return ueusuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetCompanyID(*i)
	}
	return ueusuo
}

// AddCompanyID adds i to the "company_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddCompanyID(i)
	return ueusuo
}

// SetEnable sets the "enable" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetEnable()
	ueusuo.mutation.SetEnable(i)
	return ueusuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetEnable(*i)
	}
	return ueusuo
}

// AddEnable adds i to the "enable" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddEnable(i)
	return ueusuo
}

// SetName sets the "name" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetName(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetName(s)
	return ueusuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetName(*s)
	}
	return ueusuo
}

// SetDescription sets the "description" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetDescription(s)
	return ueusuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetDescription(*s)
	}
	return ueusuo
}

// ClearDescription clears the value of the "description" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) ClearDescription() *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ClearDescription()
	return ueusuo
}

// SetElectronID sets the "electron_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetElectronID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetElectronID()
	ueusuo.mutation.SetElectronID(i)
	return ueusuo
}

// SetNillableElectronID sets the "electron_id" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableElectronID(i *int) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetElectronID(*i)
	}
	return ueusuo
}

// AddElectronID adds i to the "electron_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddElectronID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddElectronID(i)
	return ueusuo
}

// SetElectronVersionID sets the "electron_version_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetElectronVersionID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetElectronVersionID()
	ueusuo.mutation.SetElectronVersionID(i)
	return ueusuo
}

// SetNillableElectronVersionID sets the "electron_version_id" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableElectronVersionID(i *int) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetElectronVersionID(*i)
	}
	return ueusuo
}

// AddElectronVersionID adds i to the "electron_version_id" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddElectronVersionID(i int) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddElectronVersionID(i)
	return ueusuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetBeginDatetime(t)
	return ueusuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	if t != nil {
		ueusuo.SetBeginDatetime(*t)
	}
	return ueusuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetEndDatetime(t)
	return ueusuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	if t != nil {
		ueusuo.SetEndDatetime(*t)
	}
	return ueusuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetUpgradeType()
	ueusuo.mutation.SetUpgradeType(i)
	return ueusuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetUpgradeType(*i)
	}
	return ueusuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddUpgradeType(i)
	return ueusuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetPromptUpgradeContent(s)
	return ueusuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetPromptUpgradeContent(*s)
	}
	return ueusuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ClearPromptUpgradeContent()
	return ueusuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetUpgradeDevType()
	ueusuo.mutation.SetUpgradeDevType(i)
	return ueusuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetUpgradeDevType(*i)
	}
	return ueusuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddUpgradeDevType(i)
	return ueusuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetUpgradeDevData(s)
	return ueusuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetUpgradeDevData(*s)
	}
	return ueusuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetUpgradeVersionType()
	ueusuo.mutation.SetUpgradeVersionType(i)
	return ueusuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetUpgradeVersionType(*i)
	}
	return ueusuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddUpgradeVersionType(i)
	return ueusuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetUpgradeVersionData(s)
	return ueusuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetUpgradeVersionData(*s)
	}
	return ueusuo
}

// SetIsGray sets the "is_gray" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetIsGray()
	ueusuo.mutation.SetIsGray(i)
	return ueusuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetIsGray(*i)
	}
	return ueusuo
}

// AddIsGray adds i to the "is_gray" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddIsGray(i)
	return ueusuo
}

// SetGrayData sets the "gray_data" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetGrayData(s)
	return ueusuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetGrayData(*s)
	}
	return ueusuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetIsFlowLimit()
	ueusuo.mutation.SetIsFlowLimit(i)
	return ueusuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetIsFlowLimit(*i)
	}
	return ueusuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddIsFlowLimit(i)
	return ueusuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetFlowLimitData(s)
	return ueusuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeElectronUpgradeStrategyUpdateOne {
	if s != nil {
		ueusuo.SetFlowLimitData(*s)
	}
	return ueusuo
}

// SetIsDel sets the "is_del" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ResetIsDel()
	ueusuo.mutation.SetIsDel(i)
	return ueusuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	if i != nil {
		ueusuo.SetIsDel(*i)
	}
	return ueusuo
}

// AddIsDel adds i to the "is_del" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.AddIsDel(i)
	return ueusuo
}

// SetCreateAt sets the "create_at" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetCreateAt(t)
	return ueusuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	if t != nil {
		ueusuo.SetCreateAt(*t)
	}
	return ueusuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ClearCreateAt()
	return ueusuo
}

// SetUpdateAt sets the "update_at" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.SetUpdateAt(t)
	return ueusuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyUpdateOne {
	if t != nil {
		ueusuo.SetUpdateAt(*t)
	}
	return ueusuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.ClearUpdateAt()
	return ueusuo
}

// Mutation returns the UpgradeElectronUpgradeStrategyMutation object of the builder.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) Mutation() *UpgradeElectronUpgradeStrategyMutation {
	return ueusuo.mutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyUpdate builder.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.mutation.Where(ps...)
	return ueusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeElectronUpgradeStrategyUpdateOne {
	ueusuo.fields = append([]string{field}, fields...)
	return ueusuo
}

// Save executes the query and returns the updated UpgradeElectronUpgradeStrategy entity.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeElectronUpgradeStrategy, error) {
	return withHooks(ctx, ueusuo.sqlSave, ueusuo.mutation, ueusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeElectronUpgradeStrategy {
	node, err := ueusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ueusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ueusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusuo *UpgradeElectronUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeElectronUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategy.Table, upgradeelectronupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategy.FieldID, field.TypeInt))
	id, ok := ueusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeElectronUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ueusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectronupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradeelectronupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeelectronupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.Name(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ueusuo.mutation.Description(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ueusuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ueusuo.mutation.ElectronID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.AddedElectronID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.ElectronVersionID(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldElectronVersionID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.AddedElectronVersionID(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldElectronVersionID, field.TypeInt, value)
	}
	if value, ok := ueusuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ueusuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ueusuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ueusuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ueusuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ueusuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ueusuo.mutation.IsGray(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.GrayData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ueusuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ueusuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeElectronUpgradeStrategy{config: ueusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ueusuo.mutation.done = true
	return _node, nil
}
