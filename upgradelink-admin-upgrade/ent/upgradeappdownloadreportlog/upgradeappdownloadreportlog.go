// Code generated by ent, DO NOT EDIT.

package upgradeappdownloadreportlog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradeappdownloadreportlog type in the database.
	Label = "upgrade_app_download_report_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldAppKey holds the string denoting the app_key field in the database.
	FieldAppKey = "app_key"
	// FieldAppVersionID holds the string denoting the app_version_id field in the database.
	FieldAppVersionID = "app_version_id"
	// FieldAppVersionCode holds the string denoting the app_version_code field in the database.
	FieldAppVersionCode = "app_version_code"
	// FieldAppVersionTarget holds the string denoting the app_version_target field in the database.
	FieldAppVersionTarget = "app_version_target"
	// FieldAppVersionArch holds the string denoting the app_version_arch field in the database.
	FieldAppVersionArch = "app_version_arch"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// Table holds the table name of the upgradeappdownloadreportlog in the database.
	Table = "upgrade_app_download_report_log"
)

// Columns holds all SQL columns for upgradeappdownloadreportlog fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldTimestamp,
	FieldAppKey,
	FieldAppVersionID,
	FieldAppVersionCode,
	FieldAppVersionTarget,
	FieldAppVersionArch,
	FieldCreateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeAppDownloadReportLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByAppKey orders the results by the app_key field.
func ByAppKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppKey, opts...).ToFunc()
}

// ByAppVersionID orders the results by the app_version_id field.
func ByAppVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppVersionID, opts...).ToFunc()
}

// ByAppVersionCode orders the results by the app_version_code field.
func ByAppVersionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppVersionCode, opts...).ToFunc()
}

// ByAppVersionTarget orders the results by the app_version_target field.
func ByAppVersionTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppVersionTarget, opts...).ToFunc()
}

// ByAppVersionArch orders the results by the app_version_arch field.
func ByAppVersionArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppVersionArch, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}
