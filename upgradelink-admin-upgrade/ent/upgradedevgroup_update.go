// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedevgroup"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevGroupUpdate is the builder for updating UpgradeDevGroup entities.
type UpgradeDevGroupUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeDevGroupMutation
}

// Where appends a list predicates to the UpgradeDevGroupUpdate builder.
func (udgu *UpgradeDevGroupUpdate) Where(ps ...predicate.UpgradeDevGroup) *UpgradeDevGroupUpdate {
	udgu.mutation.Where(ps...)
	return udgu
}

// SetCompanyID sets the "company_id" field.
func (udgu *UpgradeDevGroupUpdate) SetCompanyID(i int) *UpgradeDevGroupUpdate {
	udgu.mutation.ResetCompanyID()
	udgu.mutation.SetCompanyID(i)
	return udgu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (udgu *UpgradeDevGroupUpdate) SetNillableCompanyID(i *int) *UpgradeDevGroupUpdate {
	if i != nil {
		udgu.SetCompanyID(*i)
	}
	return udgu
}

// AddCompanyID adds i to the "company_id" field.
func (udgu *UpgradeDevGroupUpdate) AddCompanyID(i int) *UpgradeDevGroupUpdate {
	udgu.mutation.AddCompanyID(i)
	return udgu
}

// SetName sets the "name" field.
func (udgu *UpgradeDevGroupUpdate) SetName(s string) *UpgradeDevGroupUpdate {
	udgu.mutation.SetName(s)
	return udgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udgu *UpgradeDevGroupUpdate) SetNillableName(s *string) *UpgradeDevGroupUpdate {
	if s != nil {
		udgu.SetName(*s)
	}
	return udgu
}

// SetIsDel sets the "is_del" field.
func (udgu *UpgradeDevGroupUpdate) SetIsDel(i int32) *UpgradeDevGroupUpdate {
	udgu.mutation.ResetIsDel()
	udgu.mutation.SetIsDel(i)
	return udgu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udgu *UpgradeDevGroupUpdate) SetNillableIsDel(i *int32) *UpgradeDevGroupUpdate {
	if i != nil {
		udgu.SetIsDel(*i)
	}
	return udgu
}

// AddIsDel adds i to the "is_del" field.
func (udgu *UpgradeDevGroupUpdate) AddIsDel(i int32) *UpgradeDevGroupUpdate {
	udgu.mutation.AddIsDel(i)
	return udgu
}

// SetCreateAt sets the "create_at" field.
func (udgu *UpgradeDevGroupUpdate) SetCreateAt(t time.Time) *UpgradeDevGroupUpdate {
	udgu.mutation.SetCreateAt(t)
	return udgu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udgu *UpgradeDevGroupUpdate) SetNillableCreateAt(t *time.Time) *UpgradeDevGroupUpdate {
	if t != nil {
		udgu.SetCreateAt(*t)
	}
	return udgu
}

// ClearCreateAt clears the value of the "create_at" field.
func (udgu *UpgradeDevGroupUpdate) ClearCreateAt() *UpgradeDevGroupUpdate {
	udgu.mutation.ClearCreateAt()
	return udgu
}

// SetUpdateAt sets the "update_at" field.
func (udgu *UpgradeDevGroupUpdate) SetUpdateAt(t time.Time) *UpgradeDevGroupUpdate {
	udgu.mutation.SetUpdateAt(t)
	return udgu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udgu *UpgradeDevGroupUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeDevGroupUpdate {
	if t != nil {
		udgu.SetUpdateAt(*t)
	}
	return udgu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udgu *UpgradeDevGroupUpdate) ClearUpdateAt() *UpgradeDevGroupUpdate {
	udgu.mutation.ClearUpdateAt()
	return udgu
}

// Mutation returns the UpgradeDevGroupMutation object of the builder.
func (udgu *UpgradeDevGroupUpdate) Mutation() *UpgradeDevGroupMutation {
	return udgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udgu *UpgradeDevGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udgu.sqlSave, udgu.mutation, udgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udgu *UpgradeDevGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := udgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udgu *UpgradeDevGroupUpdate) Exec(ctx context.Context) error {
	_, err := udgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udgu *UpgradeDevGroupUpdate) ExecX(ctx context.Context) {
	if err := udgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udgu *UpgradeDevGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevgroup.Table, upgradedevgroup.Columns, sqlgraph.NewFieldSpec(upgradedevgroup.FieldID, field.TypeInt))
	if ps := udgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udgu.mutation.CompanyID(); ok {
		_spec.SetField(upgradedevgroup.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udgu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedevgroup.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udgu.mutation.Name(); ok {
		_spec.SetField(upgradedevgroup.FieldName, field.TypeString, value)
	}
	if value, ok := udgu.mutation.IsDel(); ok {
		_spec.SetField(upgradedevgroup.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevgroup.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgu.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldCreateAt, field.TypeTime, value)
	}
	if udgu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevgroup.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udgu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldUpdateAt, field.TypeTime, value)
	}
	if udgu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevgroup.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udgu.mutation.done = true
	return n, nil
}

// UpgradeDevGroupUpdateOne is the builder for updating a single UpgradeDevGroup entity.
type UpgradeDevGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeDevGroupMutation
}

// SetCompanyID sets the "company_id" field.
func (udguo *UpgradeDevGroupUpdateOne) SetCompanyID(i int) *UpgradeDevGroupUpdateOne {
	udguo.mutation.ResetCompanyID()
	udguo.mutation.SetCompanyID(i)
	return udguo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (udguo *UpgradeDevGroupUpdateOne) SetNillableCompanyID(i *int) *UpgradeDevGroupUpdateOne {
	if i != nil {
		udguo.SetCompanyID(*i)
	}
	return udguo
}

// AddCompanyID adds i to the "company_id" field.
func (udguo *UpgradeDevGroupUpdateOne) AddCompanyID(i int) *UpgradeDevGroupUpdateOne {
	udguo.mutation.AddCompanyID(i)
	return udguo
}

// SetName sets the "name" field.
func (udguo *UpgradeDevGroupUpdateOne) SetName(s string) *UpgradeDevGroupUpdateOne {
	udguo.mutation.SetName(s)
	return udguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udguo *UpgradeDevGroupUpdateOne) SetNillableName(s *string) *UpgradeDevGroupUpdateOne {
	if s != nil {
		udguo.SetName(*s)
	}
	return udguo
}

// SetIsDel sets the "is_del" field.
func (udguo *UpgradeDevGroupUpdateOne) SetIsDel(i int32) *UpgradeDevGroupUpdateOne {
	udguo.mutation.ResetIsDel()
	udguo.mutation.SetIsDel(i)
	return udguo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udguo *UpgradeDevGroupUpdateOne) SetNillableIsDel(i *int32) *UpgradeDevGroupUpdateOne {
	if i != nil {
		udguo.SetIsDel(*i)
	}
	return udguo
}

// AddIsDel adds i to the "is_del" field.
func (udguo *UpgradeDevGroupUpdateOne) AddIsDel(i int32) *UpgradeDevGroupUpdateOne {
	udguo.mutation.AddIsDel(i)
	return udguo
}

// SetCreateAt sets the "create_at" field.
func (udguo *UpgradeDevGroupUpdateOne) SetCreateAt(t time.Time) *UpgradeDevGroupUpdateOne {
	udguo.mutation.SetCreateAt(t)
	return udguo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udguo *UpgradeDevGroupUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeDevGroupUpdateOne {
	if t != nil {
		udguo.SetCreateAt(*t)
	}
	return udguo
}

// ClearCreateAt clears the value of the "create_at" field.
func (udguo *UpgradeDevGroupUpdateOne) ClearCreateAt() *UpgradeDevGroupUpdateOne {
	udguo.mutation.ClearCreateAt()
	return udguo
}

// SetUpdateAt sets the "update_at" field.
func (udguo *UpgradeDevGroupUpdateOne) SetUpdateAt(t time.Time) *UpgradeDevGroupUpdateOne {
	udguo.mutation.SetUpdateAt(t)
	return udguo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udguo *UpgradeDevGroupUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeDevGroupUpdateOne {
	if t != nil {
		udguo.SetUpdateAt(*t)
	}
	return udguo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udguo *UpgradeDevGroupUpdateOne) ClearUpdateAt() *UpgradeDevGroupUpdateOne {
	udguo.mutation.ClearUpdateAt()
	return udguo
}

// Mutation returns the UpgradeDevGroupMutation object of the builder.
func (udguo *UpgradeDevGroupUpdateOne) Mutation() *UpgradeDevGroupMutation {
	return udguo.mutation
}

// Where appends a list predicates to the UpgradeDevGroupUpdate builder.
func (udguo *UpgradeDevGroupUpdateOne) Where(ps ...predicate.UpgradeDevGroup) *UpgradeDevGroupUpdateOne {
	udguo.mutation.Where(ps...)
	return udguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udguo *UpgradeDevGroupUpdateOne) Select(field string, fields ...string) *UpgradeDevGroupUpdateOne {
	udguo.fields = append([]string{field}, fields...)
	return udguo
}

// Save executes the query and returns the updated UpgradeDevGroup entity.
func (udguo *UpgradeDevGroupUpdateOne) Save(ctx context.Context) (*UpgradeDevGroup, error) {
	return withHooks(ctx, udguo.sqlSave, udguo.mutation, udguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udguo *UpgradeDevGroupUpdateOne) SaveX(ctx context.Context) *UpgradeDevGroup {
	node, err := udguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udguo *UpgradeDevGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := udguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udguo *UpgradeDevGroupUpdateOne) ExecX(ctx context.Context) {
	if err := udguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udguo *UpgradeDevGroupUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeDevGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevgroup.Table, upgradedevgroup.Columns, sqlgraph.NewFieldSpec(upgradedevgroup.FieldID, field.TypeInt))
	id, ok := udguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeDevGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradedevgroup.FieldID)
		for _, f := range fields {
			if !upgradedevgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradedevgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udguo.mutation.CompanyID(); ok {
		_spec.SetField(upgradedevgroup.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udguo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedevgroup.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udguo.mutation.Name(); ok {
		_spec.SetField(upgradedevgroup.FieldName, field.TypeString, value)
	}
	if value, ok := udguo.mutation.IsDel(); ok {
		_spec.SetField(upgradedevgroup.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udguo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevgroup.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udguo.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldCreateAt, field.TypeTime, value)
	}
	if udguo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevgroup.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udguo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldUpdateAt, field.TypeTime, value)
	}
	if udguo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevgroup.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeDevGroup{config: udguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	udguo.mutation.done = true
	return _node, nil
}
