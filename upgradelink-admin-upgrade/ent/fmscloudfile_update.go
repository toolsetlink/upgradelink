// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/fmscloudfile"
	"upgradelink-admin-upgrade/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmsCloudFileUpdate is the builder for updating FmsCloudFile entities.
type FmsCloudFileUpdate struct {
	config
	hooks    []Hook
	mutation *FmsCloudFileMutation
}

// Where appends a list predicates to the FmsCloudFileUpdate builder.
func (fcfu *FmsCloudFileUpdate) Where(ps ...predicate.FmsCloudFile) *FmsCloudFileUpdate {
	fcfu.mutation.Where(ps...)
	return fcfu
}

// SetCreatedAt sets the "created_at" field.
func (fcfu *FmsCloudFileUpdate) SetCreatedAt(t time.Time) *FmsCloudFileUpdate {
	fcfu.mutation.SetCreatedAt(t)
	return fcfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableCreatedAt(t *time.Time) *FmsCloudFileUpdate {
	if t != nil {
		fcfu.SetCreatedAt(*t)
	}
	return fcfu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fcfu *FmsCloudFileUpdate) ClearCreatedAt() *FmsCloudFileUpdate {
	fcfu.mutation.ClearCreatedAt()
	return fcfu
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfu *FmsCloudFileUpdate) SetUpdatedAt(t time.Time) *FmsCloudFileUpdate {
	fcfu.mutation.SetUpdatedAt(t)
	return fcfu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableUpdatedAt(t *time.Time) *FmsCloudFileUpdate {
	if t != nil {
		fcfu.SetUpdatedAt(*t)
	}
	return fcfu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fcfu *FmsCloudFileUpdate) ClearUpdatedAt() *FmsCloudFileUpdate {
	fcfu.mutation.ClearUpdatedAt()
	return fcfu
}

// SetState sets the "state" field.
func (fcfu *FmsCloudFileUpdate) SetState(b bool) *FmsCloudFileUpdate {
	fcfu.mutation.SetState(b)
	return fcfu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableState(b *bool) *FmsCloudFileUpdate {
	if b != nil {
		fcfu.SetState(*b)
	}
	return fcfu
}

// ClearState clears the value of the "state" field.
func (fcfu *FmsCloudFileUpdate) ClearState() *FmsCloudFileUpdate {
	fcfu.mutation.ClearState()
	return fcfu
}

// SetName sets the "name" field.
func (fcfu *FmsCloudFileUpdate) SetName(s string) *FmsCloudFileUpdate {
	fcfu.mutation.SetName(s)
	return fcfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableName(s *string) *FmsCloudFileUpdate {
	if s != nil {
		fcfu.SetName(*s)
	}
	return fcfu
}

// SetURL sets the "url" field.
func (fcfu *FmsCloudFileUpdate) SetURL(s string) *FmsCloudFileUpdate {
	fcfu.mutation.SetURL(s)
	return fcfu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableURL(s *string) *FmsCloudFileUpdate {
	if s != nil {
		fcfu.SetURL(*s)
	}
	return fcfu
}

// SetSize sets the "size" field.
func (fcfu *FmsCloudFileUpdate) SetSize(u uint64) *FmsCloudFileUpdate {
	fcfu.mutation.ResetSize()
	fcfu.mutation.SetSize(u)
	return fcfu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableSize(u *uint64) *FmsCloudFileUpdate {
	if u != nil {
		fcfu.SetSize(*u)
	}
	return fcfu
}

// AddSize adds u to the "size" field.
func (fcfu *FmsCloudFileUpdate) AddSize(u int64) *FmsCloudFileUpdate {
	fcfu.mutation.AddSize(u)
	return fcfu
}

// SetFileType sets the "file_type" field.
func (fcfu *FmsCloudFileUpdate) SetFileType(u uint8) *FmsCloudFileUpdate {
	fcfu.mutation.ResetFileType()
	fcfu.mutation.SetFileType(u)
	return fcfu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableFileType(u *uint8) *FmsCloudFileUpdate {
	if u != nil {
		fcfu.SetFileType(*u)
	}
	return fcfu
}

// AddFileType adds u to the "file_type" field.
func (fcfu *FmsCloudFileUpdate) AddFileType(u int8) *FmsCloudFileUpdate {
	fcfu.mutation.AddFileType(u)
	return fcfu
}

// SetUserID sets the "user_id" field.
func (fcfu *FmsCloudFileUpdate) SetUserID(s string) *FmsCloudFileUpdate {
	fcfu.mutation.SetUserID(s)
	return fcfu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableUserID(s *string) *FmsCloudFileUpdate {
	if s != nil {
		fcfu.SetUserID(*s)
	}
	return fcfu
}

// SetCloudFileStorageProviders sets the "cloud_file_storage_providers" field.
func (fcfu *FmsCloudFileUpdate) SetCloudFileStorageProviders(u uint64) *FmsCloudFileUpdate {
	fcfu.mutation.ResetCloudFileStorageProviders()
	fcfu.mutation.SetCloudFileStorageProviders(u)
	return fcfu
}

// SetNillableCloudFileStorageProviders sets the "cloud_file_storage_providers" field if the given value is not nil.
func (fcfu *FmsCloudFileUpdate) SetNillableCloudFileStorageProviders(u *uint64) *FmsCloudFileUpdate {
	if u != nil {
		fcfu.SetCloudFileStorageProviders(*u)
	}
	return fcfu
}

// AddCloudFileStorageProviders adds u to the "cloud_file_storage_providers" field.
func (fcfu *FmsCloudFileUpdate) AddCloudFileStorageProviders(u int64) *FmsCloudFileUpdate {
	fcfu.mutation.AddCloudFileStorageProviders(u)
	return fcfu
}

// ClearCloudFileStorageProviders clears the value of the "cloud_file_storage_providers" field.
func (fcfu *FmsCloudFileUpdate) ClearCloudFileStorageProviders() *FmsCloudFileUpdate {
	fcfu.mutation.ClearCloudFileStorageProviders()
	return fcfu
}

// Mutation returns the FmsCloudFileMutation object of the builder.
func (fcfu *FmsCloudFileUpdate) Mutation() *FmsCloudFileMutation {
	return fcfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcfu *FmsCloudFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fcfu.sqlSave, fcfu.mutation, fcfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcfu *FmsCloudFileUpdate) SaveX(ctx context.Context) int {
	affected, err := fcfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcfu *FmsCloudFileUpdate) Exec(ctx context.Context) error {
	_, err := fcfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfu *FmsCloudFileUpdate) ExecX(ctx context.Context) {
	if err := fcfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fcfu *FmsCloudFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fmscloudfile.Table, fmscloudfile.Columns, sqlgraph.NewFieldSpec(fmscloudfile.FieldID, field.TypeString))
	if ps := fcfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfu.mutation.CreatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldCreatedAt, field.TypeTime, value)
	}
	if fcfu.mutation.CreatedAtCleared() {
		_spec.ClearField(fmscloudfile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fcfu.mutation.UpdatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if fcfu.mutation.UpdatedAtCleared() {
		_spec.ClearField(fmscloudfile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fcfu.mutation.State(); ok {
		_spec.SetField(fmscloudfile.FieldState, field.TypeBool, value)
	}
	if fcfu.mutation.StateCleared() {
		_spec.ClearField(fmscloudfile.FieldState, field.TypeBool)
	}
	if value, ok := fcfu.mutation.Name(); ok {
		_spec.SetField(fmscloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := fcfu.mutation.URL(); ok {
		_spec.SetField(fmscloudfile.FieldURL, field.TypeString, value)
	}
	if value, ok := fcfu.mutation.Size(); ok {
		_spec.SetField(fmscloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fcfu.mutation.AddedSize(); ok {
		_spec.AddField(fmscloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fcfu.mutation.FileType(); ok {
		_spec.SetField(fmscloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fcfu.mutation.AddedFileType(); ok {
		_spec.AddField(fmscloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fcfu.mutation.UserID(); ok {
		_spec.SetField(fmscloudfile.FieldUserID, field.TypeString, value)
	}
	if value, ok := fcfu.mutation.CloudFileStorageProviders(); ok {
		_spec.SetField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64, value)
	}
	if value, ok := fcfu.mutation.AddedCloudFileStorageProviders(); ok {
		_spec.AddField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64, value)
	}
	if fcfu.mutation.CloudFileStorageProvidersCleared() {
		_spec.ClearField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fcfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmscloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fcfu.mutation.done = true
	return n, nil
}

// FmsCloudFileUpdateOne is the builder for updating a single FmsCloudFile entity.
type FmsCloudFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FmsCloudFileMutation
}

// SetCreatedAt sets the "created_at" field.
func (fcfuo *FmsCloudFileUpdateOne) SetCreatedAt(t time.Time) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetCreatedAt(t)
	return fcfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableCreatedAt(t *time.Time) *FmsCloudFileUpdateOne {
	if t != nil {
		fcfuo.SetCreatedAt(*t)
	}
	return fcfuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (fcfuo *FmsCloudFileUpdateOne) ClearCreatedAt() *FmsCloudFileUpdateOne {
	fcfuo.mutation.ClearCreatedAt()
	return fcfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfuo *FmsCloudFileUpdateOne) SetUpdatedAt(t time.Time) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetUpdatedAt(t)
	return fcfuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableUpdatedAt(t *time.Time) *FmsCloudFileUpdateOne {
	if t != nil {
		fcfuo.SetUpdatedAt(*t)
	}
	return fcfuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fcfuo *FmsCloudFileUpdateOne) ClearUpdatedAt() *FmsCloudFileUpdateOne {
	fcfuo.mutation.ClearUpdatedAt()
	return fcfuo
}

// SetState sets the "state" field.
func (fcfuo *FmsCloudFileUpdateOne) SetState(b bool) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetState(b)
	return fcfuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableState(b *bool) *FmsCloudFileUpdateOne {
	if b != nil {
		fcfuo.SetState(*b)
	}
	return fcfuo
}

// ClearState clears the value of the "state" field.
func (fcfuo *FmsCloudFileUpdateOne) ClearState() *FmsCloudFileUpdateOne {
	fcfuo.mutation.ClearState()
	return fcfuo
}

// SetName sets the "name" field.
func (fcfuo *FmsCloudFileUpdateOne) SetName(s string) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetName(s)
	return fcfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableName(s *string) *FmsCloudFileUpdateOne {
	if s != nil {
		fcfuo.SetName(*s)
	}
	return fcfuo
}

// SetURL sets the "url" field.
func (fcfuo *FmsCloudFileUpdateOne) SetURL(s string) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetURL(s)
	return fcfuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableURL(s *string) *FmsCloudFileUpdateOne {
	if s != nil {
		fcfuo.SetURL(*s)
	}
	return fcfuo
}

// SetSize sets the "size" field.
func (fcfuo *FmsCloudFileUpdateOne) SetSize(u uint64) *FmsCloudFileUpdateOne {
	fcfuo.mutation.ResetSize()
	fcfuo.mutation.SetSize(u)
	return fcfuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableSize(u *uint64) *FmsCloudFileUpdateOne {
	if u != nil {
		fcfuo.SetSize(*u)
	}
	return fcfuo
}

// AddSize adds u to the "size" field.
func (fcfuo *FmsCloudFileUpdateOne) AddSize(u int64) *FmsCloudFileUpdateOne {
	fcfuo.mutation.AddSize(u)
	return fcfuo
}

// SetFileType sets the "file_type" field.
func (fcfuo *FmsCloudFileUpdateOne) SetFileType(u uint8) *FmsCloudFileUpdateOne {
	fcfuo.mutation.ResetFileType()
	fcfuo.mutation.SetFileType(u)
	return fcfuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableFileType(u *uint8) *FmsCloudFileUpdateOne {
	if u != nil {
		fcfuo.SetFileType(*u)
	}
	return fcfuo
}

// AddFileType adds u to the "file_type" field.
func (fcfuo *FmsCloudFileUpdateOne) AddFileType(u int8) *FmsCloudFileUpdateOne {
	fcfuo.mutation.AddFileType(u)
	return fcfuo
}

// SetUserID sets the "user_id" field.
func (fcfuo *FmsCloudFileUpdateOne) SetUserID(s string) *FmsCloudFileUpdateOne {
	fcfuo.mutation.SetUserID(s)
	return fcfuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableUserID(s *string) *FmsCloudFileUpdateOne {
	if s != nil {
		fcfuo.SetUserID(*s)
	}
	return fcfuo
}

// SetCloudFileStorageProviders sets the "cloud_file_storage_providers" field.
func (fcfuo *FmsCloudFileUpdateOne) SetCloudFileStorageProviders(u uint64) *FmsCloudFileUpdateOne {
	fcfuo.mutation.ResetCloudFileStorageProviders()
	fcfuo.mutation.SetCloudFileStorageProviders(u)
	return fcfuo
}

// SetNillableCloudFileStorageProviders sets the "cloud_file_storage_providers" field if the given value is not nil.
func (fcfuo *FmsCloudFileUpdateOne) SetNillableCloudFileStorageProviders(u *uint64) *FmsCloudFileUpdateOne {
	if u != nil {
		fcfuo.SetCloudFileStorageProviders(*u)
	}
	return fcfuo
}

// AddCloudFileStorageProviders adds u to the "cloud_file_storage_providers" field.
func (fcfuo *FmsCloudFileUpdateOne) AddCloudFileStorageProviders(u int64) *FmsCloudFileUpdateOne {
	fcfuo.mutation.AddCloudFileStorageProviders(u)
	return fcfuo
}

// ClearCloudFileStorageProviders clears the value of the "cloud_file_storage_providers" field.
func (fcfuo *FmsCloudFileUpdateOne) ClearCloudFileStorageProviders() *FmsCloudFileUpdateOne {
	fcfuo.mutation.ClearCloudFileStorageProviders()
	return fcfuo
}

// Mutation returns the FmsCloudFileMutation object of the builder.
func (fcfuo *FmsCloudFileUpdateOne) Mutation() *FmsCloudFileMutation {
	return fcfuo.mutation
}

// Where appends a list predicates to the FmsCloudFileUpdate builder.
func (fcfuo *FmsCloudFileUpdateOne) Where(ps ...predicate.FmsCloudFile) *FmsCloudFileUpdateOne {
	fcfuo.mutation.Where(ps...)
	return fcfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcfuo *FmsCloudFileUpdateOne) Select(field string, fields ...string) *FmsCloudFileUpdateOne {
	fcfuo.fields = append([]string{field}, fields...)
	return fcfuo
}

// Save executes the query and returns the updated FmsCloudFile entity.
func (fcfuo *FmsCloudFileUpdateOne) Save(ctx context.Context) (*FmsCloudFile, error) {
	return withHooks(ctx, fcfuo.sqlSave, fcfuo.mutation, fcfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcfuo *FmsCloudFileUpdateOne) SaveX(ctx context.Context) *FmsCloudFile {
	node, err := fcfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcfuo *FmsCloudFileUpdateOne) Exec(ctx context.Context) error {
	_, err := fcfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfuo *FmsCloudFileUpdateOne) ExecX(ctx context.Context) {
	if err := fcfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fcfuo *FmsCloudFileUpdateOne) sqlSave(ctx context.Context) (_node *FmsCloudFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(fmscloudfile.Table, fmscloudfile.Columns, sqlgraph.NewFieldSpec(fmscloudfile.FieldID, field.TypeString))
	id, ok := fcfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FmsCloudFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fmscloudfile.FieldID)
		for _, f := range fields {
			if !fmscloudfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fmscloudfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcfuo.mutation.CreatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldCreatedAt, field.TypeTime, value)
	}
	if fcfuo.mutation.CreatedAtCleared() {
		_spec.ClearField(fmscloudfile.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fcfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldUpdatedAt, field.TypeTime, value)
	}
	if fcfuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(fmscloudfile.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fcfuo.mutation.State(); ok {
		_spec.SetField(fmscloudfile.FieldState, field.TypeBool, value)
	}
	if fcfuo.mutation.StateCleared() {
		_spec.ClearField(fmscloudfile.FieldState, field.TypeBool)
	}
	if value, ok := fcfuo.mutation.Name(); ok {
		_spec.SetField(fmscloudfile.FieldName, field.TypeString, value)
	}
	if value, ok := fcfuo.mutation.URL(); ok {
		_spec.SetField(fmscloudfile.FieldURL, field.TypeString, value)
	}
	if value, ok := fcfuo.mutation.Size(); ok {
		_spec.SetField(fmscloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fcfuo.mutation.AddedSize(); ok {
		_spec.AddField(fmscloudfile.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fcfuo.mutation.FileType(); ok {
		_spec.SetField(fmscloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fcfuo.mutation.AddedFileType(); ok {
		_spec.AddField(fmscloudfile.FieldFileType, field.TypeUint8, value)
	}
	if value, ok := fcfuo.mutation.UserID(); ok {
		_spec.SetField(fmscloudfile.FieldUserID, field.TypeString, value)
	}
	if value, ok := fcfuo.mutation.CloudFileStorageProviders(); ok {
		_spec.SetField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64, value)
	}
	if value, ok := fcfuo.mutation.AddedCloudFileStorageProviders(); ok {
		_spec.AddField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64, value)
	}
	if fcfuo.mutation.CloudFileStorageProvidersCleared() {
		_spec.ClearField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64)
	}
	_node = &FmsCloudFile{config: fcfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fmscloudfile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fcfuo.mutation.done = true
	return _node, nil
}
