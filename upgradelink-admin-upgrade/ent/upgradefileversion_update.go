// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradefileversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileVersionUpdate is the builder for updating UpgradeFileVersion entities.
type UpgradeFileVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeFileVersionMutation
}

// Where appends a list predicates to the UpgradeFileVersionUpdate builder.
func (ufvu *UpgradeFileVersionUpdate) Where(ps ...predicate.UpgradeFileVersion) *UpgradeFileVersionUpdate {
	ufvu.mutation.Where(ps...)
	return ufvu
}

// SetCompanyID sets the "company_id" field.
func (ufvu *UpgradeFileVersionUpdate) SetCompanyID(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.ResetCompanyID()
	ufvu.mutation.SetCompanyID(i)
	return ufvu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableCompanyID(i *int) *UpgradeFileVersionUpdate {
	if i != nil {
		ufvu.SetCompanyID(*i)
	}
	return ufvu
}

// AddCompanyID adds i to the "company_id" field.
func (ufvu *UpgradeFileVersionUpdate) AddCompanyID(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.AddCompanyID(i)
	return ufvu
}

// SetFileID sets the "file_id" field.
func (ufvu *UpgradeFileVersionUpdate) SetFileID(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.ResetFileID()
	ufvu.mutation.SetFileID(i)
	return ufvu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableFileID(i *int) *UpgradeFileVersionUpdate {
	if i != nil {
		ufvu.SetFileID(*i)
	}
	return ufvu
}

// AddFileID adds i to the "file_id" field.
func (ufvu *UpgradeFileVersionUpdate) AddFileID(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.AddFileID(i)
	return ufvu
}

// SetCloudFileID sets the "cloud_file_id" field.
func (ufvu *UpgradeFileVersionUpdate) SetCloudFileID(s string) *UpgradeFileVersionUpdate {
	ufvu.mutation.SetCloudFileID(s)
	return ufvu
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableCloudFileID(s *string) *UpgradeFileVersionUpdate {
	if s != nil {
		ufvu.SetCloudFileID(*s)
	}
	return ufvu
}

// SetVersionName sets the "version_name" field.
func (ufvu *UpgradeFileVersionUpdate) SetVersionName(s string) *UpgradeFileVersionUpdate {
	ufvu.mutation.SetVersionName(s)
	return ufvu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableVersionName(s *string) *UpgradeFileVersionUpdate {
	if s != nil {
		ufvu.SetVersionName(*s)
	}
	return ufvu
}

// SetVersionCode sets the "version_code" field.
func (ufvu *UpgradeFileVersionUpdate) SetVersionCode(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.ResetVersionCode()
	ufvu.mutation.SetVersionCode(i)
	return ufvu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableVersionCode(i *int) *UpgradeFileVersionUpdate {
	if i != nil {
		ufvu.SetVersionCode(*i)
	}
	return ufvu
}

// AddVersionCode adds i to the "version_code" field.
func (ufvu *UpgradeFileVersionUpdate) AddVersionCode(i int) *UpgradeFileVersionUpdate {
	ufvu.mutation.AddVersionCode(i)
	return ufvu
}

// SetDescription sets the "description" field.
func (ufvu *UpgradeFileVersionUpdate) SetDescription(s string) *UpgradeFileVersionUpdate {
	ufvu.mutation.SetDescription(s)
	return ufvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableDescription(s *string) *UpgradeFileVersionUpdate {
	if s != nil {
		ufvu.SetDescription(*s)
	}
	return ufvu
}

// ClearDescription clears the value of the "description" field.
func (ufvu *UpgradeFileVersionUpdate) ClearDescription() *UpgradeFileVersionUpdate {
	ufvu.mutation.ClearDescription()
	return ufvu
}

// SetIsDel sets the "is_del" field.
func (ufvu *UpgradeFileVersionUpdate) SetIsDel(i int32) *UpgradeFileVersionUpdate {
	ufvu.mutation.ResetIsDel()
	ufvu.mutation.SetIsDel(i)
	return ufvu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableIsDel(i *int32) *UpgradeFileVersionUpdate {
	if i != nil {
		ufvu.SetIsDel(*i)
	}
	return ufvu
}

// AddIsDel adds i to the "is_del" field.
func (ufvu *UpgradeFileVersionUpdate) AddIsDel(i int32) *UpgradeFileVersionUpdate {
	ufvu.mutation.AddIsDel(i)
	return ufvu
}

// SetCreateAt sets the "create_at" field.
func (ufvu *UpgradeFileVersionUpdate) SetCreateAt(t time.Time) *UpgradeFileVersionUpdate {
	ufvu.mutation.SetCreateAt(t)
	return ufvu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeFileVersionUpdate {
	if t != nil {
		ufvu.SetCreateAt(*t)
	}
	return ufvu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufvu *UpgradeFileVersionUpdate) ClearCreateAt() *UpgradeFileVersionUpdate {
	ufvu.mutation.ClearCreateAt()
	return ufvu
}

// SetUpdateAt sets the "update_at" field.
func (ufvu *UpgradeFileVersionUpdate) SetUpdateAt(t time.Time) *UpgradeFileVersionUpdate {
	ufvu.mutation.SetUpdateAt(t)
	return ufvu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufvu *UpgradeFileVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeFileVersionUpdate {
	if t != nil {
		ufvu.SetUpdateAt(*t)
	}
	return ufvu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufvu *UpgradeFileVersionUpdate) ClearUpdateAt() *UpgradeFileVersionUpdate {
	ufvu.mutation.ClearUpdateAt()
	return ufvu
}

// Mutation returns the UpgradeFileVersionMutation object of the builder.
func (ufvu *UpgradeFileVersionUpdate) Mutation() *UpgradeFileVersionMutation {
	return ufvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufvu *UpgradeFileVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufvu.sqlSave, ufvu.mutation, ufvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufvu *UpgradeFileVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := ufvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufvu *UpgradeFileVersionUpdate) Exec(ctx context.Context) error {
	_, err := ufvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufvu *UpgradeFileVersionUpdate) ExecX(ctx context.Context) {
	if err := ufvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufvu *UpgradeFileVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileversion.Table, upgradefileversion.Columns, sqlgraph.NewFieldSpec(upgradefileversion.FieldID, field.TypeInt))
	if ps := ufvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufvu.mutation.CompanyID(); ok {
		_spec.SetField(upgradefileversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefileversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.FileID(); ok {
		_spec.SetField(upgradefileversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.AddedFileID(); ok {
		_spec.AddField(upgradefileversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.CloudFileID(); ok {
		_spec.SetField(upgradefileversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := ufvu.mutation.VersionName(); ok {
		_spec.SetField(upgradefileversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := ufvu.mutation.VersionCode(); ok {
		_spec.SetField(upgradefileversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradefileversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ufvu.mutation.Description(); ok {
		_spec.SetField(upgradefileversion.FieldDescription, field.TypeString, value)
	}
	if ufvu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefileversion.FieldDescription, field.TypeString)
	}
	if value, ok := ufvu.mutation.IsDel(); ok {
		_spec.SetField(upgradefileversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufvu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufvu.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileversion.FieldCreateAt, field.TypeTime, value)
	}
	if ufvu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufvu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileversion.FieldUpdateAt, field.TypeTime, value)
	}
	if ufvu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufvu.mutation.done = true
	return n, nil
}

// UpgradeFileVersionUpdateOne is the builder for updating a single UpgradeFileVersion entity.
type UpgradeFileVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeFileVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetCompanyID(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ResetCompanyID()
	ufvuo.mutation.SetCompanyID(i)
	return ufvuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeFileVersionUpdateOne {
	if i != nil {
		ufvuo.SetCompanyID(*i)
	}
	return ufvuo
}

// AddCompanyID adds i to the "company_id" field.
func (ufvuo *UpgradeFileVersionUpdateOne) AddCompanyID(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.AddCompanyID(i)
	return ufvuo
}

// SetFileID sets the "file_id" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetFileID(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ResetFileID()
	ufvuo.mutation.SetFileID(i)
	return ufvuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableFileID(i *int) *UpgradeFileVersionUpdateOne {
	if i != nil {
		ufvuo.SetFileID(*i)
	}
	return ufvuo
}

// AddFileID adds i to the "file_id" field.
func (ufvuo *UpgradeFileVersionUpdateOne) AddFileID(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.AddFileID(i)
	return ufvuo
}

// SetCloudFileID sets the "cloud_file_id" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetCloudFileID(s string) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.SetCloudFileID(s)
	return ufvuo
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableCloudFileID(s *string) *UpgradeFileVersionUpdateOne {
	if s != nil {
		ufvuo.SetCloudFileID(*s)
	}
	return ufvuo
}

// SetVersionName sets the "version_name" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetVersionName(s string) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.SetVersionName(s)
	return ufvuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeFileVersionUpdateOne {
	if s != nil {
		ufvuo.SetVersionName(*s)
	}
	return ufvuo
}

// SetVersionCode sets the "version_code" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetVersionCode(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ResetVersionCode()
	ufvuo.mutation.SetVersionCode(i)
	return ufvuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeFileVersionUpdateOne {
	if i != nil {
		ufvuo.SetVersionCode(*i)
	}
	return ufvuo
}

// AddVersionCode adds i to the "version_code" field.
func (ufvuo *UpgradeFileVersionUpdateOne) AddVersionCode(i int) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.AddVersionCode(i)
	return ufvuo
}

// SetDescription sets the "description" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetDescription(s string) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.SetDescription(s)
	return ufvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableDescription(s *string) *UpgradeFileVersionUpdateOne {
	if s != nil {
		ufvuo.SetDescription(*s)
	}
	return ufvuo
}

// ClearDescription clears the value of the "description" field.
func (ufvuo *UpgradeFileVersionUpdateOne) ClearDescription() *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ClearDescription()
	return ufvuo
}

// SetIsDel sets the "is_del" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetIsDel(i int32) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ResetIsDel()
	ufvuo.mutation.SetIsDel(i)
	return ufvuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeFileVersionUpdateOne {
	if i != nil {
		ufvuo.SetIsDel(*i)
	}
	return ufvuo
}

// AddIsDel adds i to the "is_del" field.
func (ufvuo *UpgradeFileVersionUpdateOne) AddIsDel(i int32) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.AddIsDel(i)
	return ufvuo
}

// SetCreateAt sets the "create_at" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.SetCreateAt(t)
	return ufvuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeFileVersionUpdateOne {
	if t != nil {
		ufvuo.SetCreateAt(*t)
	}
	return ufvuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufvuo *UpgradeFileVersionUpdateOne) ClearCreateAt() *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ClearCreateAt()
	return ufvuo
}

// SetUpdateAt sets the "update_at" field.
func (ufvuo *UpgradeFileVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.SetUpdateAt(t)
	return ufvuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufvuo *UpgradeFileVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeFileVersionUpdateOne {
	if t != nil {
		ufvuo.SetUpdateAt(*t)
	}
	return ufvuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufvuo *UpgradeFileVersionUpdateOne) ClearUpdateAt() *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.ClearUpdateAt()
	return ufvuo
}

// Mutation returns the UpgradeFileVersionMutation object of the builder.
func (ufvuo *UpgradeFileVersionUpdateOne) Mutation() *UpgradeFileVersionMutation {
	return ufvuo.mutation
}

// Where appends a list predicates to the UpgradeFileVersionUpdate builder.
func (ufvuo *UpgradeFileVersionUpdateOne) Where(ps ...predicate.UpgradeFileVersion) *UpgradeFileVersionUpdateOne {
	ufvuo.mutation.Where(ps...)
	return ufvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufvuo *UpgradeFileVersionUpdateOne) Select(field string, fields ...string) *UpgradeFileVersionUpdateOne {
	ufvuo.fields = append([]string{field}, fields...)
	return ufvuo
}

// Save executes the query and returns the updated UpgradeFileVersion entity.
func (ufvuo *UpgradeFileVersionUpdateOne) Save(ctx context.Context) (*UpgradeFileVersion, error) {
	return withHooks(ctx, ufvuo.sqlSave, ufvuo.mutation, ufvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufvuo *UpgradeFileVersionUpdateOne) SaveX(ctx context.Context) *UpgradeFileVersion {
	node, err := ufvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufvuo *UpgradeFileVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := ufvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufvuo *UpgradeFileVersionUpdateOne) ExecX(ctx context.Context) {
	if err := ufvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufvuo *UpgradeFileVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeFileVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileversion.Table, upgradefileversion.Columns, sqlgraph.NewFieldSpec(upgradefileversion.FieldID, field.TypeInt))
	id, ok := ufvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeFileVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradefileversion.FieldID)
		for _, f := range fields {
			if !upgradefileversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradefileversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufvuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradefileversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefileversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.FileID(); ok {
		_spec.SetField(upgradefileversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.AddedFileID(); ok {
		_spec.AddField(upgradefileversion.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.CloudFileID(); ok {
		_spec.SetField(upgradefileversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := ufvuo.mutation.VersionName(); ok {
		_spec.SetField(upgradefileversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := ufvuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradefileversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradefileversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ufvuo.mutation.Description(); ok {
		_spec.SetField(upgradefileversion.FieldDescription, field.TypeString, value)
	}
	if ufvuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefileversion.FieldDescription, field.TypeString)
	}
	if value, ok := ufvuo.mutation.IsDel(); ok {
		_spec.SetField(upgradefileversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufvuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufvuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileversion.FieldCreateAt, field.TypeTime, value)
	}
	if ufvuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufvuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileversion.FieldUpdateAt, field.TypeTime, value)
	}
	if ufvuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeFileVersion{config: ufvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufvuo.mutation.done = true
	return _node, nil
}
