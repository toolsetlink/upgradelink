// Code generated by ent, DO NOT EDIT.

package upgradeconfigurationupgradestrategy

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradeconfigurationupgradestrategy type in the database.
	Label = "upgrade_configuration_upgrade_strategy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldConfigurationID holds the string denoting the configuration_id field in the database.
	FieldConfigurationID = "configuration_id"
	// FieldConfigurationVersionID holds the string denoting the configuration_version_id field in the database.
	FieldConfigurationVersionID = "configuration_version_id"
	// FieldBeginDatetime holds the string denoting the begin_datetime field in the database.
	FieldBeginDatetime = "begin_datetime"
	// FieldEndDatetime holds the string denoting the end_datetime field in the database.
	FieldEndDatetime = "end_datetime"
	// FieldUpgradeType holds the string denoting the upgrade_type field in the database.
	FieldUpgradeType = "upgrade_type"
	// FieldPromptUpgradeContent holds the string denoting the prompt_upgrade_content field in the database.
	FieldPromptUpgradeContent = "prompt_upgrade_content"
	// FieldUpgradeDevType holds the string denoting the upgrade_dev_type field in the database.
	FieldUpgradeDevType = "upgrade_dev_type"
	// FieldUpgradeDevData holds the string denoting the upgrade_dev_data field in the database.
	FieldUpgradeDevData = "upgrade_dev_data"
	// FieldUpgradeVersionType holds the string denoting the upgrade_version_type field in the database.
	FieldUpgradeVersionType = "upgrade_version_type"
	// FieldUpgradeVersionData holds the string denoting the upgrade_version_data field in the database.
	FieldUpgradeVersionData = "upgrade_version_data"
	// FieldIsGray holds the string denoting the is_gray field in the database.
	FieldIsGray = "is_gray"
	// FieldGrayData holds the string denoting the gray_data field in the database.
	FieldGrayData = "gray_data"
	// FieldIsFlowLimit holds the string denoting the is_flow_limit field in the database.
	FieldIsFlowLimit = "is_flow_limit"
	// FieldFlowLimitData holds the string denoting the flow_limit_data field in the database.
	FieldFlowLimitData = "flow_limit_data"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradeconfigurationupgradestrategy in the database.
	Table = "upgrade_configuration_upgrade_strategy"
)

// Columns holds all SQL columns for upgradeconfigurationupgradestrategy fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldEnable,
	FieldName,
	FieldDescription,
	FieldConfigurationID,
	FieldConfigurationVersionID,
	FieldBeginDatetime,
	FieldEndDatetime,
	FieldUpgradeType,
	FieldPromptUpgradeContent,
	FieldUpgradeDevType,
	FieldUpgradeDevData,
	FieldUpgradeVersionType,
	FieldUpgradeVersionData,
	FieldIsGray,
	FieldGrayData,
	FieldIsFlowLimit,
	FieldFlowLimitData,
	FieldIsDel,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeConfigurationUpgradeStrategy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByConfigurationID orders the results by the configuration_id field.
func ByConfigurationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationID, opts...).ToFunc()
}

// ByConfigurationVersionID orders the results by the configuration_version_id field.
func ByConfigurationVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationVersionID, opts...).ToFunc()
}

// ByBeginDatetime orders the results by the begin_datetime field.
func ByBeginDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginDatetime, opts...).ToFunc()
}

// ByEndDatetime orders the results by the end_datetime field.
func ByEndDatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDatetime, opts...).ToFunc()
}

// ByUpgradeType orders the results by the upgrade_type field.
func ByUpgradeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradeType, opts...).ToFunc()
}

// ByPromptUpgradeContent orders the results by the prompt_upgrade_content field.
func ByPromptUpgradeContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptUpgradeContent, opts...).ToFunc()
}

// ByUpgradeDevType orders the results by the upgrade_dev_type field.
func ByUpgradeDevType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradeDevType, opts...).ToFunc()
}

// ByUpgradeDevData orders the results by the upgrade_dev_data field.
func ByUpgradeDevData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradeDevData, opts...).ToFunc()
}

// ByUpgradeVersionType orders the results by the upgrade_version_type field.
func ByUpgradeVersionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradeVersionType, opts...).ToFunc()
}

// ByUpgradeVersionData orders the results by the upgrade_version_data field.
func ByUpgradeVersionData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradeVersionData, opts...).ToFunc()
}

// ByIsGray orders the results by the is_gray field.
func ByIsGray(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGray, opts...).ToFunc()
}

// ByGrayData orders the results by the gray_data field.
func ByGrayData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrayData, opts...).ToFunc()
}

// ByIsFlowLimit orders the results by the is_flow_limit field.
func ByIsFlowLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFlowLimit, opts...).ToFunc()
}

// ByFlowLimitData orders the results by the flow_limit_data field.
func ByFlowLimitData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowLimitData, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
