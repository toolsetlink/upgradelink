// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeurlversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlVersionUpdate is the builder for updating UpgradeUrlVersion entities.
type UpgradeUrlVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlVersionMutation
}

// Where appends a list predicates to the UpgradeUrlVersionUpdate builder.
func (uuvu *UpgradeUrlVersionUpdate) Where(ps ...predicate.UpgradeUrlVersion) *UpgradeUrlVersionUpdate {
	uuvu.mutation.Where(ps...)
	return uuvu
}

// SetCompanyID sets the "company_id" field.
func (uuvu *UpgradeUrlVersionUpdate) SetCompanyID(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.ResetCompanyID()
	uuvu.mutation.SetCompanyID(i)
	return uuvu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableCompanyID(i *int) *UpgradeUrlVersionUpdate {
	if i != nil {
		uuvu.SetCompanyID(*i)
	}
	return uuvu
}

// AddCompanyID adds i to the "company_id" field.
func (uuvu *UpgradeUrlVersionUpdate) AddCompanyID(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.AddCompanyID(i)
	return uuvu
}

// SetURLID sets the "url_id" field.
func (uuvu *UpgradeUrlVersionUpdate) SetURLID(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.ResetURLID()
	uuvu.mutation.SetURLID(i)
	return uuvu
}

// SetNillableURLID sets the "url_id" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableURLID(i *int) *UpgradeUrlVersionUpdate {
	if i != nil {
		uuvu.SetURLID(*i)
	}
	return uuvu
}

// AddURLID adds i to the "url_id" field.
func (uuvu *UpgradeUrlVersionUpdate) AddURLID(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.AddURLID(i)
	return uuvu
}

// SetURLPath sets the "url_path" field.
func (uuvu *UpgradeUrlVersionUpdate) SetURLPath(s string) *UpgradeUrlVersionUpdate {
	uuvu.mutation.SetURLPath(s)
	return uuvu
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableURLPath(s *string) *UpgradeUrlVersionUpdate {
	if s != nil {
		uuvu.SetURLPath(*s)
	}
	return uuvu
}

// SetVersionName sets the "version_name" field.
func (uuvu *UpgradeUrlVersionUpdate) SetVersionName(s string) *UpgradeUrlVersionUpdate {
	uuvu.mutation.SetVersionName(s)
	return uuvu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableVersionName(s *string) *UpgradeUrlVersionUpdate {
	if s != nil {
		uuvu.SetVersionName(*s)
	}
	return uuvu
}

// SetVersionCode sets the "version_code" field.
func (uuvu *UpgradeUrlVersionUpdate) SetVersionCode(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.ResetVersionCode()
	uuvu.mutation.SetVersionCode(i)
	return uuvu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableVersionCode(i *int) *UpgradeUrlVersionUpdate {
	if i != nil {
		uuvu.SetVersionCode(*i)
	}
	return uuvu
}

// AddVersionCode adds i to the "version_code" field.
func (uuvu *UpgradeUrlVersionUpdate) AddVersionCode(i int) *UpgradeUrlVersionUpdate {
	uuvu.mutation.AddVersionCode(i)
	return uuvu
}

// SetDescription sets the "description" field.
func (uuvu *UpgradeUrlVersionUpdate) SetDescription(s string) *UpgradeUrlVersionUpdate {
	uuvu.mutation.SetDescription(s)
	return uuvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableDescription(s *string) *UpgradeUrlVersionUpdate {
	if s != nil {
		uuvu.SetDescription(*s)
	}
	return uuvu
}

// ClearDescription clears the value of the "description" field.
func (uuvu *UpgradeUrlVersionUpdate) ClearDescription() *UpgradeUrlVersionUpdate {
	uuvu.mutation.ClearDescription()
	return uuvu
}

// SetIsDel sets the "is_del" field.
func (uuvu *UpgradeUrlVersionUpdate) SetIsDel(i int32) *UpgradeUrlVersionUpdate {
	uuvu.mutation.ResetIsDel()
	uuvu.mutation.SetIsDel(i)
	return uuvu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableIsDel(i *int32) *UpgradeUrlVersionUpdate {
	if i != nil {
		uuvu.SetIsDel(*i)
	}
	return uuvu
}

// AddIsDel adds i to the "is_del" field.
func (uuvu *UpgradeUrlVersionUpdate) AddIsDel(i int32) *UpgradeUrlVersionUpdate {
	uuvu.mutation.AddIsDel(i)
	return uuvu
}

// SetCreateAt sets the "create_at" field.
func (uuvu *UpgradeUrlVersionUpdate) SetCreateAt(t time.Time) *UpgradeUrlVersionUpdate {
	uuvu.mutation.SetCreateAt(t)
	return uuvu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeUrlVersionUpdate {
	if t != nil {
		uuvu.SetCreateAt(*t)
	}
	return uuvu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuvu *UpgradeUrlVersionUpdate) ClearCreateAt() *UpgradeUrlVersionUpdate {
	uuvu.mutation.ClearCreateAt()
	return uuvu
}

// SetUpdateAt sets the "update_at" field.
func (uuvu *UpgradeUrlVersionUpdate) SetUpdateAt(t time.Time) *UpgradeUrlVersionUpdate {
	uuvu.mutation.SetUpdateAt(t)
	return uuvu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuvu *UpgradeUrlVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlVersionUpdate {
	if t != nil {
		uuvu.SetUpdateAt(*t)
	}
	return uuvu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuvu *UpgradeUrlVersionUpdate) ClearUpdateAt() *UpgradeUrlVersionUpdate {
	uuvu.mutation.ClearUpdateAt()
	return uuvu
}

// Mutation returns the UpgradeUrlVersionMutation object of the builder.
func (uuvu *UpgradeUrlVersionUpdate) Mutation() *UpgradeUrlVersionMutation {
	return uuvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuvu *UpgradeUrlVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuvu.sqlSave, uuvu.mutation, uuvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuvu *UpgradeUrlVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := uuvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuvu *UpgradeUrlVersionUpdate) Exec(ctx context.Context) error {
	_, err := uuvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuvu *UpgradeUrlVersionUpdate) ExecX(ctx context.Context) {
	if err := uuvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuvu *UpgradeUrlVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlversion.Table, upgradeurlversion.Columns, sqlgraph.NewFieldSpec(upgradeurlversion.FieldID, field.TypeInt))
	if ps := uuvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuvu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurlversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurlversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.URLID(); ok {
		_spec.SetField(upgradeurlversion.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.AddedURLID(); ok {
		_spec.AddField(upgradeurlversion.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.URLPath(); ok {
		_spec.SetField(upgradeurlversion.FieldURLPath, field.TypeString, value)
	}
	if value, ok := uuvu.mutation.VersionName(); ok {
		_spec.SetField(upgradeurlversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uuvu.mutation.VersionCode(); ok {
		_spec.SetField(upgradeurlversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeurlversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uuvu.mutation.Description(); ok {
		_spec.SetField(upgradeurlversion.FieldDescription, field.TypeString, value)
	}
	if uuvu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurlversion.FieldDescription, field.TypeString)
	}
	if value, ok := uuvu.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuvu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuvu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlversion.FieldCreateAt, field.TypeTime, value)
	}
	if uuvu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuvu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uuvu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuvu.mutation.done = true
	return n, nil
}

// UpgradeUrlVersionUpdateOne is the builder for updating a single UpgradeUrlVersion entity.
type UpgradeUrlVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeUrlVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetCompanyID(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ResetCompanyID()
	uuvuo.mutation.SetCompanyID(i)
	return uuvuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeUrlVersionUpdateOne {
	if i != nil {
		uuvuo.SetCompanyID(*i)
	}
	return uuvuo
}

// AddCompanyID adds i to the "company_id" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) AddCompanyID(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.AddCompanyID(i)
	return uuvuo
}

// SetURLID sets the "url_id" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetURLID(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ResetURLID()
	uuvuo.mutation.SetURLID(i)
	return uuvuo
}

// SetNillableURLID sets the "url_id" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableURLID(i *int) *UpgradeUrlVersionUpdateOne {
	if i != nil {
		uuvuo.SetURLID(*i)
	}
	return uuvuo
}

// AddURLID adds i to the "url_id" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) AddURLID(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.AddURLID(i)
	return uuvuo
}

// SetURLPath sets the "url_path" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetURLPath(s string) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.SetURLPath(s)
	return uuvuo
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableURLPath(s *string) *UpgradeUrlVersionUpdateOne {
	if s != nil {
		uuvuo.SetURLPath(*s)
	}
	return uuvuo
}

// SetVersionName sets the "version_name" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetVersionName(s string) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.SetVersionName(s)
	return uuvuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeUrlVersionUpdateOne {
	if s != nil {
		uuvuo.SetVersionName(*s)
	}
	return uuvuo
}

// SetVersionCode sets the "version_code" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetVersionCode(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ResetVersionCode()
	uuvuo.mutation.SetVersionCode(i)
	return uuvuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeUrlVersionUpdateOne {
	if i != nil {
		uuvuo.SetVersionCode(*i)
	}
	return uuvuo
}

// AddVersionCode adds i to the "version_code" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) AddVersionCode(i int) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.AddVersionCode(i)
	return uuvuo
}

// SetDescription sets the "description" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetDescription(s string) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.SetDescription(s)
	return uuvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableDescription(s *string) *UpgradeUrlVersionUpdateOne {
	if s != nil {
		uuvuo.SetDescription(*s)
	}
	return uuvuo
}

// ClearDescription clears the value of the "description" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) ClearDescription() *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ClearDescription()
	return uuvuo
}

// SetIsDel sets the "is_del" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetIsDel(i int32) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ResetIsDel()
	uuvuo.mutation.SetIsDel(i)
	return uuvuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeUrlVersionUpdateOne {
	if i != nil {
		uuvuo.SetIsDel(*i)
	}
	return uuvuo
}

// AddIsDel adds i to the "is_del" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) AddIsDel(i int32) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.AddIsDel(i)
	return uuvuo
}

// SetCreateAt sets the "create_at" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.SetCreateAt(t)
	return uuvuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeUrlVersionUpdateOne {
	if t != nil {
		uuvuo.SetCreateAt(*t)
	}
	return uuvuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) ClearCreateAt() *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ClearCreateAt()
	return uuvuo
}

// SetUpdateAt sets the "update_at" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.SetUpdateAt(t)
	return uuvuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuvuo *UpgradeUrlVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeUrlVersionUpdateOne {
	if t != nil {
		uuvuo.SetUpdateAt(*t)
	}
	return uuvuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuvuo *UpgradeUrlVersionUpdateOne) ClearUpdateAt() *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.ClearUpdateAt()
	return uuvuo
}

// Mutation returns the UpgradeUrlVersionMutation object of the builder.
func (uuvuo *UpgradeUrlVersionUpdateOne) Mutation() *UpgradeUrlVersionMutation {
	return uuvuo.mutation
}

// Where appends a list predicates to the UpgradeUrlVersionUpdate builder.
func (uuvuo *UpgradeUrlVersionUpdateOne) Where(ps ...predicate.UpgradeUrlVersion) *UpgradeUrlVersionUpdateOne {
	uuvuo.mutation.Where(ps...)
	return uuvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuvuo *UpgradeUrlVersionUpdateOne) Select(field string, fields ...string) *UpgradeUrlVersionUpdateOne {
	uuvuo.fields = append([]string{field}, fields...)
	return uuvuo
}

// Save executes the query and returns the updated UpgradeUrlVersion entity.
func (uuvuo *UpgradeUrlVersionUpdateOne) Save(ctx context.Context) (*UpgradeUrlVersion, error) {
	return withHooks(ctx, uuvuo.sqlSave, uuvuo.mutation, uuvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuvuo *UpgradeUrlVersionUpdateOne) SaveX(ctx context.Context) *UpgradeUrlVersion {
	node, err := uuvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuvuo *UpgradeUrlVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := uuvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuvuo *UpgradeUrlVersionUpdateOne) ExecX(ctx context.Context) {
	if err := uuvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuvuo *UpgradeUrlVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeUrlVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlversion.Table, upgradeurlversion.Columns, sqlgraph.NewFieldSpec(upgradeurlversion.FieldID, field.TypeInt))
	id, ok := uuvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeUrlVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeurlversion.FieldID)
		for _, f := range fields {
			if !upgradeurlversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeurlversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuvuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurlversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurlversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.URLID(); ok {
		_spec.SetField(upgradeurlversion.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.AddedURLID(); ok {
		_spec.AddField(upgradeurlversion.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.URLPath(); ok {
		_spec.SetField(upgradeurlversion.FieldURLPath, field.TypeString, value)
	}
	if value, ok := uuvuo.mutation.VersionName(); ok {
		_spec.SetField(upgradeurlversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uuvuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradeurlversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeurlversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uuvuo.mutation.Description(); ok {
		_spec.SetField(upgradeurlversion.FieldDescription, field.TypeString, value)
	}
	if uuvuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurlversion.FieldDescription, field.TypeString)
	}
	if value, ok := uuvuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuvuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuvuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlversion.FieldCreateAt, field.TypeTime, value)
	}
	if uuvuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuvuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uuvuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeUrlVersion{config: uuvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuvuo.mutation.done = true
	return _node, nil
}
