// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradeelectronversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronVersionCreate is the builder for creating a UpgradeElectronVersion entity.
type UpgradeElectronVersionCreate struct {
	config
	mutation *UpgradeElectronVersionMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (uevc *UpgradeElectronVersionCreate) SetCompanyID(i int) *UpgradeElectronVersionCreate {
	uevc.mutation.SetCompanyID(i)
	return uevc
}

// SetElectronID sets the "electron_id" field.
func (uevc *UpgradeElectronVersionCreate) SetElectronID(i int) *UpgradeElectronVersionCreate {
	uevc.mutation.SetElectronID(i)
	return uevc
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uevc *UpgradeElectronVersionCreate) SetCloudFileID(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetCloudFileID(s)
	return uevc
}

// SetSha512 sets the "sha512" field.
func (uevc *UpgradeElectronVersionCreate) SetSha512(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetSha512(s)
	return uevc
}

// SetInstallCloudFileID sets the "install_cloud_file_id" field.
func (uevc *UpgradeElectronVersionCreate) SetInstallCloudFileID(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetInstallCloudFileID(s)
	return uevc
}

// SetInstallSha512 sets the "install_sha512" field.
func (uevc *UpgradeElectronVersionCreate) SetInstallSha512(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetInstallSha512(s)
	return uevc
}

// SetVersionName sets the "version_name" field.
func (uevc *UpgradeElectronVersionCreate) SetVersionName(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetVersionName(s)
	return uevc
}

// SetVersionCode sets the "version_code" field.
func (uevc *UpgradeElectronVersionCreate) SetVersionCode(i int) *UpgradeElectronVersionCreate {
	uevc.mutation.SetVersionCode(i)
	return uevc
}

// SetPlatform sets the "platform" field.
func (uevc *UpgradeElectronVersionCreate) SetPlatform(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetPlatform(s)
	return uevc
}

// SetArch sets the "arch" field.
func (uevc *UpgradeElectronVersionCreate) SetArch(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetArch(s)
	return uevc
}

// SetDescription sets the "description" field.
func (uevc *UpgradeElectronVersionCreate) SetDescription(s string) *UpgradeElectronVersionCreate {
	uevc.mutation.SetDescription(s)
	return uevc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uevc *UpgradeElectronVersionCreate) SetNillableDescription(s *string) *UpgradeElectronVersionCreate {
	if s != nil {
		uevc.SetDescription(*s)
	}
	return uevc
}

// SetIsDel sets the "is_del" field.
func (uevc *UpgradeElectronVersionCreate) SetIsDel(i int32) *UpgradeElectronVersionCreate {
	uevc.mutation.SetIsDel(i)
	return uevc
}

// SetCreateAt sets the "create_at" field.
func (uevc *UpgradeElectronVersionCreate) SetCreateAt(t time.Time) *UpgradeElectronVersionCreate {
	uevc.mutation.SetCreateAt(t)
	return uevc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uevc *UpgradeElectronVersionCreate) SetNillableCreateAt(t *time.Time) *UpgradeElectronVersionCreate {
	if t != nil {
		uevc.SetCreateAt(*t)
	}
	return uevc
}

// SetUpdateAt sets the "update_at" field.
func (uevc *UpgradeElectronVersionCreate) SetUpdateAt(t time.Time) *UpgradeElectronVersionCreate {
	uevc.mutation.SetUpdateAt(t)
	return uevc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uevc *UpgradeElectronVersionCreate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronVersionCreate {
	if t != nil {
		uevc.SetUpdateAt(*t)
	}
	return uevc
}

// SetID sets the "id" field.
func (uevc *UpgradeElectronVersionCreate) SetID(i int) *UpgradeElectronVersionCreate {
	uevc.mutation.SetID(i)
	return uevc
}

// Mutation returns the UpgradeElectronVersionMutation object of the builder.
func (uevc *UpgradeElectronVersionCreate) Mutation() *UpgradeElectronVersionMutation {
	return uevc.mutation
}

// Save creates the UpgradeElectronVersion in the database.
func (uevc *UpgradeElectronVersionCreate) Save(ctx context.Context) (*UpgradeElectronVersion, error) {
	return withHooks(ctx, uevc.sqlSave, uevc.mutation, uevc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uevc *UpgradeElectronVersionCreate) SaveX(ctx context.Context) *UpgradeElectronVersion {
	v, err := uevc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uevc *UpgradeElectronVersionCreate) Exec(ctx context.Context) error {
	_, err := uevc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uevc *UpgradeElectronVersionCreate) ExecX(ctx context.Context) {
	if err := uevc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uevc *UpgradeElectronVersionCreate) check() error {
	if _, ok := uevc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeElectronVersion.company_id"`)}
	}
	if _, ok := uevc.mutation.ElectronID(); !ok {
		return &ValidationError{Name: "electron_id", err: errors.New(`ent: missing required field "UpgradeElectronVersion.electron_id"`)}
	}
	if _, ok := uevc.mutation.CloudFileID(); !ok {
		return &ValidationError{Name: "cloud_file_id", err: errors.New(`ent: missing required field "UpgradeElectronVersion.cloud_file_id"`)}
	}
	if _, ok := uevc.mutation.Sha512(); !ok {
		return &ValidationError{Name: "sha512", err: errors.New(`ent: missing required field "UpgradeElectronVersion.sha512"`)}
	}
	if _, ok := uevc.mutation.InstallCloudFileID(); !ok {
		return &ValidationError{Name: "install_cloud_file_id", err: errors.New(`ent: missing required field "UpgradeElectronVersion.install_cloud_file_id"`)}
	}
	if _, ok := uevc.mutation.InstallSha512(); !ok {
		return &ValidationError{Name: "install_sha512", err: errors.New(`ent: missing required field "UpgradeElectronVersion.install_sha512"`)}
	}
	if _, ok := uevc.mutation.VersionName(); !ok {
		return &ValidationError{Name: "version_name", err: errors.New(`ent: missing required field "UpgradeElectronVersion.version_name"`)}
	}
	if _, ok := uevc.mutation.VersionCode(); !ok {
		return &ValidationError{Name: "version_code", err: errors.New(`ent: missing required field "UpgradeElectronVersion.version_code"`)}
	}
	if _, ok := uevc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "UpgradeElectronVersion.platform"`)}
	}
	if _, ok := uevc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`ent: missing required field "UpgradeElectronVersion.arch"`)}
	}
	if _, ok := uevc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeElectronVersion.is_del"`)}
	}
	return nil
}

func (uevc *UpgradeElectronVersionCreate) sqlSave(ctx context.Context) (*UpgradeElectronVersion, error) {
	if err := uevc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uevc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uevc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uevc.mutation.id = &_node.ID
	uevc.mutation.done = true
	return _node, nil
}

func (uevc *UpgradeElectronVersionCreate) createSpec() (*UpgradeElectronVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeElectronVersion{config: uevc.config}
		_spec = sqlgraph.NewCreateSpec(upgradeelectronversion.Table, sqlgraph.NewFieldSpec(upgradeelectronversion.FieldID, field.TypeInt))
	)
	if id, ok := uevc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uevc.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := uevc.mutation.ElectronID(); ok {
		_spec.SetField(upgradeelectronversion.FieldElectronID, field.TypeInt, value)
		_node.ElectronID = value
	}
	if value, ok := uevc.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCloudFileID, field.TypeString, value)
		_node.CloudFileID = value
	}
	if value, ok := uevc.mutation.Sha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldSha512, field.TypeString, value)
		_node.Sha512 = value
	}
	if value, ok := uevc.mutation.InstallCloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallCloudFileID, field.TypeString, value)
		_node.InstallCloudFileID = value
	}
	if value, ok := uevc.mutation.InstallSha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallSha512, field.TypeString, value)
		_node.InstallSha512 = value
	}
	if value, ok := uevc.mutation.VersionName(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionName, field.TypeString, value)
		_node.VersionName = value
	}
	if value, ok := uevc.mutation.VersionCode(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionCode, field.TypeInt, value)
		_node.VersionCode = value
	}
	if value, ok := uevc.mutation.Platform(); ok {
		_spec.SetField(upgradeelectronversion.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := uevc.mutation.Arch(); ok {
		_spec.SetField(upgradeelectronversion.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := uevc.mutation.Description(); ok {
		_spec.SetField(upgradeelectronversion.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uevc.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronversion.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := uevc.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := uevc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeElectronVersionCreateBulk is the builder for creating many UpgradeElectronVersion entities in bulk.
type UpgradeElectronVersionCreateBulk struct {
	config
	err      error
	builders []*UpgradeElectronVersionCreate
}

// Save creates the UpgradeElectronVersion entities in the database.
func (uevcb *UpgradeElectronVersionCreateBulk) Save(ctx context.Context) ([]*UpgradeElectronVersion, error) {
	if uevcb.err != nil {
		return nil, uevcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uevcb.builders))
	nodes := make([]*UpgradeElectronVersion, len(uevcb.builders))
	mutators := make([]Mutator, len(uevcb.builders))
	for i := range uevcb.builders {
		func(i int, root context.Context) {
			builder := uevcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeElectronVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uevcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uevcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uevcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uevcb *UpgradeElectronVersionCreateBulk) SaveX(ctx context.Context) []*UpgradeElectronVersion {
	v, err := uevcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uevcb *UpgradeElectronVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := uevcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uevcb *UpgradeElectronVersionCreateBulk) ExecX(ctx context.Context) {
	if err := uevcb.Exec(ctx); err != nil {
		panic(err)
	}
}
