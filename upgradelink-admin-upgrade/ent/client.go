// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"upgradelink-admin-upgrade/ent/migrate"

	"upgradelink-admin-upgrade/ent/fmscloudfile"
	"upgradelink-admin-upgrade/ent/sysuser"
	"upgradelink-admin-upgrade/ent/upgradeapk"
	"upgradelink-admin-upgrade/ent/upgradeapkupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradeapkupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradeapkupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradeapkversion"
	"upgradelink-admin-upgrade/ent/upgradeappdownloadreportlog"
	"upgradelink-admin-upgrade/ent/upgradecompanyincome"
	"upgradelink-admin-upgrade/ent/upgradecompanytrafficpacket"
	"upgradelink-admin-upgrade/ent/upgradeconfiguration"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationversion"
	"upgradelink-admin-upgrade/ent/upgradedev"
	"upgradelink-admin-upgrade/ent/upgradedevgroup"
	"upgradelink-admin-upgrade/ent/upgradedevgrouprelation"
	"upgradelink-admin-upgrade/ent/upgradedevmodel"
	"upgradelink-admin-upgrade/ent/upgradeelectron"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradeelectronversion"
	"upgradelink-admin-upgrade/ent/upgradefile"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradefileversion"
	"upgradelink-admin-upgrade/ent/upgradetauri"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradetauriversion"
	"upgradelink-admin-upgrade/ent/upgradetrafficpacket"
	"upgradelink-admin-upgrade/ent/upgradeurl"
	"upgradelink-admin-upgrade/ent/upgradeurlupgradestrategy"
	"upgradelink-admin-upgrade/ent/upgradeurlupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/ent/upgradeurlupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/ent/upgradeurlversion"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FmsCloudFile is the client for interacting with the FmsCloudFile builders.
	FmsCloudFile *FmsCloudFileClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
	// UpgradeApk is the client for interacting with the UpgradeApk builders.
	UpgradeApk *UpgradeApkClient
	// UpgradeApkUpgradeStrategy is the client for interacting with the UpgradeApkUpgradeStrategy builders.
	UpgradeApkUpgradeStrategy *UpgradeApkUpgradeStrategyClient
	// UpgradeApkUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeApkUpgradeStrategyFlowLimitStrategy builders.
	UpgradeApkUpgradeStrategyFlowLimitStrategy *UpgradeApkUpgradeStrategyFlowLimitStrategyClient
	// UpgradeApkUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeApkUpgradeStrategyGrayStrategy builders.
	UpgradeApkUpgradeStrategyGrayStrategy *UpgradeApkUpgradeStrategyGrayStrategyClient
	// UpgradeApkVersion is the client for interacting with the UpgradeApkVersion builders.
	UpgradeApkVersion *UpgradeApkVersionClient
	// UpgradeAppDownloadReportLog is the client for interacting with the UpgradeAppDownloadReportLog builders.
	UpgradeAppDownloadReportLog *UpgradeAppDownloadReportLogClient
	// UpgradeCompanyIncome is the client for interacting with the UpgradeCompanyIncome builders.
	UpgradeCompanyIncome *UpgradeCompanyIncomeClient
	// UpgradeCompanyTrafficPacket is the client for interacting with the UpgradeCompanyTrafficPacket builders.
	UpgradeCompanyTrafficPacket *UpgradeCompanyTrafficPacketClient
	// UpgradeConfiguration is the client for interacting with the UpgradeConfiguration builders.
	UpgradeConfiguration *UpgradeConfigurationClient
	// UpgradeConfigurationUpgradeStrategy is the client for interacting with the UpgradeConfigurationUpgradeStrategy builders.
	UpgradeConfigurationUpgradeStrategy *UpgradeConfigurationUpgradeStrategyClient
	// UpgradeConfigurationUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeConfigurationUpgradeStrategyFlowLimitStrategy builders.
	UpgradeConfigurationUpgradeStrategyFlowLimitStrategy *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient
	// UpgradeConfigurationUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeConfigurationUpgradeStrategyGrayStrategy builders.
	UpgradeConfigurationUpgradeStrategyGrayStrategy *UpgradeConfigurationUpgradeStrategyGrayStrategyClient
	// UpgradeConfigurationVersion is the client for interacting with the UpgradeConfigurationVersion builders.
	UpgradeConfigurationVersion *UpgradeConfigurationVersionClient
	// UpgradeDev is the client for interacting with the UpgradeDev builders.
	UpgradeDev *UpgradeDevClient
	// UpgradeDevGroup is the client for interacting with the UpgradeDevGroup builders.
	UpgradeDevGroup *UpgradeDevGroupClient
	// UpgradeDevGroupRelation is the client for interacting with the UpgradeDevGroupRelation builders.
	UpgradeDevGroupRelation *UpgradeDevGroupRelationClient
	// UpgradeDevModel is the client for interacting with the UpgradeDevModel builders.
	UpgradeDevModel *UpgradeDevModelClient
	// UpgradeElectron is the client for interacting with the UpgradeElectron builders.
	UpgradeElectron *UpgradeElectronClient
	// UpgradeElectronUpgradeStrategy is the client for interacting with the UpgradeElectronUpgradeStrategy builders.
	UpgradeElectronUpgradeStrategy *UpgradeElectronUpgradeStrategyClient
	// UpgradeElectronUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeElectronUpgradeStrategyFlowLimitStrategy builders.
	UpgradeElectronUpgradeStrategyFlowLimitStrategy *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient
	// UpgradeElectronUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeElectronUpgradeStrategyGrayStrategy builders.
	UpgradeElectronUpgradeStrategyGrayStrategy *UpgradeElectronUpgradeStrategyGrayStrategyClient
	// UpgradeElectronVersion is the client for interacting with the UpgradeElectronVersion builders.
	UpgradeElectronVersion *UpgradeElectronVersionClient
	// UpgradeFile is the client for interacting with the UpgradeFile builders.
	UpgradeFile *UpgradeFileClient
	// UpgradeFileUpgradeStrategy is the client for interacting with the UpgradeFileUpgradeStrategy builders.
	UpgradeFileUpgradeStrategy *UpgradeFileUpgradeStrategyClient
	// UpgradeFileUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeFileUpgradeStrategyFlowLimitStrategy builders.
	UpgradeFileUpgradeStrategyFlowLimitStrategy *UpgradeFileUpgradeStrategyFlowLimitStrategyClient
	// UpgradeFileUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeFileUpgradeStrategyGrayStrategy builders.
	UpgradeFileUpgradeStrategyGrayStrategy *UpgradeFileUpgradeStrategyGrayStrategyClient
	// UpgradeFileVersion is the client for interacting with the UpgradeFileVersion builders.
	UpgradeFileVersion *UpgradeFileVersionClient
	// UpgradeTauri is the client for interacting with the UpgradeTauri builders.
	UpgradeTauri *UpgradeTauriClient
	// UpgradeTauriUpgradeStrategy is the client for interacting with the UpgradeTauriUpgradeStrategy builders.
	UpgradeTauriUpgradeStrategy *UpgradeTauriUpgradeStrategyClient
	// UpgradeTauriUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeTauriUpgradeStrategyFlowLimitStrategy builders.
	UpgradeTauriUpgradeStrategyFlowLimitStrategy *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient
	// UpgradeTauriUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeTauriUpgradeStrategyGrayStrategy builders.
	UpgradeTauriUpgradeStrategyGrayStrategy *UpgradeTauriUpgradeStrategyGrayStrategyClient
	// UpgradeTauriVersion is the client for interacting with the UpgradeTauriVersion builders.
	UpgradeTauriVersion *UpgradeTauriVersionClient
	// UpgradeTrafficPacket is the client for interacting with the UpgradeTrafficPacket builders.
	UpgradeTrafficPacket *UpgradeTrafficPacketClient
	// UpgradeUrl is the client for interacting with the UpgradeUrl builders.
	UpgradeUrl *UpgradeUrlClient
	// UpgradeUrlUpgradeStrategy is the client for interacting with the UpgradeUrlUpgradeStrategy builders.
	UpgradeUrlUpgradeStrategy *UpgradeUrlUpgradeStrategyClient
	// UpgradeUrlUpgradeStrategyFlowLimitStrategy is the client for interacting with the UpgradeUrlUpgradeStrategyFlowLimitStrategy builders.
	UpgradeUrlUpgradeStrategyFlowLimitStrategy *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient
	// UpgradeUrlUpgradeStrategyGrayStrategy is the client for interacting with the UpgradeUrlUpgradeStrategyGrayStrategy builders.
	UpgradeUrlUpgradeStrategyGrayStrategy *UpgradeUrlUpgradeStrategyGrayStrategyClient
	// UpgradeUrlVersion is the client for interacting with the UpgradeUrlVersion builders.
	UpgradeUrlVersion *UpgradeUrlVersionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FmsCloudFile = NewFmsCloudFileClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
	c.UpgradeApk = NewUpgradeApkClient(c.config)
	c.UpgradeApkUpgradeStrategy = NewUpgradeApkUpgradeStrategyClient(c.config)
	c.UpgradeApkUpgradeStrategyFlowLimitStrategy = NewUpgradeApkUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeApkUpgradeStrategyGrayStrategy = NewUpgradeApkUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeApkVersion = NewUpgradeApkVersionClient(c.config)
	c.UpgradeAppDownloadReportLog = NewUpgradeAppDownloadReportLogClient(c.config)
	c.UpgradeCompanyIncome = NewUpgradeCompanyIncomeClient(c.config)
	c.UpgradeCompanyTrafficPacket = NewUpgradeCompanyTrafficPacketClient(c.config)
	c.UpgradeConfiguration = NewUpgradeConfigurationClient(c.config)
	c.UpgradeConfigurationUpgradeStrategy = NewUpgradeConfigurationUpgradeStrategyClient(c.config)
	c.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy = NewUpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeConfigurationUpgradeStrategyGrayStrategy = NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeConfigurationVersion = NewUpgradeConfigurationVersionClient(c.config)
	c.UpgradeDev = NewUpgradeDevClient(c.config)
	c.UpgradeDevGroup = NewUpgradeDevGroupClient(c.config)
	c.UpgradeDevGroupRelation = NewUpgradeDevGroupRelationClient(c.config)
	c.UpgradeDevModel = NewUpgradeDevModelClient(c.config)
	c.UpgradeElectron = NewUpgradeElectronClient(c.config)
	c.UpgradeElectronUpgradeStrategy = NewUpgradeElectronUpgradeStrategyClient(c.config)
	c.UpgradeElectronUpgradeStrategyFlowLimitStrategy = NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeElectronUpgradeStrategyGrayStrategy = NewUpgradeElectronUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeElectronVersion = NewUpgradeElectronVersionClient(c.config)
	c.UpgradeFile = NewUpgradeFileClient(c.config)
	c.UpgradeFileUpgradeStrategy = NewUpgradeFileUpgradeStrategyClient(c.config)
	c.UpgradeFileUpgradeStrategyFlowLimitStrategy = NewUpgradeFileUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeFileUpgradeStrategyGrayStrategy = NewUpgradeFileUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeFileVersion = NewUpgradeFileVersionClient(c.config)
	c.UpgradeTauri = NewUpgradeTauriClient(c.config)
	c.UpgradeTauriUpgradeStrategy = NewUpgradeTauriUpgradeStrategyClient(c.config)
	c.UpgradeTauriUpgradeStrategyFlowLimitStrategy = NewUpgradeTauriUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeTauriUpgradeStrategyGrayStrategy = NewUpgradeTauriUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeTauriVersion = NewUpgradeTauriVersionClient(c.config)
	c.UpgradeTrafficPacket = NewUpgradeTrafficPacketClient(c.config)
	c.UpgradeUrl = NewUpgradeUrlClient(c.config)
	c.UpgradeUrlUpgradeStrategy = NewUpgradeUrlUpgradeStrategyClient(c.config)
	c.UpgradeUrlUpgradeStrategyFlowLimitStrategy = NewUpgradeUrlUpgradeStrategyFlowLimitStrategyClient(c.config)
	c.UpgradeUrlUpgradeStrategyGrayStrategy = NewUpgradeUrlUpgradeStrategyGrayStrategyClient(c.config)
	c.UpgradeUrlVersion = NewUpgradeUrlVersionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		FmsCloudFile:              NewFmsCloudFileClient(cfg),
		SysUser:                   NewSysUserClient(cfg),
		UpgradeApk:                NewUpgradeApkClient(cfg),
		UpgradeApkUpgradeStrategy: NewUpgradeApkUpgradeStrategyClient(cfg),
		UpgradeApkUpgradeStrategyFlowLimitStrategy:           NewUpgradeApkUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeApkUpgradeStrategyGrayStrategy:                NewUpgradeApkUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeApkVersion:                                    NewUpgradeApkVersionClient(cfg),
		UpgradeAppDownloadReportLog:                          NewUpgradeAppDownloadReportLogClient(cfg),
		UpgradeCompanyIncome:                                 NewUpgradeCompanyIncomeClient(cfg),
		UpgradeCompanyTrafficPacket:                          NewUpgradeCompanyTrafficPacketClient(cfg),
		UpgradeConfiguration:                                 NewUpgradeConfigurationClient(cfg),
		UpgradeConfigurationUpgradeStrategy:                  NewUpgradeConfigurationUpgradeStrategyClient(cfg),
		UpgradeConfigurationUpgradeStrategyFlowLimitStrategy: NewUpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeConfigurationUpgradeStrategyGrayStrategy:      NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeConfigurationVersion:                          NewUpgradeConfigurationVersionClient(cfg),
		UpgradeDev:                                           NewUpgradeDevClient(cfg),
		UpgradeDevGroup:                                      NewUpgradeDevGroupClient(cfg),
		UpgradeDevGroupRelation:                              NewUpgradeDevGroupRelationClient(cfg),
		UpgradeDevModel:                                      NewUpgradeDevModelClient(cfg),
		UpgradeElectron:                                      NewUpgradeElectronClient(cfg),
		UpgradeElectronUpgradeStrategy:                       NewUpgradeElectronUpgradeStrategyClient(cfg),
		UpgradeElectronUpgradeStrategyFlowLimitStrategy:      NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeElectronUpgradeStrategyGrayStrategy:           NewUpgradeElectronUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeElectronVersion:                               NewUpgradeElectronVersionClient(cfg),
		UpgradeFile:                                          NewUpgradeFileClient(cfg),
		UpgradeFileUpgradeStrategy:                           NewUpgradeFileUpgradeStrategyClient(cfg),
		UpgradeFileUpgradeStrategyFlowLimitStrategy:          NewUpgradeFileUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeFileUpgradeStrategyGrayStrategy:               NewUpgradeFileUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeFileVersion:                                   NewUpgradeFileVersionClient(cfg),
		UpgradeTauri:                                         NewUpgradeTauriClient(cfg),
		UpgradeTauriUpgradeStrategy:                          NewUpgradeTauriUpgradeStrategyClient(cfg),
		UpgradeTauriUpgradeStrategyFlowLimitStrategy:         NewUpgradeTauriUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeTauriUpgradeStrategyGrayStrategy:              NewUpgradeTauriUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeTauriVersion:                                  NewUpgradeTauriVersionClient(cfg),
		UpgradeTrafficPacket:                                 NewUpgradeTrafficPacketClient(cfg),
		UpgradeUrl:                                           NewUpgradeUrlClient(cfg),
		UpgradeUrlUpgradeStrategy:                            NewUpgradeUrlUpgradeStrategyClient(cfg),
		UpgradeUrlUpgradeStrategyFlowLimitStrategy:           NewUpgradeUrlUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeUrlUpgradeStrategyGrayStrategy:                NewUpgradeUrlUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeUrlVersion:                                    NewUpgradeUrlVersionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		FmsCloudFile:              NewFmsCloudFileClient(cfg),
		SysUser:                   NewSysUserClient(cfg),
		UpgradeApk:                NewUpgradeApkClient(cfg),
		UpgradeApkUpgradeStrategy: NewUpgradeApkUpgradeStrategyClient(cfg),
		UpgradeApkUpgradeStrategyFlowLimitStrategy:           NewUpgradeApkUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeApkUpgradeStrategyGrayStrategy:                NewUpgradeApkUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeApkVersion:                                    NewUpgradeApkVersionClient(cfg),
		UpgradeAppDownloadReportLog:                          NewUpgradeAppDownloadReportLogClient(cfg),
		UpgradeCompanyIncome:                                 NewUpgradeCompanyIncomeClient(cfg),
		UpgradeCompanyTrafficPacket:                          NewUpgradeCompanyTrafficPacketClient(cfg),
		UpgradeConfiguration:                                 NewUpgradeConfigurationClient(cfg),
		UpgradeConfigurationUpgradeStrategy:                  NewUpgradeConfigurationUpgradeStrategyClient(cfg),
		UpgradeConfigurationUpgradeStrategyFlowLimitStrategy: NewUpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeConfigurationUpgradeStrategyGrayStrategy:      NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeConfigurationVersion:                          NewUpgradeConfigurationVersionClient(cfg),
		UpgradeDev:                                           NewUpgradeDevClient(cfg),
		UpgradeDevGroup:                                      NewUpgradeDevGroupClient(cfg),
		UpgradeDevGroupRelation:                              NewUpgradeDevGroupRelationClient(cfg),
		UpgradeDevModel:                                      NewUpgradeDevModelClient(cfg),
		UpgradeElectron:                                      NewUpgradeElectronClient(cfg),
		UpgradeElectronUpgradeStrategy:                       NewUpgradeElectronUpgradeStrategyClient(cfg),
		UpgradeElectronUpgradeStrategyFlowLimitStrategy:      NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeElectronUpgradeStrategyGrayStrategy:           NewUpgradeElectronUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeElectronVersion:                               NewUpgradeElectronVersionClient(cfg),
		UpgradeFile:                                          NewUpgradeFileClient(cfg),
		UpgradeFileUpgradeStrategy:                           NewUpgradeFileUpgradeStrategyClient(cfg),
		UpgradeFileUpgradeStrategyFlowLimitStrategy:          NewUpgradeFileUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeFileUpgradeStrategyGrayStrategy:               NewUpgradeFileUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeFileVersion:                                   NewUpgradeFileVersionClient(cfg),
		UpgradeTauri:                                         NewUpgradeTauriClient(cfg),
		UpgradeTauriUpgradeStrategy:                          NewUpgradeTauriUpgradeStrategyClient(cfg),
		UpgradeTauriUpgradeStrategyFlowLimitStrategy:         NewUpgradeTauriUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeTauriUpgradeStrategyGrayStrategy:              NewUpgradeTauriUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeTauriVersion:                                  NewUpgradeTauriVersionClient(cfg),
		UpgradeTrafficPacket:                                 NewUpgradeTrafficPacketClient(cfg),
		UpgradeUrl:                                           NewUpgradeUrlClient(cfg),
		UpgradeUrlUpgradeStrategy:                            NewUpgradeUrlUpgradeStrategyClient(cfg),
		UpgradeUrlUpgradeStrategyFlowLimitStrategy:           NewUpgradeUrlUpgradeStrategyFlowLimitStrategyClient(cfg),
		UpgradeUrlUpgradeStrategyGrayStrategy:                NewUpgradeUrlUpgradeStrategyGrayStrategyClient(cfg),
		UpgradeUrlVersion:                                    NewUpgradeUrlVersionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FmsCloudFile.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.FmsCloudFile, c.SysUser, c.UpgradeApk, c.UpgradeApkUpgradeStrategy,
		c.UpgradeApkUpgradeStrategyFlowLimitStrategy,
		c.UpgradeApkUpgradeStrategyGrayStrategy, c.UpgradeApkVersion,
		c.UpgradeAppDownloadReportLog, c.UpgradeCompanyIncome,
		c.UpgradeCompanyTrafficPacket, c.UpgradeConfiguration,
		c.UpgradeConfigurationUpgradeStrategy,
		c.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy,
		c.UpgradeConfigurationUpgradeStrategyGrayStrategy,
		c.UpgradeConfigurationVersion, c.UpgradeDev, c.UpgradeDevGroup,
		c.UpgradeDevGroupRelation, c.UpgradeDevModel, c.UpgradeElectron,
		c.UpgradeElectronUpgradeStrategy,
		c.UpgradeElectronUpgradeStrategyFlowLimitStrategy,
		c.UpgradeElectronUpgradeStrategyGrayStrategy, c.UpgradeElectronVersion,
		c.UpgradeFile, c.UpgradeFileUpgradeStrategy,
		c.UpgradeFileUpgradeStrategyFlowLimitStrategy,
		c.UpgradeFileUpgradeStrategyGrayStrategy, c.UpgradeFileVersion, c.UpgradeTauri,
		c.UpgradeTauriUpgradeStrategy, c.UpgradeTauriUpgradeStrategyFlowLimitStrategy,
		c.UpgradeTauriUpgradeStrategyGrayStrategy, c.UpgradeTauriVersion,
		c.UpgradeTrafficPacket, c.UpgradeUrl, c.UpgradeUrlUpgradeStrategy,
		c.UpgradeUrlUpgradeStrategyFlowLimitStrategy,
		c.UpgradeUrlUpgradeStrategyGrayStrategy, c.UpgradeUrlVersion,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.FmsCloudFile, c.SysUser, c.UpgradeApk, c.UpgradeApkUpgradeStrategy,
		c.UpgradeApkUpgradeStrategyFlowLimitStrategy,
		c.UpgradeApkUpgradeStrategyGrayStrategy, c.UpgradeApkVersion,
		c.UpgradeAppDownloadReportLog, c.UpgradeCompanyIncome,
		c.UpgradeCompanyTrafficPacket, c.UpgradeConfiguration,
		c.UpgradeConfigurationUpgradeStrategy,
		c.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy,
		c.UpgradeConfigurationUpgradeStrategyGrayStrategy,
		c.UpgradeConfigurationVersion, c.UpgradeDev, c.UpgradeDevGroup,
		c.UpgradeDevGroupRelation, c.UpgradeDevModel, c.UpgradeElectron,
		c.UpgradeElectronUpgradeStrategy,
		c.UpgradeElectronUpgradeStrategyFlowLimitStrategy,
		c.UpgradeElectronUpgradeStrategyGrayStrategy, c.UpgradeElectronVersion,
		c.UpgradeFile, c.UpgradeFileUpgradeStrategy,
		c.UpgradeFileUpgradeStrategyFlowLimitStrategy,
		c.UpgradeFileUpgradeStrategyGrayStrategy, c.UpgradeFileVersion, c.UpgradeTauri,
		c.UpgradeTauriUpgradeStrategy, c.UpgradeTauriUpgradeStrategyFlowLimitStrategy,
		c.UpgradeTauriUpgradeStrategyGrayStrategy, c.UpgradeTauriVersion,
		c.UpgradeTrafficPacket, c.UpgradeUrl, c.UpgradeUrlUpgradeStrategy,
		c.UpgradeUrlUpgradeStrategyFlowLimitStrategy,
		c.UpgradeUrlUpgradeStrategyGrayStrategy, c.UpgradeUrlVersion,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FmsCloudFileMutation:
		return c.FmsCloudFile.mutate(ctx, m)
	case *SysUserMutation:
		return c.SysUser.mutate(ctx, m)
	case *UpgradeApkMutation:
		return c.UpgradeApk.mutate(ctx, m)
	case *UpgradeApkUpgradeStrategyMutation:
		return c.UpgradeApkUpgradeStrategy.mutate(ctx, m)
	case *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeApkUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeApkUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeApkUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeApkVersionMutation:
		return c.UpgradeApkVersion.mutate(ctx, m)
	case *UpgradeAppDownloadReportLogMutation:
		return c.UpgradeAppDownloadReportLog.mutate(ctx, m)
	case *UpgradeCompanyIncomeMutation:
		return c.UpgradeCompanyIncome.mutate(ctx, m)
	case *UpgradeCompanyTrafficPacketMutation:
		return c.UpgradeCompanyTrafficPacket.mutate(ctx, m)
	case *UpgradeConfigurationMutation:
		return c.UpgradeConfiguration.mutate(ctx, m)
	case *UpgradeConfigurationUpgradeStrategyMutation:
		return c.UpgradeConfigurationUpgradeStrategy.mutate(ctx, m)
	case *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeConfigurationUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeConfigurationVersionMutation:
		return c.UpgradeConfigurationVersion.mutate(ctx, m)
	case *UpgradeDevMutation:
		return c.UpgradeDev.mutate(ctx, m)
	case *UpgradeDevGroupMutation:
		return c.UpgradeDevGroup.mutate(ctx, m)
	case *UpgradeDevGroupRelationMutation:
		return c.UpgradeDevGroupRelation.mutate(ctx, m)
	case *UpgradeDevModelMutation:
		return c.UpgradeDevModel.mutate(ctx, m)
	case *UpgradeElectronMutation:
		return c.UpgradeElectron.mutate(ctx, m)
	case *UpgradeElectronUpgradeStrategyMutation:
		return c.UpgradeElectronUpgradeStrategy.mutate(ctx, m)
	case *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeElectronUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeElectronUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeElectronUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeElectronVersionMutation:
		return c.UpgradeElectronVersion.mutate(ctx, m)
	case *UpgradeFileMutation:
		return c.UpgradeFile.mutate(ctx, m)
	case *UpgradeFileUpgradeStrategyMutation:
		return c.UpgradeFileUpgradeStrategy.mutate(ctx, m)
	case *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeFileUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeFileUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeFileUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeFileVersionMutation:
		return c.UpgradeFileVersion.mutate(ctx, m)
	case *UpgradeTauriMutation:
		return c.UpgradeTauri.mutate(ctx, m)
	case *UpgradeTauriUpgradeStrategyMutation:
		return c.UpgradeTauriUpgradeStrategy.mutate(ctx, m)
	case *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeTauriUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeTauriUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeTauriUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeTauriVersionMutation:
		return c.UpgradeTauriVersion.mutate(ctx, m)
	case *UpgradeTrafficPacketMutation:
		return c.UpgradeTrafficPacket.mutate(ctx, m)
	case *UpgradeUrlMutation:
		return c.UpgradeUrl.mutate(ctx, m)
	case *UpgradeUrlUpgradeStrategyMutation:
		return c.UpgradeUrlUpgradeStrategy.mutate(ctx, m)
	case *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation:
		return c.UpgradeUrlUpgradeStrategyFlowLimitStrategy.mutate(ctx, m)
	case *UpgradeUrlUpgradeStrategyGrayStrategyMutation:
		return c.UpgradeUrlUpgradeStrategyGrayStrategy.mutate(ctx, m)
	case *UpgradeUrlVersionMutation:
		return c.UpgradeUrlVersion.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FmsCloudFileClient is a client for the FmsCloudFile schema.
type FmsCloudFileClient struct {
	config
}

// NewFmsCloudFileClient returns a client for the FmsCloudFile from the given config.
func NewFmsCloudFileClient(c config) *FmsCloudFileClient {
	return &FmsCloudFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fmscloudfile.Hooks(f(g(h())))`.
func (c *FmsCloudFileClient) Use(hooks ...Hook) {
	c.hooks.FmsCloudFile = append(c.hooks.FmsCloudFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fmscloudfile.Intercept(f(g(h())))`.
func (c *FmsCloudFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.FmsCloudFile = append(c.inters.FmsCloudFile, interceptors...)
}

// Create returns a builder for creating a FmsCloudFile entity.
func (c *FmsCloudFileClient) Create() *FmsCloudFileCreate {
	mutation := newFmsCloudFileMutation(c.config, OpCreate)
	return &FmsCloudFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FmsCloudFile entities.
func (c *FmsCloudFileClient) CreateBulk(builders ...*FmsCloudFileCreate) *FmsCloudFileCreateBulk {
	return &FmsCloudFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FmsCloudFileClient) MapCreateBulk(slice any, setFunc func(*FmsCloudFileCreate, int)) *FmsCloudFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FmsCloudFileCreateBulk{err: fmt.Errorf("calling to FmsCloudFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FmsCloudFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FmsCloudFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FmsCloudFile.
func (c *FmsCloudFileClient) Update() *FmsCloudFileUpdate {
	mutation := newFmsCloudFileMutation(c.config, OpUpdate)
	return &FmsCloudFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FmsCloudFileClient) UpdateOne(fcf *FmsCloudFile) *FmsCloudFileUpdateOne {
	mutation := newFmsCloudFileMutation(c.config, OpUpdateOne, withFmsCloudFile(fcf))
	return &FmsCloudFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FmsCloudFileClient) UpdateOneID(id string) *FmsCloudFileUpdateOne {
	mutation := newFmsCloudFileMutation(c.config, OpUpdateOne, withFmsCloudFileID(id))
	return &FmsCloudFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FmsCloudFile.
func (c *FmsCloudFileClient) Delete() *FmsCloudFileDelete {
	mutation := newFmsCloudFileMutation(c.config, OpDelete)
	return &FmsCloudFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FmsCloudFileClient) DeleteOne(fcf *FmsCloudFile) *FmsCloudFileDeleteOne {
	return c.DeleteOneID(fcf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FmsCloudFileClient) DeleteOneID(id string) *FmsCloudFileDeleteOne {
	builder := c.Delete().Where(fmscloudfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FmsCloudFileDeleteOne{builder}
}

// Query returns a query builder for FmsCloudFile.
func (c *FmsCloudFileClient) Query() *FmsCloudFileQuery {
	return &FmsCloudFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFmsCloudFile},
		inters: c.Interceptors(),
	}
}

// Get returns a FmsCloudFile entity by its id.
func (c *FmsCloudFileClient) Get(ctx context.Context, id string) (*FmsCloudFile, error) {
	return c.Query().Where(fmscloudfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FmsCloudFileClient) GetX(ctx context.Context, id string) *FmsCloudFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FmsCloudFileClient) Hooks() []Hook {
	return c.hooks.FmsCloudFile
}

// Interceptors returns the client interceptors.
func (c *FmsCloudFileClient) Interceptors() []Interceptor {
	return c.inters.FmsCloudFile
}

func (c *FmsCloudFileClient) mutate(ctx context.Context, m *FmsCloudFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FmsCloudFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FmsCloudFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FmsCloudFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FmsCloudFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FmsCloudFile mutation op: %q", m.Op())
	}
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysuser.Intercept(f(g(h())))`.
func (c *SysUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysUser = append(c.inters.SysUser, interceptors...)
}

// Create returns a builder for creating a SysUser entity.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysUserClient) MapCreateBulk(slice any, setFunc func(*SysUserCreate, int)) *SysUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysUserCreateBulk{err: fmt.Errorf("calling to SysUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id string) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysUserClient) DeleteOneID(id string) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysUser},
		inters: c.Interceptors(),
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id string) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id string) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	return c.hooks.SysUser
}

// Interceptors returns the client interceptors.
func (c *SysUserClient) Interceptors() []Interceptor {
	return c.inters.SysUser
}

func (c *SysUserClient) mutate(ctx context.Context, m *SysUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysUser mutation op: %q", m.Op())
	}
}

// UpgradeApkClient is a client for the UpgradeApk schema.
type UpgradeApkClient struct {
	config
}

// NewUpgradeApkClient returns a client for the UpgradeApk from the given config.
func NewUpgradeApkClient(c config) *UpgradeApkClient {
	return &UpgradeApkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeapk.Hooks(f(g(h())))`.
func (c *UpgradeApkClient) Use(hooks ...Hook) {
	c.hooks.UpgradeApk = append(c.hooks.UpgradeApk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeapk.Intercept(f(g(h())))`.
func (c *UpgradeApkClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeApk = append(c.inters.UpgradeApk, interceptors...)
}

// Create returns a builder for creating a UpgradeApk entity.
func (c *UpgradeApkClient) Create() *UpgradeApkCreate {
	mutation := newUpgradeApkMutation(c.config, OpCreate)
	return &UpgradeApkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeApk entities.
func (c *UpgradeApkClient) CreateBulk(builders ...*UpgradeApkCreate) *UpgradeApkCreateBulk {
	return &UpgradeApkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeApkClient) MapCreateBulk(slice any, setFunc func(*UpgradeApkCreate, int)) *UpgradeApkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeApkCreateBulk{err: fmt.Errorf("calling to UpgradeApkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeApkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeApkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeApk.
func (c *UpgradeApkClient) Update() *UpgradeApkUpdate {
	mutation := newUpgradeApkMutation(c.config, OpUpdate)
	return &UpgradeApkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeApkClient) UpdateOne(ua *UpgradeApk) *UpgradeApkUpdateOne {
	mutation := newUpgradeApkMutation(c.config, OpUpdateOne, withUpgradeApk(ua))
	return &UpgradeApkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeApkClient) UpdateOneID(id int) *UpgradeApkUpdateOne {
	mutation := newUpgradeApkMutation(c.config, OpUpdateOne, withUpgradeApkID(id))
	return &UpgradeApkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeApk.
func (c *UpgradeApkClient) Delete() *UpgradeApkDelete {
	mutation := newUpgradeApkMutation(c.config, OpDelete)
	return &UpgradeApkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeApkClient) DeleteOne(ua *UpgradeApk) *UpgradeApkDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeApkClient) DeleteOneID(id int) *UpgradeApkDeleteOne {
	builder := c.Delete().Where(upgradeapk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeApkDeleteOne{builder}
}

// Query returns a query builder for UpgradeApk.
func (c *UpgradeApkClient) Query() *UpgradeApkQuery {
	return &UpgradeApkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeApk},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeApk entity by its id.
func (c *UpgradeApkClient) Get(ctx context.Context, id int) (*UpgradeApk, error) {
	return c.Query().Where(upgradeapk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeApkClient) GetX(ctx context.Context, id int) *UpgradeApk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeApkClient) Hooks() []Hook {
	return c.hooks.UpgradeApk
}

// Interceptors returns the client interceptors.
func (c *UpgradeApkClient) Interceptors() []Interceptor {
	return c.inters.UpgradeApk
}

func (c *UpgradeApkClient) mutate(ctx context.Context, m *UpgradeApkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeApkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeApkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeApkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeApkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeApk mutation op: %q", m.Op())
	}
}

// UpgradeApkUpgradeStrategyClient is a client for the UpgradeApkUpgradeStrategy schema.
type UpgradeApkUpgradeStrategyClient struct {
	config
}

// NewUpgradeApkUpgradeStrategyClient returns a client for the UpgradeApkUpgradeStrategy from the given config.
func NewUpgradeApkUpgradeStrategyClient(c config) *UpgradeApkUpgradeStrategyClient {
	return &UpgradeApkUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeapkupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeApkUpgradeStrategy = append(c.hooks.UpgradeApkUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeapkupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeApkUpgradeStrategy = append(c.inters.UpgradeApkUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeApkUpgradeStrategy entity.
func (c *UpgradeApkUpgradeStrategyClient) Create() *UpgradeApkUpgradeStrategyCreate {
	mutation := newUpgradeApkUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeApkUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeApkUpgradeStrategy entities.
func (c *UpgradeApkUpgradeStrategyClient) CreateBulk(builders ...*UpgradeApkUpgradeStrategyCreate) *UpgradeApkUpgradeStrategyCreateBulk {
	return &UpgradeApkUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeApkUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeApkUpgradeStrategyCreate, int)) *UpgradeApkUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeApkUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeApkUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeApkUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeApkUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeApkUpgradeStrategy.
func (c *UpgradeApkUpgradeStrategyClient) Update() *UpgradeApkUpgradeStrategyUpdate {
	mutation := newUpgradeApkUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeApkUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeApkUpgradeStrategyClient) UpdateOne(uaus *UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategy(uaus))
	return &UpgradeApkUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeApkUpgradeStrategyClient) UpdateOneID(id int) *UpgradeApkUpgradeStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategyID(id))
	return &UpgradeApkUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeApkUpgradeStrategy.
func (c *UpgradeApkUpgradeStrategyClient) Delete() *UpgradeApkUpgradeStrategyDelete {
	mutation := newUpgradeApkUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeApkUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeApkUpgradeStrategyClient) DeleteOne(uaus *UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyDeleteOne {
	return c.DeleteOneID(uaus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeApkUpgradeStrategyClient) DeleteOneID(id int) *UpgradeApkUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradeapkupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeApkUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeApkUpgradeStrategy.
func (c *UpgradeApkUpgradeStrategyClient) Query() *UpgradeApkUpgradeStrategyQuery {
	return &UpgradeApkUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeApkUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeApkUpgradeStrategy entity by its id.
func (c *UpgradeApkUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeApkUpgradeStrategy, error) {
	return c.Query().Where(upgradeapkupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeApkUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeApkUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeApkUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeApkUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeApkUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeApkUpgradeStrategy
}

func (c *UpgradeApkUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeApkUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeApkUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeApkUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeApkUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeApkUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeApkUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeApkUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeApkUpgradeStrategyFlowLimitStrategy schema.
type UpgradeApkUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeApkUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeApkUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeApkUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeApkUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeapkupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeApkUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeApkUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeapkupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeApkUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeApkUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeApkUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeApkUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeApkUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeApkUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeApkUpgradeStrategyFlowLimitStrategyCreate) *UpgradeApkUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeApkUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeApkUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeApkUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeApkUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeApkUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeApkUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeApkUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) UpdateOne(uausfls *UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategyFlowLimitStrategy(uausfls))
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeApkUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeApkUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) DeleteOne(uausfls *UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(uausfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradeapkupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeApkUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeApkUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeApkUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeApkUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeApkUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeApkUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradeapkupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeApkUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeApkUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeApkUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeApkUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeApkUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeApkUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeApkUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeApkUpgradeStrategyGrayStrategyClient is a client for the UpgradeApkUpgradeStrategyGrayStrategy schema.
type UpgradeApkUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeApkUpgradeStrategyGrayStrategyClient returns a client for the UpgradeApkUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeApkUpgradeStrategyGrayStrategyClient(c config) *UpgradeApkUpgradeStrategyGrayStrategyClient {
	return &UpgradeApkUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeapkupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeApkUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeApkUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeapkupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeApkUpgradeStrategyGrayStrategy = append(c.inters.UpgradeApkUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeApkUpgradeStrategyGrayStrategy entity.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Create() *UpgradeApkUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeApkUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeApkUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeApkUpgradeStrategyGrayStrategy entities.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeApkUpgradeStrategyGrayStrategyCreate) *UpgradeApkUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeApkUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeApkUpgradeStrategyGrayStrategyCreate, int)) *UpgradeApkUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeApkUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeApkUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeApkUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeApkUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeApkUpgradeStrategyGrayStrategy.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Update() *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeApkUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeApkUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) UpdateOne(uausgs *UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategyGrayStrategy(uausgs))
	return &UpgradeApkUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeApkUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeApkUpgradeStrategyGrayStrategyID(id))
	return &UpgradeApkUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeApkUpgradeStrategyGrayStrategy.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Delete() *UpgradeApkUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeApkUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeApkUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) DeleteOne(uausgs *UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(uausgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeApkUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradeapkupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeApkUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeApkUpgradeStrategyGrayStrategy.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Query() *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	return &UpgradeApkUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeApkUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeApkUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradeapkupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeApkUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeApkUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeApkUpgradeStrategyGrayStrategy
}

func (c *UpgradeApkUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeApkUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeApkUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeApkUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeApkUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeApkUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeApkUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeApkVersionClient is a client for the UpgradeApkVersion schema.
type UpgradeApkVersionClient struct {
	config
}

// NewUpgradeApkVersionClient returns a client for the UpgradeApkVersion from the given config.
func NewUpgradeApkVersionClient(c config) *UpgradeApkVersionClient {
	return &UpgradeApkVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeapkversion.Hooks(f(g(h())))`.
func (c *UpgradeApkVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeApkVersion = append(c.hooks.UpgradeApkVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeapkversion.Intercept(f(g(h())))`.
func (c *UpgradeApkVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeApkVersion = append(c.inters.UpgradeApkVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeApkVersion entity.
func (c *UpgradeApkVersionClient) Create() *UpgradeApkVersionCreate {
	mutation := newUpgradeApkVersionMutation(c.config, OpCreate)
	return &UpgradeApkVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeApkVersion entities.
func (c *UpgradeApkVersionClient) CreateBulk(builders ...*UpgradeApkVersionCreate) *UpgradeApkVersionCreateBulk {
	return &UpgradeApkVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeApkVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeApkVersionCreate, int)) *UpgradeApkVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeApkVersionCreateBulk{err: fmt.Errorf("calling to UpgradeApkVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeApkVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeApkVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeApkVersion.
func (c *UpgradeApkVersionClient) Update() *UpgradeApkVersionUpdate {
	mutation := newUpgradeApkVersionMutation(c.config, OpUpdate)
	return &UpgradeApkVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeApkVersionClient) UpdateOne(uav *UpgradeApkVersion) *UpgradeApkVersionUpdateOne {
	mutation := newUpgradeApkVersionMutation(c.config, OpUpdateOne, withUpgradeApkVersion(uav))
	return &UpgradeApkVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeApkVersionClient) UpdateOneID(id int) *UpgradeApkVersionUpdateOne {
	mutation := newUpgradeApkVersionMutation(c.config, OpUpdateOne, withUpgradeApkVersionID(id))
	return &UpgradeApkVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeApkVersion.
func (c *UpgradeApkVersionClient) Delete() *UpgradeApkVersionDelete {
	mutation := newUpgradeApkVersionMutation(c.config, OpDelete)
	return &UpgradeApkVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeApkVersionClient) DeleteOne(uav *UpgradeApkVersion) *UpgradeApkVersionDeleteOne {
	return c.DeleteOneID(uav.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeApkVersionClient) DeleteOneID(id int) *UpgradeApkVersionDeleteOne {
	builder := c.Delete().Where(upgradeapkversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeApkVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeApkVersion.
func (c *UpgradeApkVersionClient) Query() *UpgradeApkVersionQuery {
	return &UpgradeApkVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeApkVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeApkVersion entity by its id.
func (c *UpgradeApkVersionClient) Get(ctx context.Context, id int) (*UpgradeApkVersion, error) {
	return c.Query().Where(upgradeapkversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeApkVersionClient) GetX(ctx context.Context, id int) *UpgradeApkVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeApkVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeApkVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeApkVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeApkVersion
}

func (c *UpgradeApkVersionClient) mutate(ctx context.Context, m *UpgradeApkVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeApkVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeApkVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeApkVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeApkVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeApkVersion mutation op: %q", m.Op())
	}
}

// UpgradeAppDownloadReportLogClient is a client for the UpgradeAppDownloadReportLog schema.
type UpgradeAppDownloadReportLogClient struct {
	config
}

// NewUpgradeAppDownloadReportLogClient returns a client for the UpgradeAppDownloadReportLog from the given config.
func NewUpgradeAppDownloadReportLogClient(c config) *UpgradeAppDownloadReportLogClient {
	return &UpgradeAppDownloadReportLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeappdownloadreportlog.Hooks(f(g(h())))`.
func (c *UpgradeAppDownloadReportLogClient) Use(hooks ...Hook) {
	c.hooks.UpgradeAppDownloadReportLog = append(c.hooks.UpgradeAppDownloadReportLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeappdownloadreportlog.Intercept(f(g(h())))`.
func (c *UpgradeAppDownloadReportLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeAppDownloadReportLog = append(c.inters.UpgradeAppDownloadReportLog, interceptors...)
}

// Create returns a builder for creating a UpgradeAppDownloadReportLog entity.
func (c *UpgradeAppDownloadReportLogClient) Create() *UpgradeAppDownloadReportLogCreate {
	mutation := newUpgradeAppDownloadReportLogMutation(c.config, OpCreate)
	return &UpgradeAppDownloadReportLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeAppDownloadReportLog entities.
func (c *UpgradeAppDownloadReportLogClient) CreateBulk(builders ...*UpgradeAppDownloadReportLogCreate) *UpgradeAppDownloadReportLogCreateBulk {
	return &UpgradeAppDownloadReportLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeAppDownloadReportLogClient) MapCreateBulk(slice any, setFunc func(*UpgradeAppDownloadReportLogCreate, int)) *UpgradeAppDownloadReportLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeAppDownloadReportLogCreateBulk{err: fmt.Errorf("calling to UpgradeAppDownloadReportLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeAppDownloadReportLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeAppDownloadReportLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeAppDownloadReportLog.
func (c *UpgradeAppDownloadReportLogClient) Update() *UpgradeAppDownloadReportLogUpdate {
	mutation := newUpgradeAppDownloadReportLogMutation(c.config, OpUpdate)
	return &UpgradeAppDownloadReportLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeAppDownloadReportLogClient) UpdateOne(uadrl *UpgradeAppDownloadReportLog) *UpgradeAppDownloadReportLogUpdateOne {
	mutation := newUpgradeAppDownloadReportLogMutation(c.config, OpUpdateOne, withUpgradeAppDownloadReportLog(uadrl))
	return &UpgradeAppDownloadReportLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeAppDownloadReportLogClient) UpdateOneID(id int) *UpgradeAppDownloadReportLogUpdateOne {
	mutation := newUpgradeAppDownloadReportLogMutation(c.config, OpUpdateOne, withUpgradeAppDownloadReportLogID(id))
	return &UpgradeAppDownloadReportLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeAppDownloadReportLog.
func (c *UpgradeAppDownloadReportLogClient) Delete() *UpgradeAppDownloadReportLogDelete {
	mutation := newUpgradeAppDownloadReportLogMutation(c.config, OpDelete)
	return &UpgradeAppDownloadReportLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeAppDownloadReportLogClient) DeleteOne(uadrl *UpgradeAppDownloadReportLog) *UpgradeAppDownloadReportLogDeleteOne {
	return c.DeleteOneID(uadrl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeAppDownloadReportLogClient) DeleteOneID(id int) *UpgradeAppDownloadReportLogDeleteOne {
	builder := c.Delete().Where(upgradeappdownloadreportlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeAppDownloadReportLogDeleteOne{builder}
}

// Query returns a query builder for UpgradeAppDownloadReportLog.
func (c *UpgradeAppDownloadReportLogClient) Query() *UpgradeAppDownloadReportLogQuery {
	return &UpgradeAppDownloadReportLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeAppDownloadReportLog},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeAppDownloadReportLog entity by its id.
func (c *UpgradeAppDownloadReportLogClient) Get(ctx context.Context, id int) (*UpgradeAppDownloadReportLog, error) {
	return c.Query().Where(upgradeappdownloadreportlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeAppDownloadReportLogClient) GetX(ctx context.Context, id int) *UpgradeAppDownloadReportLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeAppDownloadReportLogClient) Hooks() []Hook {
	return c.hooks.UpgradeAppDownloadReportLog
}

// Interceptors returns the client interceptors.
func (c *UpgradeAppDownloadReportLogClient) Interceptors() []Interceptor {
	return c.inters.UpgradeAppDownloadReportLog
}

func (c *UpgradeAppDownloadReportLogClient) mutate(ctx context.Context, m *UpgradeAppDownloadReportLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeAppDownloadReportLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeAppDownloadReportLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeAppDownloadReportLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeAppDownloadReportLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeAppDownloadReportLog mutation op: %q", m.Op())
	}
}

// UpgradeCompanyIncomeClient is a client for the UpgradeCompanyIncome schema.
type UpgradeCompanyIncomeClient struct {
	config
}

// NewUpgradeCompanyIncomeClient returns a client for the UpgradeCompanyIncome from the given config.
func NewUpgradeCompanyIncomeClient(c config) *UpgradeCompanyIncomeClient {
	return &UpgradeCompanyIncomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradecompanyincome.Hooks(f(g(h())))`.
func (c *UpgradeCompanyIncomeClient) Use(hooks ...Hook) {
	c.hooks.UpgradeCompanyIncome = append(c.hooks.UpgradeCompanyIncome, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradecompanyincome.Intercept(f(g(h())))`.
func (c *UpgradeCompanyIncomeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeCompanyIncome = append(c.inters.UpgradeCompanyIncome, interceptors...)
}

// Create returns a builder for creating a UpgradeCompanyIncome entity.
func (c *UpgradeCompanyIncomeClient) Create() *UpgradeCompanyIncomeCreate {
	mutation := newUpgradeCompanyIncomeMutation(c.config, OpCreate)
	return &UpgradeCompanyIncomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeCompanyIncome entities.
func (c *UpgradeCompanyIncomeClient) CreateBulk(builders ...*UpgradeCompanyIncomeCreate) *UpgradeCompanyIncomeCreateBulk {
	return &UpgradeCompanyIncomeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeCompanyIncomeClient) MapCreateBulk(slice any, setFunc func(*UpgradeCompanyIncomeCreate, int)) *UpgradeCompanyIncomeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeCompanyIncomeCreateBulk{err: fmt.Errorf("calling to UpgradeCompanyIncomeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeCompanyIncomeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeCompanyIncomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeCompanyIncome.
func (c *UpgradeCompanyIncomeClient) Update() *UpgradeCompanyIncomeUpdate {
	mutation := newUpgradeCompanyIncomeMutation(c.config, OpUpdate)
	return &UpgradeCompanyIncomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeCompanyIncomeClient) UpdateOne(uci *UpgradeCompanyIncome) *UpgradeCompanyIncomeUpdateOne {
	mutation := newUpgradeCompanyIncomeMutation(c.config, OpUpdateOne, withUpgradeCompanyIncome(uci))
	return &UpgradeCompanyIncomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeCompanyIncomeClient) UpdateOneID(id int) *UpgradeCompanyIncomeUpdateOne {
	mutation := newUpgradeCompanyIncomeMutation(c.config, OpUpdateOne, withUpgradeCompanyIncomeID(id))
	return &UpgradeCompanyIncomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeCompanyIncome.
func (c *UpgradeCompanyIncomeClient) Delete() *UpgradeCompanyIncomeDelete {
	mutation := newUpgradeCompanyIncomeMutation(c.config, OpDelete)
	return &UpgradeCompanyIncomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeCompanyIncomeClient) DeleteOne(uci *UpgradeCompanyIncome) *UpgradeCompanyIncomeDeleteOne {
	return c.DeleteOneID(uci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeCompanyIncomeClient) DeleteOneID(id int) *UpgradeCompanyIncomeDeleteOne {
	builder := c.Delete().Where(upgradecompanyincome.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeCompanyIncomeDeleteOne{builder}
}

// Query returns a query builder for UpgradeCompanyIncome.
func (c *UpgradeCompanyIncomeClient) Query() *UpgradeCompanyIncomeQuery {
	return &UpgradeCompanyIncomeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeCompanyIncome},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeCompanyIncome entity by its id.
func (c *UpgradeCompanyIncomeClient) Get(ctx context.Context, id int) (*UpgradeCompanyIncome, error) {
	return c.Query().Where(upgradecompanyincome.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeCompanyIncomeClient) GetX(ctx context.Context, id int) *UpgradeCompanyIncome {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeCompanyIncomeClient) Hooks() []Hook {
	return c.hooks.UpgradeCompanyIncome
}

// Interceptors returns the client interceptors.
func (c *UpgradeCompanyIncomeClient) Interceptors() []Interceptor {
	return c.inters.UpgradeCompanyIncome
}

func (c *UpgradeCompanyIncomeClient) mutate(ctx context.Context, m *UpgradeCompanyIncomeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeCompanyIncomeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeCompanyIncomeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeCompanyIncomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeCompanyIncomeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeCompanyIncome mutation op: %q", m.Op())
	}
}

// UpgradeCompanyTrafficPacketClient is a client for the UpgradeCompanyTrafficPacket schema.
type UpgradeCompanyTrafficPacketClient struct {
	config
}

// NewUpgradeCompanyTrafficPacketClient returns a client for the UpgradeCompanyTrafficPacket from the given config.
func NewUpgradeCompanyTrafficPacketClient(c config) *UpgradeCompanyTrafficPacketClient {
	return &UpgradeCompanyTrafficPacketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradecompanytrafficpacket.Hooks(f(g(h())))`.
func (c *UpgradeCompanyTrafficPacketClient) Use(hooks ...Hook) {
	c.hooks.UpgradeCompanyTrafficPacket = append(c.hooks.UpgradeCompanyTrafficPacket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradecompanytrafficpacket.Intercept(f(g(h())))`.
func (c *UpgradeCompanyTrafficPacketClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeCompanyTrafficPacket = append(c.inters.UpgradeCompanyTrafficPacket, interceptors...)
}

// Create returns a builder for creating a UpgradeCompanyTrafficPacket entity.
func (c *UpgradeCompanyTrafficPacketClient) Create() *UpgradeCompanyTrafficPacketCreate {
	mutation := newUpgradeCompanyTrafficPacketMutation(c.config, OpCreate)
	return &UpgradeCompanyTrafficPacketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeCompanyTrafficPacket entities.
func (c *UpgradeCompanyTrafficPacketClient) CreateBulk(builders ...*UpgradeCompanyTrafficPacketCreate) *UpgradeCompanyTrafficPacketCreateBulk {
	return &UpgradeCompanyTrafficPacketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeCompanyTrafficPacketClient) MapCreateBulk(slice any, setFunc func(*UpgradeCompanyTrafficPacketCreate, int)) *UpgradeCompanyTrafficPacketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeCompanyTrafficPacketCreateBulk{err: fmt.Errorf("calling to UpgradeCompanyTrafficPacketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeCompanyTrafficPacketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeCompanyTrafficPacketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeCompanyTrafficPacket.
func (c *UpgradeCompanyTrafficPacketClient) Update() *UpgradeCompanyTrafficPacketUpdate {
	mutation := newUpgradeCompanyTrafficPacketMutation(c.config, OpUpdate)
	return &UpgradeCompanyTrafficPacketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeCompanyTrafficPacketClient) UpdateOne(uctp *UpgradeCompanyTrafficPacket) *UpgradeCompanyTrafficPacketUpdateOne {
	mutation := newUpgradeCompanyTrafficPacketMutation(c.config, OpUpdateOne, withUpgradeCompanyTrafficPacket(uctp))
	return &UpgradeCompanyTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeCompanyTrafficPacketClient) UpdateOneID(id uint64) *UpgradeCompanyTrafficPacketUpdateOne {
	mutation := newUpgradeCompanyTrafficPacketMutation(c.config, OpUpdateOne, withUpgradeCompanyTrafficPacketID(id))
	return &UpgradeCompanyTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeCompanyTrafficPacket.
func (c *UpgradeCompanyTrafficPacketClient) Delete() *UpgradeCompanyTrafficPacketDelete {
	mutation := newUpgradeCompanyTrafficPacketMutation(c.config, OpDelete)
	return &UpgradeCompanyTrafficPacketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeCompanyTrafficPacketClient) DeleteOne(uctp *UpgradeCompanyTrafficPacket) *UpgradeCompanyTrafficPacketDeleteOne {
	return c.DeleteOneID(uctp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeCompanyTrafficPacketClient) DeleteOneID(id uint64) *UpgradeCompanyTrafficPacketDeleteOne {
	builder := c.Delete().Where(upgradecompanytrafficpacket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeCompanyTrafficPacketDeleteOne{builder}
}

// Query returns a query builder for UpgradeCompanyTrafficPacket.
func (c *UpgradeCompanyTrafficPacketClient) Query() *UpgradeCompanyTrafficPacketQuery {
	return &UpgradeCompanyTrafficPacketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeCompanyTrafficPacket},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeCompanyTrafficPacket entity by its id.
func (c *UpgradeCompanyTrafficPacketClient) Get(ctx context.Context, id uint64) (*UpgradeCompanyTrafficPacket, error) {
	return c.Query().Where(upgradecompanytrafficpacket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeCompanyTrafficPacketClient) GetX(ctx context.Context, id uint64) *UpgradeCompanyTrafficPacket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeCompanyTrafficPacketClient) Hooks() []Hook {
	return c.hooks.UpgradeCompanyTrafficPacket
}

// Interceptors returns the client interceptors.
func (c *UpgradeCompanyTrafficPacketClient) Interceptors() []Interceptor {
	return c.inters.UpgradeCompanyTrafficPacket
}

func (c *UpgradeCompanyTrafficPacketClient) mutate(ctx context.Context, m *UpgradeCompanyTrafficPacketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeCompanyTrafficPacketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeCompanyTrafficPacketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeCompanyTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeCompanyTrafficPacketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeCompanyTrafficPacket mutation op: %q", m.Op())
	}
}

// UpgradeConfigurationClient is a client for the UpgradeConfiguration schema.
type UpgradeConfigurationClient struct {
	config
}

// NewUpgradeConfigurationClient returns a client for the UpgradeConfiguration from the given config.
func NewUpgradeConfigurationClient(c config) *UpgradeConfigurationClient {
	return &UpgradeConfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeconfiguration.Hooks(f(g(h())))`.
func (c *UpgradeConfigurationClient) Use(hooks ...Hook) {
	c.hooks.UpgradeConfiguration = append(c.hooks.UpgradeConfiguration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeconfiguration.Intercept(f(g(h())))`.
func (c *UpgradeConfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeConfiguration = append(c.inters.UpgradeConfiguration, interceptors...)
}

// Create returns a builder for creating a UpgradeConfiguration entity.
func (c *UpgradeConfigurationClient) Create() *UpgradeConfigurationCreate {
	mutation := newUpgradeConfigurationMutation(c.config, OpCreate)
	return &UpgradeConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeConfiguration entities.
func (c *UpgradeConfigurationClient) CreateBulk(builders ...*UpgradeConfigurationCreate) *UpgradeConfigurationCreateBulk {
	return &UpgradeConfigurationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeConfigurationClient) MapCreateBulk(slice any, setFunc func(*UpgradeConfigurationCreate, int)) *UpgradeConfigurationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeConfigurationCreateBulk{err: fmt.Errorf("calling to UpgradeConfigurationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeConfigurationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeConfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeConfiguration.
func (c *UpgradeConfigurationClient) Update() *UpgradeConfigurationUpdate {
	mutation := newUpgradeConfigurationMutation(c.config, OpUpdate)
	return &UpgradeConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeConfigurationClient) UpdateOne(uc *UpgradeConfiguration) *UpgradeConfigurationUpdateOne {
	mutation := newUpgradeConfigurationMutation(c.config, OpUpdateOne, withUpgradeConfiguration(uc))
	return &UpgradeConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeConfigurationClient) UpdateOneID(id int) *UpgradeConfigurationUpdateOne {
	mutation := newUpgradeConfigurationMutation(c.config, OpUpdateOne, withUpgradeConfigurationID(id))
	return &UpgradeConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeConfiguration.
func (c *UpgradeConfigurationClient) Delete() *UpgradeConfigurationDelete {
	mutation := newUpgradeConfigurationMutation(c.config, OpDelete)
	return &UpgradeConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeConfigurationClient) DeleteOne(uc *UpgradeConfiguration) *UpgradeConfigurationDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeConfigurationClient) DeleteOneID(id int) *UpgradeConfigurationDeleteOne {
	builder := c.Delete().Where(upgradeconfiguration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeConfigurationDeleteOne{builder}
}

// Query returns a query builder for UpgradeConfiguration.
func (c *UpgradeConfigurationClient) Query() *UpgradeConfigurationQuery {
	return &UpgradeConfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeConfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeConfiguration entity by its id.
func (c *UpgradeConfigurationClient) Get(ctx context.Context, id int) (*UpgradeConfiguration, error) {
	return c.Query().Where(upgradeconfiguration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeConfigurationClient) GetX(ctx context.Context, id int) *UpgradeConfiguration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeConfigurationClient) Hooks() []Hook {
	return c.hooks.UpgradeConfiguration
}

// Interceptors returns the client interceptors.
func (c *UpgradeConfigurationClient) Interceptors() []Interceptor {
	return c.inters.UpgradeConfiguration
}

func (c *UpgradeConfigurationClient) mutate(ctx context.Context, m *UpgradeConfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeConfiguration mutation op: %q", m.Op())
	}
}

// UpgradeConfigurationUpgradeStrategyClient is a client for the UpgradeConfigurationUpgradeStrategy schema.
type UpgradeConfigurationUpgradeStrategyClient struct {
	config
}

// NewUpgradeConfigurationUpgradeStrategyClient returns a client for the UpgradeConfigurationUpgradeStrategy from the given config.
func NewUpgradeConfigurationUpgradeStrategyClient(c config) *UpgradeConfigurationUpgradeStrategyClient {
	return &UpgradeConfigurationUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeconfigurationupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeConfigurationUpgradeStrategy = append(c.hooks.UpgradeConfigurationUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeconfigurationupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeConfigurationUpgradeStrategy = append(c.inters.UpgradeConfigurationUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeConfigurationUpgradeStrategy entity.
func (c *UpgradeConfigurationUpgradeStrategyClient) Create() *UpgradeConfigurationUpgradeStrategyCreate {
	mutation := newUpgradeConfigurationUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeConfigurationUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeConfigurationUpgradeStrategy entities.
func (c *UpgradeConfigurationUpgradeStrategyClient) CreateBulk(builders ...*UpgradeConfigurationUpgradeStrategyCreate) *UpgradeConfigurationUpgradeStrategyCreateBulk {
	return &UpgradeConfigurationUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeConfigurationUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeConfigurationUpgradeStrategyCreate, int)) *UpgradeConfigurationUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeConfigurationUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeConfigurationUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeConfigurationUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeConfigurationUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeConfigurationUpgradeStrategy.
func (c *UpgradeConfigurationUpgradeStrategyClient) Update() *UpgradeConfigurationUpgradeStrategyUpdate {
	mutation := newUpgradeConfigurationUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeConfigurationUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeConfigurationUpgradeStrategyClient) UpdateOne(ucus *UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategy(ucus))
	return &UpgradeConfigurationUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeConfigurationUpgradeStrategyClient) UpdateOneID(id int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategyID(id))
	return &UpgradeConfigurationUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeConfigurationUpgradeStrategy.
func (c *UpgradeConfigurationUpgradeStrategyClient) Delete() *UpgradeConfigurationUpgradeStrategyDelete {
	mutation := newUpgradeConfigurationUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeConfigurationUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeConfigurationUpgradeStrategyClient) DeleteOne(ucus *UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyDeleteOne {
	return c.DeleteOneID(ucus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyClient) DeleteOneID(id int) *UpgradeConfigurationUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradeconfigurationupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeConfigurationUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeConfigurationUpgradeStrategy.
func (c *UpgradeConfigurationUpgradeStrategyClient) Query() *UpgradeConfigurationUpgradeStrategyQuery {
	return &UpgradeConfigurationUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeConfigurationUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeConfigurationUpgradeStrategy entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeConfigurationUpgradeStrategy, error) {
	return c.Query().Where(upgradeconfigurationupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeConfigurationUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeConfigurationUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeConfigurationUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeConfigurationUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeConfigurationUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeConfigurationUpgradeStrategy
}

func (c *UpgradeConfigurationUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeConfigurationUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeConfigurationUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeConfigurationUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeConfigurationUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeConfigurationUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeConfigurationUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeConfigurationUpgradeStrategyFlowLimitStrategy schema.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeConfigurationUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeconfigurationupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeconfigurationupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) UpdateOne(ucusfls *UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategyFlowLimitStrategy(ucusfls))
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) DeleteOne(ucusfls *UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(ucusfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradeconfigurationupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeConfigurationUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradeconfigurationupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeConfigurationUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeConfigurationUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeConfigurationUpgradeStrategyGrayStrategyClient is a client for the UpgradeConfigurationUpgradeStrategyGrayStrategy schema.
type UpgradeConfigurationUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient returns a client for the UpgradeConfigurationUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient(c config) *UpgradeConfigurationUpgradeStrategyGrayStrategyClient {
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeconfigurationupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeConfigurationUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeConfigurationUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeconfigurationupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeConfigurationUpgradeStrategyGrayStrategy = append(c.inters.UpgradeConfigurationUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeConfigurationUpgradeStrategyGrayStrategy entity.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Create() *UpgradeConfigurationUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeConfigurationUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeConfigurationUpgradeStrategyGrayStrategy entities.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeConfigurationUpgradeStrategyGrayStrategyCreate) *UpgradeConfigurationUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeConfigurationUpgradeStrategyGrayStrategyCreate, int)) *UpgradeConfigurationUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeConfigurationUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeConfigurationUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeConfigurationUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeConfigurationUpgradeStrategyGrayStrategy.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Update() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeConfigurationUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) UpdateOne(ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategyGrayStrategy(ucusgs))
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeConfigurationUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeConfigurationUpgradeStrategyGrayStrategyID(id))
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeConfigurationUpgradeStrategyGrayStrategy.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Delete() *UpgradeConfigurationUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeConfigurationUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) DeleteOne(ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) *UpgradeConfigurationUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(ucusgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeConfigurationUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradeconfigurationupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeConfigurationUpgradeStrategyGrayStrategy.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Query() *UpgradeConfigurationUpgradeStrategyGrayStrategyQuery {
	return &UpgradeConfigurationUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeConfigurationUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeConfigurationUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeConfigurationUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradeconfigurationupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeConfigurationUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeConfigurationUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeConfigurationUpgradeStrategyGrayStrategy
}

func (c *UpgradeConfigurationUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeConfigurationUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeConfigurationUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeConfigurationUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeConfigurationUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeConfigurationUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeConfigurationVersionClient is a client for the UpgradeConfigurationVersion schema.
type UpgradeConfigurationVersionClient struct {
	config
}

// NewUpgradeConfigurationVersionClient returns a client for the UpgradeConfigurationVersion from the given config.
func NewUpgradeConfigurationVersionClient(c config) *UpgradeConfigurationVersionClient {
	return &UpgradeConfigurationVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeconfigurationversion.Hooks(f(g(h())))`.
func (c *UpgradeConfigurationVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeConfigurationVersion = append(c.hooks.UpgradeConfigurationVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeconfigurationversion.Intercept(f(g(h())))`.
func (c *UpgradeConfigurationVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeConfigurationVersion = append(c.inters.UpgradeConfigurationVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeConfigurationVersion entity.
func (c *UpgradeConfigurationVersionClient) Create() *UpgradeConfigurationVersionCreate {
	mutation := newUpgradeConfigurationVersionMutation(c.config, OpCreate)
	return &UpgradeConfigurationVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeConfigurationVersion entities.
func (c *UpgradeConfigurationVersionClient) CreateBulk(builders ...*UpgradeConfigurationVersionCreate) *UpgradeConfigurationVersionCreateBulk {
	return &UpgradeConfigurationVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeConfigurationVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeConfigurationVersionCreate, int)) *UpgradeConfigurationVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeConfigurationVersionCreateBulk{err: fmt.Errorf("calling to UpgradeConfigurationVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeConfigurationVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeConfigurationVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeConfigurationVersion.
func (c *UpgradeConfigurationVersionClient) Update() *UpgradeConfigurationVersionUpdate {
	mutation := newUpgradeConfigurationVersionMutation(c.config, OpUpdate)
	return &UpgradeConfigurationVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeConfigurationVersionClient) UpdateOne(ucv *UpgradeConfigurationVersion) *UpgradeConfigurationVersionUpdateOne {
	mutation := newUpgradeConfigurationVersionMutation(c.config, OpUpdateOne, withUpgradeConfigurationVersion(ucv))
	return &UpgradeConfigurationVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeConfigurationVersionClient) UpdateOneID(id int) *UpgradeConfigurationVersionUpdateOne {
	mutation := newUpgradeConfigurationVersionMutation(c.config, OpUpdateOne, withUpgradeConfigurationVersionID(id))
	return &UpgradeConfigurationVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeConfigurationVersion.
func (c *UpgradeConfigurationVersionClient) Delete() *UpgradeConfigurationVersionDelete {
	mutation := newUpgradeConfigurationVersionMutation(c.config, OpDelete)
	return &UpgradeConfigurationVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeConfigurationVersionClient) DeleteOne(ucv *UpgradeConfigurationVersion) *UpgradeConfigurationVersionDeleteOne {
	return c.DeleteOneID(ucv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeConfigurationVersionClient) DeleteOneID(id int) *UpgradeConfigurationVersionDeleteOne {
	builder := c.Delete().Where(upgradeconfigurationversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeConfigurationVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeConfigurationVersion.
func (c *UpgradeConfigurationVersionClient) Query() *UpgradeConfigurationVersionQuery {
	return &UpgradeConfigurationVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeConfigurationVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeConfigurationVersion entity by its id.
func (c *UpgradeConfigurationVersionClient) Get(ctx context.Context, id int) (*UpgradeConfigurationVersion, error) {
	return c.Query().Where(upgradeconfigurationversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeConfigurationVersionClient) GetX(ctx context.Context, id int) *UpgradeConfigurationVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeConfigurationVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeConfigurationVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeConfigurationVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeConfigurationVersion
}

func (c *UpgradeConfigurationVersionClient) mutate(ctx context.Context, m *UpgradeConfigurationVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeConfigurationVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeConfigurationVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeConfigurationVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeConfigurationVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeConfigurationVersion mutation op: %q", m.Op())
	}
}

// UpgradeDevClient is a client for the UpgradeDev schema.
type UpgradeDevClient struct {
	config
}

// NewUpgradeDevClient returns a client for the UpgradeDev from the given config.
func NewUpgradeDevClient(c config) *UpgradeDevClient {
	return &UpgradeDevClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradedev.Hooks(f(g(h())))`.
func (c *UpgradeDevClient) Use(hooks ...Hook) {
	c.hooks.UpgradeDev = append(c.hooks.UpgradeDev, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradedev.Intercept(f(g(h())))`.
func (c *UpgradeDevClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeDev = append(c.inters.UpgradeDev, interceptors...)
}

// Create returns a builder for creating a UpgradeDev entity.
func (c *UpgradeDevClient) Create() *UpgradeDevCreate {
	mutation := newUpgradeDevMutation(c.config, OpCreate)
	return &UpgradeDevCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeDev entities.
func (c *UpgradeDevClient) CreateBulk(builders ...*UpgradeDevCreate) *UpgradeDevCreateBulk {
	return &UpgradeDevCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeDevClient) MapCreateBulk(slice any, setFunc func(*UpgradeDevCreate, int)) *UpgradeDevCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeDevCreateBulk{err: fmt.Errorf("calling to UpgradeDevClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeDevCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeDevCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeDev.
func (c *UpgradeDevClient) Update() *UpgradeDevUpdate {
	mutation := newUpgradeDevMutation(c.config, OpUpdate)
	return &UpgradeDevUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeDevClient) UpdateOne(ud *UpgradeDev) *UpgradeDevUpdateOne {
	mutation := newUpgradeDevMutation(c.config, OpUpdateOne, withUpgradeDev(ud))
	return &UpgradeDevUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeDevClient) UpdateOneID(id int) *UpgradeDevUpdateOne {
	mutation := newUpgradeDevMutation(c.config, OpUpdateOne, withUpgradeDevID(id))
	return &UpgradeDevUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeDev.
func (c *UpgradeDevClient) Delete() *UpgradeDevDelete {
	mutation := newUpgradeDevMutation(c.config, OpDelete)
	return &UpgradeDevDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeDevClient) DeleteOne(ud *UpgradeDev) *UpgradeDevDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeDevClient) DeleteOneID(id int) *UpgradeDevDeleteOne {
	builder := c.Delete().Where(upgradedev.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeDevDeleteOne{builder}
}

// Query returns a query builder for UpgradeDev.
func (c *UpgradeDevClient) Query() *UpgradeDevQuery {
	return &UpgradeDevQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeDev},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeDev entity by its id.
func (c *UpgradeDevClient) Get(ctx context.Context, id int) (*UpgradeDev, error) {
	return c.Query().Where(upgradedev.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeDevClient) GetX(ctx context.Context, id int) *UpgradeDev {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeDevClient) Hooks() []Hook {
	return c.hooks.UpgradeDev
}

// Interceptors returns the client interceptors.
func (c *UpgradeDevClient) Interceptors() []Interceptor {
	return c.inters.UpgradeDev
}

func (c *UpgradeDevClient) mutate(ctx context.Context, m *UpgradeDevMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeDevCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeDevUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeDevUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeDevDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeDev mutation op: %q", m.Op())
	}
}

// UpgradeDevGroupClient is a client for the UpgradeDevGroup schema.
type UpgradeDevGroupClient struct {
	config
}

// NewUpgradeDevGroupClient returns a client for the UpgradeDevGroup from the given config.
func NewUpgradeDevGroupClient(c config) *UpgradeDevGroupClient {
	return &UpgradeDevGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradedevgroup.Hooks(f(g(h())))`.
func (c *UpgradeDevGroupClient) Use(hooks ...Hook) {
	c.hooks.UpgradeDevGroup = append(c.hooks.UpgradeDevGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradedevgroup.Intercept(f(g(h())))`.
func (c *UpgradeDevGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeDevGroup = append(c.inters.UpgradeDevGroup, interceptors...)
}

// Create returns a builder for creating a UpgradeDevGroup entity.
func (c *UpgradeDevGroupClient) Create() *UpgradeDevGroupCreate {
	mutation := newUpgradeDevGroupMutation(c.config, OpCreate)
	return &UpgradeDevGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeDevGroup entities.
func (c *UpgradeDevGroupClient) CreateBulk(builders ...*UpgradeDevGroupCreate) *UpgradeDevGroupCreateBulk {
	return &UpgradeDevGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeDevGroupClient) MapCreateBulk(slice any, setFunc func(*UpgradeDevGroupCreate, int)) *UpgradeDevGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeDevGroupCreateBulk{err: fmt.Errorf("calling to UpgradeDevGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeDevGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeDevGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeDevGroup.
func (c *UpgradeDevGroupClient) Update() *UpgradeDevGroupUpdate {
	mutation := newUpgradeDevGroupMutation(c.config, OpUpdate)
	return &UpgradeDevGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeDevGroupClient) UpdateOne(udg *UpgradeDevGroup) *UpgradeDevGroupUpdateOne {
	mutation := newUpgradeDevGroupMutation(c.config, OpUpdateOne, withUpgradeDevGroup(udg))
	return &UpgradeDevGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeDevGroupClient) UpdateOneID(id int) *UpgradeDevGroupUpdateOne {
	mutation := newUpgradeDevGroupMutation(c.config, OpUpdateOne, withUpgradeDevGroupID(id))
	return &UpgradeDevGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeDevGroup.
func (c *UpgradeDevGroupClient) Delete() *UpgradeDevGroupDelete {
	mutation := newUpgradeDevGroupMutation(c.config, OpDelete)
	return &UpgradeDevGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeDevGroupClient) DeleteOne(udg *UpgradeDevGroup) *UpgradeDevGroupDeleteOne {
	return c.DeleteOneID(udg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeDevGroupClient) DeleteOneID(id int) *UpgradeDevGroupDeleteOne {
	builder := c.Delete().Where(upgradedevgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeDevGroupDeleteOne{builder}
}

// Query returns a query builder for UpgradeDevGroup.
func (c *UpgradeDevGroupClient) Query() *UpgradeDevGroupQuery {
	return &UpgradeDevGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeDevGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeDevGroup entity by its id.
func (c *UpgradeDevGroupClient) Get(ctx context.Context, id int) (*UpgradeDevGroup, error) {
	return c.Query().Where(upgradedevgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeDevGroupClient) GetX(ctx context.Context, id int) *UpgradeDevGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeDevGroupClient) Hooks() []Hook {
	return c.hooks.UpgradeDevGroup
}

// Interceptors returns the client interceptors.
func (c *UpgradeDevGroupClient) Interceptors() []Interceptor {
	return c.inters.UpgradeDevGroup
}

func (c *UpgradeDevGroupClient) mutate(ctx context.Context, m *UpgradeDevGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeDevGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeDevGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeDevGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeDevGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeDevGroup mutation op: %q", m.Op())
	}
}

// UpgradeDevGroupRelationClient is a client for the UpgradeDevGroupRelation schema.
type UpgradeDevGroupRelationClient struct {
	config
}

// NewUpgradeDevGroupRelationClient returns a client for the UpgradeDevGroupRelation from the given config.
func NewUpgradeDevGroupRelationClient(c config) *UpgradeDevGroupRelationClient {
	return &UpgradeDevGroupRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradedevgrouprelation.Hooks(f(g(h())))`.
func (c *UpgradeDevGroupRelationClient) Use(hooks ...Hook) {
	c.hooks.UpgradeDevGroupRelation = append(c.hooks.UpgradeDevGroupRelation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradedevgrouprelation.Intercept(f(g(h())))`.
func (c *UpgradeDevGroupRelationClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeDevGroupRelation = append(c.inters.UpgradeDevGroupRelation, interceptors...)
}

// Create returns a builder for creating a UpgradeDevGroupRelation entity.
func (c *UpgradeDevGroupRelationClient) Create() *UpgradeDevGroupRelationCreate {
	mutation := newUpgradeDevGroupRelationMutation(c.config, OpCreate)
	return &UpgradeDevGroupRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeDevGroupRelation entities.
func (c *UpgradeDevGroupRelationClient) CreateBulk(builders ...*UpgradeDevGroupRelationCreate) *UpgradeDevGroupRelationCreateBulk {
	return &UpgradeDevGroupRelationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeDevGroupRelationClient) MapCreateBulk(slice any, setFunc func(*UpgradeDevGroupRelationCreate, int)) *UpgradeDevGroupRelationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeDevGroupRelationCreateBulk{err: fmt.Errorf("calling to UpgradeDevGroupRelationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeDevGroupRelationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeDevGroupRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeDevGroupRelation.
func (c *UpgradeDevGroupRelationClient) Update() *UpgradeDevGroupRelationUpdate {
	mutation := newUpgradeDevGroupRelationMutation(c.config, OpUpdate)
	return &UpgradeDevGroupRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeDevGroupRelationClient) UpdateOne(udgr *UpgradeDevGroupRelation) *UpgradeDevGroupRelationUpdateOne {
	mutation := newUpgradeDevGroupRelationMutation(c.config, OpUpdateOne, withUpgradeDevGroupRelation(udgr))
	return &UpgradeDevGroupRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeDevGroupRelationClient) UpdateOneID(id int) *UpgradeDevGroupRelationUpdateOne {
	mutation := newUpgradeDevGroupRelationMutation(c.config, OpUpdateOne, withUpgradeDevGroupRelationID(id))
	return &UpgradeDevGroupRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeDevGroupRelation.
func (c *UpgradeDevGroupRelationClient) Delete() *UpgradeDevGroupRelationDelete {
	mutation := newUpgradeDevGroupRelationMutation(c.config, OpDelete)
	return &UpgradeDevGroupRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeDevGroupRelationClient) DeleteOne(udgr *UpgradeDevGroupRelation) *UpgradeDevGroupRelationDeleteOne {
	return c.DeleteOneID(udgr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeDevGroupRelationClient) DeleteOneID(id int) *UpgradeDevGroupRelationDeleteOne {
	builder := c.Delete().Where(upgradedevgrouprelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeDevGroupRelationDeleteOne{builder}
}

// Query returns a query builder for UpgradeDevGroupRelation.
func (c *UpgradeDevGroupRelationClient) Query() *UpgradeDevGroupRelationQuery {
	return &UpgradeDevGroupRelationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeDevGroupRelation},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeDevGroupRelation entity by its id.
func (c *UpgradeDevGroupRelationClient) Get(ctx context.Context, id int) (*UpgradeDevGroupRelation, error) {
	return c.Query().Where(upgradedevgrouprelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeDevGroupRelationClient) GetX(ctx context.Context, id int) *UpgradeDevGroupRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeDevGroupRelationClient) Hooks() []Hook {
	return c.hooks.UpgradeDevGroupRelation
}

// Interceptors returns the client interceptors.
func (c *UpgradeDevGroupRelationClient) Interceptors() []Interceptor {
	return c.inters.UpgradeDevGroupRelation
}

func (c *UpgradeDevGroupRelationClient) mutate(ctx context.Context, m *UpgradeDevGroupRelationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeDevGroupRelationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeDevGroupRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeDevGroupRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeDevGroupRelationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeDevGroupRelation mutation op: %q", m.Op())
	}
}

// UpgradeDevModelClient is a client for the UpgradeDevModel schema.
type UpgradeDevModelClient struct {
	config
}

// NewUpgradeDevModelClient returns a client for the UpgradeDevModel from the given config.
func NewUpgradeDevModelClient(c config) *UpgradeDevModelClient {
	return &UpgradeDevModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradedevmodel.Hooks(f(g(h())))`.
func (c *UpgradeDevModelClient) Use(hooks ...Hook) {
	c.hooks.UpgradeDevModel = append(c.hooks.UpgradeDevModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradedevmodel.Intercept(f(g(h())))`.
func (c *UpgradeDevModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeDevModel = append(c.inters.UpgradeDevModel, interceptors...)
}

// Create returns a builder for creating a UpgradeDevModel entity.
func (c *UpgradeDevModelClient) Create() *UpgradeDevModelCreate {
	mutation := newUpgradeDevModelMutation(c.config, OpCreate)
	return &UpgradeDevModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeDevModel entities.
func (c *UpgradeDevModelClient) CreateBulk(builders ...*UpgradeDevModelCreate) *UpgradeDevModelCreateBulk {
	return &UpgradeDevModelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeDevModelClient) MapCreateBulk(slice any, setFunc func(*UpgradeDevModelCreate, int)) *UpgradeDevModelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeDevModelCreateBulk{err: fmt.Errorf("calling to UpgradeDevModelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeDevModelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeDevModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeDevModel.
func (c *UpgradeDevModelClient) Update() *UpgradeDevModelUpdate {
	mutation := newUpgradeDevModelMutation(c.config, OpUpdate)
	return &UpgradeDevModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeDevModelClient) UpdateOne(udm *UpgradeDevModel) *UpgradeDevModelUpdateOne {
	mutation := newUpgradeDevModelMutation(c.config, OpUpdateOne, withUpgradeDevModel(udm))
	return &UpgradeDevModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeDevModelClient) UpdateOneID(id int) *UpgradeDevModelUpdateOne {
	mutation := newUpgradeDevModelMutation(c.config, OpUpdateOne, withUpgradeDevModelID(id))
	return &UpgradeDevModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeDevModel.
func (c *UpgradeDevModelClient) Delete() *UpgradeDevModelDelete {
	mutation := newUpgradeDevModelMutation(c.config, OpDelete)
	return &UpgradeDevModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeDevModelClient) DeleteOne(udm *UpgradeDevModel) *UpgradeDevModelDeleteOne {
	return c.DeleteOneID(udm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeDevModelClient) DeleteOneID(id int) *UpgradeDevModelDeleteOne {
	builder := c.Delete().Where(upgradedevmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeDevModelDeleteOne{builder}
}

// Query returns a query builder for UpgradeDevModel.
func (c *UpgradeDevModelClient) Query() *UpgradeDevModelQuery {
	return &UpgradeDevModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeDevModel},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeDevModel entity by its id.
func (c *UpgradeDevModelClient) Get(ctx context.Context, id int) (*UpgradeDevModel, error) {
	return c.Query().Where(upgradedevmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeDevModelClient) GetX(ctx context.Context, id int) *UpgradeDevModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeDevModelClient) Hooks() []Hook {
	return c.hooks.UpgradeDevModel
}

// Interceptors returns the client interceptors.
func (c *UpgradeDevModelClient) Interceptors() []Interceptor {
	return c.inters.UpgradeDevModel
}

func (c *UpgradeDevModelClient) mutate(ctx context.Context, m *UpgradeDevModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeDevModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeDevModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeDevModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeDevModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeDevModel mutation op: %q", m.Op())
	}
}

// UpgradeElectronClient is a client for the UpgradeElectron schema.
type UpgradeElectronClient struct {
	config
}

// NewUpgradeElectronClient returns a client for the UpgradeElectron from the given config.
func NewUpgradeElectronClient(c config) *UpgradeElectronClient {
	return &UpgradeElectronClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeelectron.Hooks(f(g(h())))`.
func (c *UpgradeElectronClient) Use(hooks ...Hook) {
	c.hooks.UpgradeElectron = append(c.hooks.UpgradeElectron, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeelectron.Intercept(f(g(h())))`.
func (c *UpgradeElectronClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeElectron = append(c.inters.UpgradeElectron, interceptors...)
}

// Create returns a builder for creating a UpgradeElectron entity.
func (c *UpgradeElectronClient) Create() *UpgradeElectronCreate {
	mutation := newUpgradeElectronMutation(c.config, OpCreate)
	return &UpgradeElectronCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeElectron entities.
func (c *UpgradeElectronClient) CreateBulk(builders ...*UpgradeElectronCreate) *UpgradeElectronCreateBulk {
	return &UpgradeElectronCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeElectronClient) MapCreateBulk(slice any, setFunc func(*UpgradeElectronCreate, int)) *UpgradeElectronCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeElectronCreateBulk{err: fmt.Errorf("calling to UpgradeElectronClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeElectronCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeElectronCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeElectron.
func (c *UpgradeElectronClient) Update() *UpgradeElectronUpdate {
	mutation := newUpgradeElectronMutation(c.config, OpUpdate)
	return &UpgradeElectronUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeElectronClient) UpdateOne(ue *UpgradeElectron) *UpgradeElectronUpdateOne {
	mutation := newUpgradeElectronMutation(c.config, OpUpdateOne, withUpgradeElectron(ue))
	return &UpgradeElectronUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeElectronClient) UpdateOneID(id int) *UpgradeElectronUpdateOne {
	mutation := newUpgradeElectronMutation(c.config, OpUpdateOne, withUpgradeElectronID(id))
	return &UpgradeElectronUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeElectron.
func (c *UpgradeElectronClient) Delete() *UpgradeElectronDelete {
	mutation := newUpgradeElectronMutation(c.config, OpDelete)
	return &UpgradeElectronDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeElectronClient) DeleteOne(ue *UpgradeElectron) *UpgradeElectronDeleteOne {
	return c.DeleteOneID(ue.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeElectronClient) DeleteOneID(id int) *UpgradeElectronDeleteOne {
	builder := c.Delete().Where(upgradeelectron.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeElectronDeleteOne{builder}
}

// Query returns a query builder for UpgradeElectron.
func (c *UpgradeElectronClient) Query() *UpgradeElectronQuery {
	return &UpgradeElectronQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeElectron},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeElectron entity by its id.
func (c *UpgradeElectronClient) Get(ctx context.Context, id int) (*UpgradeElectron, error) {
	return c.Query().Where(upgradeelectron.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeElectronClient) GetX(ctx context.Context, id int) *UpgradeElectron {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeElectronClient) Hooks() []Hook {
	return c.hooks.UpgradeElectron
}

// Interceptors returns the client interceptors.
func (c *UpgradeElectronClient) Interceptors() []Interceptor {
	return c.inters.UpgradeElectron
}

func (c *UpgradeElectronClient) mutate(ctx context.Context, m *UpgradeElectronMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeElectronCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeElectronUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeElectronUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeElectronDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeElectron mutation op: %q", m.Op())
	}
}

// UpgradeElectronUpgradeStrategyClient is a client for the UpgradeElectronUpgradeStrategy schema.
type UpgradeElectronUpgradeStrategyClient struct {
	config
}

// NewUpgradeElectronUpgradeStrategyClient returns a client for the UpgradeElectronUpgradeStrategy from the given config.
func NewUpgradeElectronUpgradeStrategyClient(c config) *UpgradeElectronUpgradeStrategyClient {
	return &UpgradeElectronUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeelectronupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeElectronUpgradeStrategy = append(c.hooks.UpgradeElectronUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeelectronupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeElectronUpgradeStrategy = append(c.inters.UpgradeElectronUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeElectronUpgradeStrategy entity.
func (c *UpgradeElectronUpgradeStrategyClient) Create() *UpgradeElectronUpgradeStrategyCreate {
	mutation := newUpgradeElectronUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeElectronUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeElectronUpgradeStrategy entities.
func (c *UpgradeElectronUpgradeStrategyClient) CreateBulk(builders ...*UpgradeElectronUpgradeStrategyCreate) *UpgradeElectronUpgradeStrategyCreateBulk {
	return &UpgradeElectronUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeElectronUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeElectronUpgradeStrategyCreate, int)) *UpgradeElectronUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeElectronUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeElectronUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeElectronUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeElectronUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeElectronUpgradeStrategy.
func (c *UpgradeElectronUpgradeStrategyClient) Update() *UpgradeElectronUpgradeStrategyUpdate {
	mutation := newUpgradeElectronUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeElectronUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeElectronUpgradeStrategyClient) UpdateOne(ueus *UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategy(ueus))
	return &UpgradeElectronUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeElectronUpgradeStrategyClient) UpdateOneID(id int) *UpgradeElectronUpgradeStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategyID(id))
	return &UpgradeElectronUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeElectronUpgradeStrategy.
func (c *UpgradeElectronUpgradeStrategyClient) Delete() *UpgradeElectronUpgradeStrategyDelete {
	mutation := newUpgradeElectronUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeElectronUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeElectronUpgradeStrategyClient) DeleteOne(ueus *UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyDeleteOne {
	return c.DeleteOneID(ueus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeElectronUpgradeStrategyClient) DeleteOneID(id int) *UpgradeElectronUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradeelectronupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeElectronUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeElectronUpgradeStrategy.
func (c *UpgradeElectronUpgradeStrategyClient) Query() *UpgradeElectronUpgradeStrategyQuery {
	return &UpgradeElectronUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeElectronUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeElectronUpgradeStrategy entity by its id.
func (c *UpgradeElectronUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeElectronUpgradeStrategy, error) {
	return c.Query().Where(upgradeelectronupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeElectronUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeElectronUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeElectronUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeElectronUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeElectronUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeElectronUpgradeStrategy
}

func (c *UpgradeElectronUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeElectronUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeElectronUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeElectronUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeElectronUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeElectronUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeElectronUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeElectronUpgradeStrategyFlowLimitStrategy schema.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeElectronUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeelectronupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeElectronUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeElectronUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeelectronupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeElectronUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeElectronUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeElectronUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeElectronUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeElectronUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate) *UpgradeElectronUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeElectronUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeElectronUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeElectronUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeElectronUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeElectronUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) UpdateOne(ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategyFlowLimitStrategy(ueusfls))
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeElectronUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeElectronUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) DeleteOne(ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(ueusfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradeelectronupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeElectronUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeElectronUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeElectronUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradeelectronupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeElectronUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeElectronUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeElectronUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeElectronUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeElectronUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeElectronUpgradeStrategyGrayStrategyClient is a client for the UpgradeElectronUpgradeStrategyGrayStrategy schema.
type UpgradeElectronUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeElectronUpgradeStrategyGrayStrategyClient returns a client for the UpgradeElectronUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeElectronUpgradeStrategyGrayStrategyClient(c config) *UpgradeElectronUpgradeStrategyGrayStrategyClient {
	return &UpgradeElectronUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeelectronupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeElectronUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeElectronUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeelectronupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeElectronUpgradeStrategyGrayStrategy = append(c.inters.UpgradeElectronUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeElectronUpgradeStrategyGrayStrategy entity.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Create() *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeElectronUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeElectronUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeElectronUpgradeStrategyGrayStrategy entities.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeElectronUpgradeStrategyGrayStrategyCreate) *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeElectronUpgradeStrategyGrayStrategyCreate, int)) *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeElectronUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeElectronUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeElectronUpgradeStrategyGrayStrategy.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Update() *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeElectronUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeElectronUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) UpdateOne(ueusgs *UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategyGrayStrategy(ueusgs))
	return &UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeElectronUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeElectronUpgradeStrategyGrayStrategyID(id))
	return &UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeElectronUpgradeStrategyGrayStrategy.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Delete() *UpgradeElectronUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeElectronUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeElectronUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) DeleteOne(ueusgs *UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(ueusgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradeelectronupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeElectronUpgradeStrategyGrayStrategy.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Query() *UpgradeElectronUpgradeStrategyGrayStrategyQuery {
	return &UpgradeElectronUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeElectronUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeElectronUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeElectronUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradeelectronupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeElectronUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeElectronUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeElectronUpgradeStrategyGrayStrategy
}

func (c *UpgradeElectronUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeElectronUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeElectronUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeElectronUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeElectronUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeElectronUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeElectronVersionClient is a client for the UpgradeElectronVersion schema.
type UpgradeElectronVersionClient struct {
	config
}

// NewUpgradeElectronVersionClient returns a client for the UpgradeElectronVersion from the given config.
func NewUpgradeElectronVersionClient(c config) *UpgradeElectronVersionClient {
	return &UpgradeElectronVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeelectronversion.Hooks(f(g(h())))`.
func (c *UpgradeElectronVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeElectronVersion = append(c.hooks.UpgradeElectronVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeelectronversion.Intercept(f(g(h())))`.
func (c *UpgradeElectronVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeElectronVersion = append(c.inters.UpgradeElectronVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeElectronVersion entity.
func (c *UpgradeElectronVersionClient) Create() *UpgradeElectronVersionCreate {
	mutation := newUpgradeElectronVersionMutation(c.config, OpCreate)
	return &UpgradeElectronVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeElectronVersion entities.
func (c *UpgradeElectronVersionClient) CreateBulk(builders ...*UpgradeElectronVersionCreate) *UpgradeElectronVersionCreateBulk {
	return &UpgradeElectronVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeElectronVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeElectronVersionCreate, int)) *UpgradeElectronVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeElectronVersionCreateBulk{err: fmt.Errorf("calling to UpgradeElectronVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeElectronVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeElectronVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeElectronVersion.
func (c *UpgradeElectronVersionClient) Update() *UpgradeElectronVersionUpdate {
	mutation := newUpgradeElectronVersionMutation(c.config, OpUpdate)
	return &UpgradeElectronVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeElectronVersionClient) UpdateOne(uev *UpgradeElectronVersion) *UpgradeElectronVersionUpdateOne {
	mutation := newUpgradeElectronVersionMutation(c.config, OpUpdateOne, withUpgradeElectronVersion(uev))
	return &UpgradeElectronVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeElectronVersionClient) UpdateOneID(id int) *UpgradeElectronVersionUpdateOne {
	mutation := newUpgradeElectronVersionMutation(c.config, OpUpdateOne, withUpgradeElectronVersionID(id))
	return &UpgradeElectronVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeElectronVersion.
func (c *UpgradeElectronVersionClient) Delete() *UpgradeElectronVersionDelete {
	mutation := newUpgradeElectronVersionMutation(c.config, OpDelete)
	return &UpgradeElectronVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeElectronVersionClient) DeleteOne(uev *UpgradeElectronVersion) *UpgradeElectronVersionDeleteOne {
	return c.DeleteOneID(uev.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeElectronVersionClient) DeleteOneID(id int) *UpgradeElectronVersionDeleteOne {
	builder := c.Delete().Where(upgradeelectronversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeElectronVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeElectronVersion.
func (c *UpgradeElectronVersionClient) Query() *UpgradeElectronVersionQuery {
	return &UpgradeElectronVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeElectronVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeElectronVersion entity by its id.
func (c *UpgradeElectronVersionClient) Get(ctx context.Context, id int) (*UpgradeElectronVersion, error) {
	return c.Query().Where(upgradeelectronversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeElectronVersionClient) GetX(ctx context.Context, id int) *UpgradeElectronVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeElectronVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeElectronVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeElectronVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeElectronVersion
}

func (c *UpgradeElectronVersionClient) mutate(ctx context.Context, m *UpgradeElectronVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeElectronVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeElectronVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeElectronVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeElectronVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeElectronVersion mutation op: %q", m.Op())
	}
}

// UpgradeFileClient is a client for the UpgradeFile schema.
type UpgradeFileClient struct {
	config
}

// NewUpgradeFileClient returns a client for the UpgradeFile from the given config.
func NewUpgradeFileClient(c config) *UpgradeFileClient {
	return &UpgradeFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradefile.Hooks(f(g(h())))`.
func (c *UpgradeFileClient) Use(hooks ...Hook) {
	c.hooks.UpgradeFile = append(c.hooks.UpgradeFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradefile.Intercept(f(g(h())))`.
func (c *UpgradeFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeFile = append(c.inters.UpgradeFile, interceptors...)
}

// Create returns a builder for creating a UpgradeFile entity.
func (c *UpgradeFileClient) Create() *UpgradeFileCreate {
	mutation := newUpgradeFileMutation(c.config, OpCreate)
	return &UpgradeFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeFile entities.
func (c *UpgradeFileClient) CreateBulk(builders ...*UpgradeFileCreate) *UpgradeFileCreateBulk {
	return &UpgradeFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeFileClient) MapCreateBulk(slice any, setFunc func(*UpgradeFileCreate, int)) *UpgradeFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeFileCreateBulk{err: fmt.Errorf("calling to UpgradeFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeFile.
func (c *UpgradeFileClient) Update() *UpgradeFileUpdate {
	mutation := newUpgradeFileMutation(c.config, OpUpdate)
	return &UpgradeFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeFileClient) UpdateOne(uf *UpgradeFile) *UpgradeFileUpdateOne {
	mutation := newUpgradeFileMutation(c.config, OpUpdateOne, withUpgradeFile(uf))
	return &UpgradeFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeFileClient) UpdateOneID(id int) *UpgradeFileUpdateOne {
	mutation := newUpgradeFileMutation(c.config, OpUpdateOne, withUpgradeFileID(id))
	return &UpgradeFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeFile.
func (c *UpgradeFileClient) Delete() *UpgradeFileDelete {
	mutation := newUpgradeFileMutation(c.config, OpDelete)
	return &UpgradeFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeFileClient) DeleteOne(uf *UpgradeFile) *UpgradeFileDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeFileClient) DeleteOneID(id int) *UpgradeFileDeleteOne {
	builder := c.Delete().Where(upgradefile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeFileDeleteOne{builder}
}

// Query returns a query builder for UpgradeFile.
func (c *UpgradeFileClient) Query() *UpgradeFileQuery {
	return &UpgradeFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeFile entity by its id.
func (c *UpgradeFileClient) Get(ctx context.Context, id int) (*UpgradeFile, error) {
	return c.Query().Where(upgradefile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeFileClient) GetX(ctx context.Context, id int) *UpgradeFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeFileClient) Hooks() []Hook {
	return c.hooks.UpgradeFile
}

// Interceptors returns the client interceptors.
func (c *UpgradeFileClient) Interceptors() []Interceptor {
	return c.inters.UpgradeFile
}

func (c *UpgradeFileClient) mutate(ctx context.Context, m *UpgradeFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeFile mutation op: %q", m.Op())
	}
}

// UpgradeFileUpgradeStrategyClient is a client for the UpgradeFileUpgradeStrategy schema.
type UpgradeFileUpgradeStrategyClient struct {
	config
}

// NewUpgradeFileUpgradeStrategyClient returns a client for the UpgradeFileUpgradeStrategy from the given config.
func NewUpgradeFileUpgradeStrategyClient(c config) *UpgradeFileUpgradeStrategyClient {
	return &UpgradeFileUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradefileupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeFileUpgradeStrategy = append(c.hooks.UpgradeFileUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradefileupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeFileUpgradeStrategy = append(c.inters.UpgradeFileUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeFileUpgradeStrategy entity.
func (c *UpgradeFileUpgradeStrategyClient) Create() *UpgradeFileUpgradeStrategyCreate {
	mutation := newUpgradeFileUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeFileUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeFileUpgradeStrategy entities.
func (c *UpgradeFileUpgradeStrategyClient) CreateBulk(builders ...*UpgradeFileUpgradeStrategyCreate) *UpgradeFileUpgradeStrategyCreateBulk {
	return &UpgradeFileUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeFileUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeFileUpgradeStrategyCreate, int)) *UpgradeFileUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeFileUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeFileUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeFileUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeFileUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeFileUpgradeStrategy.
func (c *UpgradeFileUpgradeStrategyClient) Update() *UpgradeFileUpgradeStrategyUpdate {
	mutation := newUpgradeFileUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeFileUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeFileUpgradeStrategyClient) UpdateOne(ufus *UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategy(ufus))
	return &UpgradeFileUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeFileUpgradeStrategyClient) UpdateOneID(id int) *UpgradeFileUpgradeStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategyID(id))
	return &UpgradeFileUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeFileUpgradeStrategy.
func (c *UpgradeFileUpgradeStrategyClient) Delete() *UpgradeFileUpgradeStrategyDelete {
	mutation := newUpgradeFileUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeFileUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeFileUpgradeStrategyClient) DeleteOne(ufus *UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyDeleteOne {
	return c.DeleteOneID(ufus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeFileUpgradeStrategyClient) DeleteOneID(id int) *UpgradeFileUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradefileupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeFileUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeFileUpgradeStrategy.
func (c *UpgradeFileUpgradeStrategyClient) Query() *UpgradeFileUpgradeStrategyQuery {
	return &UpgradeFileUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeFileUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeFileUpgradeStrategy entity by its id.
func (c *UpgradeFileUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeFileUpgradeStrategy, error) {
	return c.Query().Where(upgradefileupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeFileUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeFileUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeFileUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeFileUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeFileUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeFileUpgradeStrategy
}

func (c *UpgradeFileUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeFileUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeFileUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeFileUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeFileUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeFileUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeFileUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeFileUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeFileUpgradeStrategyFlowLimitStrategy schema.
type UpgradeFileUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeFileUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeFileUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeFileUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeFileUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradefileupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeFileUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeFileUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradefileupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeFileUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeFileUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeFileUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeFileUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeFileUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeFileUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeFileUpgradeStrategyFlowLimitStrategyCreate) *UpgradeFileUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeFileUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeFileUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeFileUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeFileUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeFileUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeFileUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeFileUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) UpdateOne(ufusfls *UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategyFlowLimitStrategy(ufusfls))
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeFileUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeFileUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) DeleteOne(ufusfls *UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(ufusfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradefileupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeFileUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeFileUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeFileUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeFileUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeFileUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeFileUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradefileupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeFileUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeFileUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeFileUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeFileUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeFileUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeFileUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeFileUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeFileUpgradeStrategyGrayStrategyClient is a client for the UpgradeFileUpgradeStrategyGrayStrategy schema.
type UpgradeFileUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeFileUpgradeStrategyGrayStrategyClient returns a client for the UpgradeFileUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeFileUpgradeStrategyGrayStrategyClient(c config) *UpgradeFileUpgradeStrategyGrayStrategyClient {
	return &UpgradeFileUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradefileupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeFileUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeFileUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradefileupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeFileUpgradeStrategyGrayStrategy = append(c.inters.UpgradeFileUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeFileUpgradeStrategyGrayStrategy entity.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Create() *UpgradeFileUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeFileUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeFileUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeFileUpgradeStrategyGrayStrategy entities.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeFileUpgradeStrategyGrayStrategyCreate) *UpgradeFileUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeFileUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeFileUpgradeStrategyGrayStrategyCreate, int)) *UpgradeFileUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeFileUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeFileUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeFileUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeFileUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeFileUpgradeStrategyGrayStrategy.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Update() *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeFileUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeFileUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) UpdateOne(ufusgs *UpgradeFileUpgradeStrategyGrayStrategy) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategyGrayStrategy(ufusgs))
	return &UpgradeFileUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeFileUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeFileUpgradeStrategyGrayStrategyID(id))
	return &UpgradeFileUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeFileUpgradeStrategyGrayStrategy.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Delete() *UpgradeFileUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeFileUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeFileUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) DeleteOne(ufusgs *UpgradeFileUpgradeStrategyGrayStrategy) *UpgradeFileUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(ufusgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeFileUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradefileupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeFileUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeFileUpgradeStrategyGrayStrategy.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Query() *UpgradeFileUpgradeStrategyGrayStrategyQuery {
	return &UpgradeFileUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeFileUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeFileUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeFileUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradefileupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeFileUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeFileUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeFileUpgradeStrategyGrayStrategy
}

func (c *UpgradeFileUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeFileUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeFileUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeFileUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeFileUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeFileUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeFileUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeFileVersionClient is a client for the UpgradeFileVersion schema.
type UpgradeFileVersionClient struct {
	config
}

// NewUpgradeFileVersionClient returns a client for the UpgradeFileVersion from the given config.
func NewUpgradeFileVersionClient(c config) *UpgradeFileVersionClient {
	return &UpgradeFileVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradefileversion.Hooks(f(g(h())))`.
func (c *UpgradeFileVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeFileVersion = append(c.hooks.UpgradeFileVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradefileversion.Intercept(f(g(h())))`.
func (c *UpgradeFileVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeFileVersion = append(c.inters.UpgradeFileVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeFileVersion entity.
func (c *UpgradeFileVersionClient) Create() *UpgradeFileVersionCreate {
	mutation := newUpgradeFileVersionMutation(c.config, OpCreate)
	return &UpgradeFileVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeFileVersion entities.
func (c *UpgradeFileVersionClient) CreateBulk(builders ...*UpgradeFileVersionCreate) *UpgradeFileVersionCreateBulk {
	return &UpgradeFileVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeFileVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeFileVersionCreate, int)) *UpgradeFileVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeFileVersionCreateBulk{err: fmt.Errorf("calling to UpgradeFileVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeFileVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeFileVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeFileVersion.
func (c *UpgradeFileVersionClient) Update() *UpgradeFileVersionUpdate {
	mutation := newUpgradeFileVersionMutation(c.config, OpUpdate)
	return &UpgradeFileVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeFileVersionClient) UpdateOne(ufv *UpgradeFileVersion) *UpgradeFileVersionUpdateOne {
	mutation := newUpgradeFileVersionMutation(c.config, OpUpdateOne, withUpgradeFileVersion(ufv))
	return &UpgradeFileVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeFileVersionClient) UpdateOneID(id int) *UpgradeFileVersionUpdateOne {
	mutation := newUpgradeFileVersionMutation(c.config, OpUpdateOne, withUpgradeFileVersionID(id))
	return &UpgradeFileVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeFileVersion.
func (c *UpgradeFileVersionClient) Delete() *UpgradeFileVersionDelete {
	mutation := newUpgradeFileVersionMutation(c.config, OpDelete)
	return &UpgradeFileVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeFileVersionClient) DeleteOne(ufv *UpgradeFileVersion) *UpgradeFileVersionDeleteOne {
	return c.DeleteOneID(ufv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeFileVersionClient) DeleteOneID(id int) *UpgradeFileVersionDeleteOne {
	builder := c.Delete().Where(upgradefileversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeFileVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeFileVersion.
func (c *UpgradeFileVersionClient) Query() *UpgradeFileVersionQuery {
	return &UpgradeFileVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeFileVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeFileVersion entity by its id.
func (c *UpgradeFileVersionClient) Get(ctx context.Context, id int) (*UpgradeFileVersion, error) {
	return c.Query().Where(upgradefileversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeFileVersionClient) GetX(ctx context.Context, id int) *UpgradeFileVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeFileVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeFileVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeFileVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeFileVersion
}

func (c *UpgradeFileVersionClient) mutate(ctx context.Context, m *UpgradeFileVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeFileVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeFileVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeFileVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeFileVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeFileVersion mutation op: %q", m.Op())
	}
}

// UpgradeTauriClient is a client for the UpgradeTauri schema.
type UpgradeTauriClient struct {
	config
}

// NewUpgradeTauriClient returns a client for the UpgradeTauri from the given config.
func NewUpgradeTauriClient(c config) *UpgradeTauriClient {
	return &UpgradeTauriClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetauri.Hooks(f(g(h())))`.
func (c *UpgradeTauriClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTauri = append(c.hooks.UpgradeTauri, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetauri.Intercept(f(g(h())))`.
func (c *UpgradeTauriClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTauri = append(c.inters.UpgradeTauri, interceptors...)
}

// Create returns a builder for creating a UpgradeTauri entity.
func (c *UpgradeTauriClient) Create() *UpgradeTauriCreate {
	mutation := newUpgradeTauriMutation(c.config, OpCreate)
	return &UpgradeTauriCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTauri entities.
func (c *UpgradeTauriClient) CreateBulk(builders ...*UpgradeTauriCreate) *UpgradeTauriCreateBulk {
	return &UpgradeTauriCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTauriClient) MapCreateBulk(slice any, setFunc func(*UpgradeTauriCreate, int)) *UpgradeTauriCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTauriCreateBulk{err: fmt.Errorf("calling to UpgradeTauriClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTauriCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTauriCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTauri.
func (c *UpgradeTauriClient) Update() *UpgradeTauriUpdate {
	mutation := newUpgradeTauriMutation(c.config, OpUpdate)
	return &UpgradeTauriUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTauriClient) UpdateOne(ut *UpgradeTauri) *UpgradeTauriUpdateOne {
	mutation := newUpgradeTauriMutation(c.config, OpUpdateOne, withUpgradeTauri(ut))
	return &UpgradeTauriUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTauriClient) UpdateOneID(id int) *UpgradeTauriUpdateOne {
	mutation := newUpgradeTauriMutation(c.config, OpUpdateOne, withUpgradeTauriID(id))
	return &UpgradeTauriUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTauri.
func (c *UpgradeTauriClient) Delete() *UpgradeTauriDelete {
	mutation := newUpgradeTauriMutation(c.config, OpDelete)
	return &UpgradeTauriDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTauriClient) DeleteOne(ut *UpgradeTauri) *UpgradeTauriDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTauriClient) DeleteOneID(id int) *UpgradeTauriDeleteOne {
	builder := c.Delete().Where(upgradetauri.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTauriDeleteOne{builder}
}

// Query returns a query builder for UpgradeTauri.
func (c *UpgradeTauriClient) Query() *UpgradeTauriQuery {
	return &UpgradeTauriQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTauri},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTauri entity by its id.
func (c *UpgradeTauriClient) Get(ctx context.Context, id int) (*UpgradeTauri, error) {
	return c.Query().Where(upgradetauri.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTauriClient) GetX(ctx context.Context, id int) *UpgradeTauri {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTauriClient) Hooks() []Hook {
	return c.hooks.UpgradeTauri
}

// Interceptors returns the client interceptors.
func (c *UpgradeTauriClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTauri
}

func (c *UpgradeTauriClient) mutate(ctx context.Context, m *UpgradeTauriMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTauriCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTauriUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTauriUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTauriDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTauri mutation op: %q", m.Op())
	}
}

// UpgradeTauriUpgradeStrategyClient is a client for the UpgradeTauriUpgradeStrategy schema.
type UpgradeTauriUpgradeStrategyClient struct {
	config
}

// NewUpgradeTauriUpgradeStrategyClient returns a client for the UpgradeTauriUpgradeStrategy from the given config.
func NewUpgradeTauriUpgradeStrategyClient(c config) *UpgradeTauriUpgradeStrategyClient {
	return &UpgradeTauriUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetauriupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTauriUpgradeStrategy = append(c.hooks.UpgradeTauriUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetauriupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTauriUpgradeStrategy = append(c.inters.UpgradeTauriUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeTauriUpgradeStrategy entity.
func (c *UpgradeTauriUpgradeStrategyClient) Create() *UpgradeTauriUpgradeStrategyCreate {
	mutation := newUpgradeTauriUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeTauriUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTauriUpgradeStrategy entities.
func (c *UpgradeTauriUpgradeStrategyClient) CreateBulk(builders ...*UpgradeTauriUpgradeStrategyCreate) *UpgradeTauriUpgradeStrategyCreateBulk {
	return &UpgradeTauriUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTauriUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeTauriUpgradeStrategyCreate, int)) *UpgradeTauriUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTauriUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeTauriUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTauriUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTauriUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTauriUpgradeStrategy.
func (c *UpgradeTauriUpgradeStrategyClient) Update() *UpgradeTauriUpgradeStrategyUpdate {
	mutation := newUpgradeTauriUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeTauriUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTauriUpgradeStrategyClient) UpdateOne(utus *UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategy(utus))
	return &UpgradeTauriUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTauriUpgradeStrategyClient) UpdateOneID(id int) *UpgradeTauriUpgradeStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategyID(id))
	return &UpgradeTauriUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTauriUpgradeStrategy.
func (c *UpgradeTauriUpgradeStrategyClient) Delete() *UpgradeTauriUpgradeStrategyDelete {
	mutation := newUpgradeTauriUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeTauriUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTauriUpgradeStrategyClient) DeleteOne(utus *UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyDeleteOne {
	return c.DeleteOneID(utus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTauriUpgradeStrategyClient) DeleteOneID(id int) *UpgradeTauriUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradetauriupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTauriUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeTauriUpgradeStrategy.
func (c *UpgradeTauriUpgradeStrategyClient) Query() *UpgradeTauriUpgradeStrategyQuery {
	return &UpgradeTauriUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTauriUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTauriUpgradeStrategy entity by its id.
func (c *UpgradeTauriUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeTauriUpgradeStrategy, error) {
	return c.Query().Where(upgradetauriupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTauriUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeTauriUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTauriUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeTauriUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeTauriUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTauriUpgradeStrategy
}

func (c *UpgradeTauriUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeTauriUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTauriUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTauriUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTauriUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTauriUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTauriUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeTauriUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeTauriUpgradeStrategyFlowLimitStrategy schema.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeTauriUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeTauriUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeTauriUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetauriupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTauriUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeTauriUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetauriupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTauriUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeTauriUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeTauriUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeTauriUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTauriUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate) *UpgradeTauriUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeTauriUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTauriUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeTauriUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTauriUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeTauriUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) UpdateOne(utusfls *UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategyFlowLimitStrategy(utusfls))
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTauriUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeTauriUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) DeleteOne(utusfls *UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(utusfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradetauriupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeTauriUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTauriUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTauriUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeTauriUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradetauriupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeTauriUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTauriUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeTauriUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTauriUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTauriUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeTauriUpgradeStrategyGrayStrategyClient is a client for the UpgradeTauriUpgradeStrategyGrayStrategy schema.
type UpgradeTauriUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeTauriUpgradeStrategyGrayStrategyClient returns a client for the UpgradeTauriUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeTauriUpgradeStrategyGrayStrategyClient(c config) *UpgradeTauriUpgradeStrategyGrayStrategyClient {
	return &UpgradeTauriUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetauriupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTauriUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeTauriUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetauriupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTauriUpgradeStrategyGrayStrategy = append(c.inters.UpgradeTauriUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeTauriUpgradeStrategyGrayStrategy entity.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Create() *UpgradeTauriUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeTauriUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeTauriUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTauriUpgradeStrategyGrayStrategy entities.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeTauriUpgradeStrategyGrayStrategyCreate) *UpgradeTauriUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeTauriUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeTauriUpgradeStrategyGrayStrategyCreate, int)) *UpgradeTauriUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTauriUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeTauriUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTauriUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTauriUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTauriUpgradeStrategyGrayStrategy.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Update() *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeTauriUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeTauriUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) UpdateOne(utusgs *UpgradeTauriUpgradeStrategyGrayStrategy) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategyGrayStrategy(utusgs))
	return &UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeTauriUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeTauriUpgradeStrategyGrayStrategyID(id))
	return &UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTauriUpgradeStrategyGrayStrategy.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Delete() *UpgradeTauriUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeTauriUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeTauriUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) DeleteOne(utusgs *UpgradeTauriUpgradeStrategyGrayStrategy) *UpgradeTauriUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(utusgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeTauriUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradetauriupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTauriUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeTauriUpgradeStrategyGrayStrategy.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Query() *UpgradeTauriUpgradeStrategyGrayStrategyQuery {
	return &UpgradeTauriUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTauriUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTauriUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeTauriUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradetauriupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeTauriUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeTauriUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTauriUpgradeStrategyGrayStrategy
}

func (c *UpgradeTauriUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeTauriUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTauriUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTauriUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTauriUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTauriUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeTauriVersionClient is a client for the UpgradeTauriVersion schema.
type UpgradeTauriVersionClient struct {
	config
}

// NewUpgradeTauriVersionClient returns a client for the UpgradeTauriVersion from the given config.
func NewUpgradeTauriVersionClient(c config) *UpgradeTauriVersionClient {
	return &UpgradeTauriVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetauriversion.Hooks(f(g(h())))`.
func (c *UpgradeTauriVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTauriVersion = append(c.hooks.UpgradeTauriVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetauriversion.Intercept(f(g(h())))`.
func (c *UpgradeTauriVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTauriVersion = append(c.inters.UpgradeTauriVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeTauriVersion entity.
func (c *UpgradeTauriVersionClient) Create() *UpgradeTauriVersionCreate {
	mutation := newUpgradeTauriVersionMutation(c.config, OpCreate)
	return &UpgradeTauriVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTauriVersion entities.
func (c *UpgradeTauriVersionClient) CreateBulk(builders ...*UpgradeTauriVersionCreate) *UpgradeTauriVersionCreateBulk {
	return &UpgradeTauriVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTauriVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeTauriVersionCreate, int)) *UpgradeTauriVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTauriVersionCreateBulk{err: fmt.Errorf("calling to UpgradeTauriVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTauriVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTauriVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTauriVersion.
func (c *UpgradeTauriVersionClient) Update() *UpgradeTauriVersionUpdate {
	mutation := newUpgradeTauriVersionMutation(c.config, OpUpdate)
	return &UpgradeTauriVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTauriVersionClient) UpdateOne(utv *UpgradeTauriVersion) *UpgradeTauriVersionUpdateOne {
	mutation := newUpgradeTauriVersionMutation(c.config, OpUpdateOne, withUpgradeTauriVersion(utv))
	return &UpgradeTauriVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTauriVersionClient) UpdateOneID(id int) *UpgradeTauriVersionUpdateOne {
	mutation := newUpgradeTauriVersionMutation(c.config, OpUpdateOne, withUpgradeTauriVersionID(id))
	return &UpgradeTauriVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTauriVersion.
func (c *UpgradeTauriVersionClient) Delete() *UpgradeTauriVersionDelete {
	mutation := newUpgradeTauriVersionMutation(c.config, OpDelete)
	return &UpgradeTauriVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTauriVersionClient) DeleteOne(utv *UpgradeTauriVersion) *UpgradeTauriVersionDeleteOne {
	return c.DeleteOneID(utv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTauriVersionClient) DeleteOneID(id int) *UpgradeTauriVersionDeleteOne {
	builder := c.Delete().Where(upgradetauriversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTauriVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeTauriVersion.
func (c *UpgradeTauriVersionClient) Query() *UpgradeTauriVersionQuery {
	return &UpgradeTauriVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTauriVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTauriVersion entity by its id.
func (c *UpgradeTauriVersionClient) Get(ctx context.Context, id int) (*UpgradeTauriVersion, error) {
	return c.Query().Where(upgradetauriversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTauriVersionClient) GetX(ctx context.Context, id int) *UpgradeTauriVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTauriVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeTauriVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeTauriVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTauriVersion
}

func (c *UpgradeTauriVersionClient) mutate(ctx context.Context, m *UpgradeTauriVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTauriVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTauriVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTauriVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTauriVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTauriVersion mutation op: %q", m.Op())
	}
}

// UpgradeTrafficPacketClient is a client for the UpgradeTrafficPacket schema.
type UpgradeTrafficPacketClient struct {
	config
}

// NewUpgradeTrafficPacketClient returns a client for the UpgradeTrafficPacket from the given config.
func NewUpgradeTrafficPacketClient(c config) *UpgradeTrafficPacketClient {
	return &UpgradeTrafficPacketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradetrafficpacket.Hooks(f(g(h())))`.
func (c *UpgradeTrafficPacketClient) Use(hooks ...Hook) {
	c.hooks.UpgradeTrafficPacket = append(c.hooks.UpgradeTrafficPacket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradetrafficpacket.Intercept(f(g(h())))`.
func (c *UpgradeTrafficPacketClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeTrafficPacket = append(c.inters.UpgradeTrafficPacket, interceptors...)
}

// Create returns a builder for creating a UpgradeTrafficPacket entity.
func (c *UpgradeTrafficPacketClient) Create() *UpgradeTrafficPacketCreate {
	mutation := newUpgradeTrafficPacketMutation(c.config, OpCreate)
	return &UpgradeTrafficPacketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeTrafficPacket entities.
func (c *UpgradeTrafficPacketClient) CreateBulk(builders ...*UpgradeTrafficPacketCreate) *UpgradeTrafficPacketCreateBulk {
	return &UpgradeTrafficPacketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeTrafficPacketClient) MapCreateBulk(slice any, setFunc func(*UpgradeTrafficPacketCreate, int)) *UpgradeTrafficPacketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeTrafficPacketCreateBulk{err: fmt.Errorf("calling to UpgradeTrafficPacketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeTrafficPacketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeTrafficPacketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeTrafficPacket.
func (c *UpgradeTrafficPacketClient) Update() *UpgradeTrafficPacketUpdate {
	mutation := newUpgradeTrafficPacketMutation(c.config, OpUpdate)
	return &UpgradeTrafficPacketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeTrafficPacketClient) UpdateOne(utp *UpgradeTrafficPacket) *UpgradeTrafficPacketUpdateOne {
	mutation := newUpgradeTrafficPacketMutation(c.config, OpUpdateOne, withUpgradeTrafficPacket(utp))
	return &UpgradeTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeTrafficPacketClient) UpdateOneID(id uint64) *UpgradeTrafficPacketUpdateOne {
	mutation := newUpgradeTrafficPacketMutation(c.config, OpUpdateOne, withUpgradeTrafficPacketID(id))
	return &UpgradeTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeTrafficPacket.
func (c *UpgradeTrafficPacketClient) Delete() *UpgradeTrafficPacketDelete {
	mutation := newUpgradeTrafficPacketMutation(c.config, OpDelete)
	return &UpgradeTrafficPacketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeTrafficPacketClient) DeleteOne(utp *UpgradeTrafficPacket) *UpgradeTrafficPacketDeleteOne {
	return c.DeleteOneID(utp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeTrafficPacketClient) DeleteOneID(id uint64) *UpgradeTrafficPacketDeleteOne {
	builder := c.Delete().Where(upgradetrafficpacket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeTrafficPacketDeleteOne{builder}
}

// Query returns a query builder for UpgradeTrafficPacket.
func (c *UpgradeTrafficPacketClient) Query() *UpgradeTrafficPacketQuery {
	return &UpgradeTrafficPacketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeTrafficPacket},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeTrafficPacket entity by its id.
func (c *UpgradeTrafficPacketClient) Get(ctx context.Context, id uint64) (*UpgradeTrafficPacket, error) {
	return c.Query().Where(upgradetrafficpacket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeTrafficPacketClient) GetX(ctx context.Context, id uint64) *UpgradeTrafficPacket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeTrafficPacketClient) Hooks() []Hook {
	return c.hooks.UpgradeTrafficPacket
}

// Interceptors returns the client interceptors.
func (c *UpgradeTrafficPacketClient) Interceptors() []Interceptor {
	return c.inters.UpgradeTrafficPacket
}

func (c *UpgradeTrafficPacketClient) mutate(ctx context.Context, m *UpgradeTrafficPacketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeTrafficPacketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeTrafficPacketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeTrafficPacketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeTrafficPacketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeTrafficPacket mutation op: %q", m.Op())
	}
}

// UpgradeUrlClient is a client for the UpgradeUrl schema.
type UpgradeUrlClient struct {
	config
}

// NewUpgradeUrlClient returns a client for the UpgradeUrl from the given config.
func NewUpgradeUrlClient(c config) *UpgradeUrlClient {
	return &UpgradeUrlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeurl.Hooks(f(g(h())))`.
func (c *UpgradeUrlClient) Use(hooks ...Hook) {
	c.hooks.UpgradeUrl = append(c.hooks.UpgradeUrl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeurl.Intercept(f(g(h())))`.
func (c *UpgradeUrlClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeUrl = append(c.inters.UpgradeUrl, interceptors...)
}

// Create returns a builder for creating a UpgradeUrl entity.
func (c *UpgradeUrlClient) Create() *UpgradeUrlCreate {
	mutation := newUpgradeUrlMutation(c.config, OpCreate)
	return &UpgradeUrlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeUrl entities.
func (c *UpgradeUrlClient) CreateBulk(builders ...*UpgradeUrlCreate) *UpgradeUrlCreateBulk {
	return &UpgradeUrlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeUrlClient) MapCreateBulk(slice any, setFunc func(*UpgradeUrlCreate, int)) *UpgradeUrlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeUrlCreateBulk{err: fmt.Errorf("calling to UpgradeUrlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeUrlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeUrlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeUrl.
func (c *UpgradeUrlClient) Update() *UpgradeUrlUpdate {
	mutation := newUpgradeUrlMutation(c.config, OpUpdate)
	return &UpgradeUrlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeUrlClient) UpdateOne(uu *UpgradeUrl) *UpgradeUrlUpdateOne {
	mutation := newUpgradeUrlMutation(c.config, OpUpdateOne, withUpgradeUrl(uu))
	return &UpgradeUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeUrlClient) UpdateOneID(id int) *UpgradeUrlUpdateOne {
	mutation := newUpgradeUrlMutation(c.config, OpUpdateOne, withUpgradeUrlID(id))
	return &UpgradeUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeUrl.
func (c *UpgradeUrlClient) Delete() *UpgradeUrlDelete {
	mutation := newUpgradeUrlMutation(c.config, OpDelete)
	return &UpgradeUrlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeUrlClient) DeleteOne(uu *UpgradeUrl) *UpgradeUrlDeleteOne {
	return c.DeleteOneID(uu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeUrlClient) DeleteOneID(id int) *UpgradeUrlDeleteOne {
	builder := c.Delete().Where(upgradeurl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeUrlDeleteOne{builder}
}

// Query returns a query builder for UpgradeUrl.
func (c *UpgradeUrlClient) Query() *UpgradeUrlQuery {
	return &UpgradeUrlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeUrl},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeUrl entity by its id.
func (c *UpgradeUrlClient) Get(ctx context.Context, id int) (*UpgradeUrl, error) {
	return c.Query().Where(upgradeurl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeUrlClient) GetX(ctx context.Context, id int) *UpgradeUrl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeUrlClient) Hooks() []Hook {
	return c.hooks.UpgradeUrl
}

// Interceptors returns the client interceptors.
func (c *UpgradeUrlClient) Interceptors() []Interceptor {
	return c.inters.UpgradeUrl
}

func (c *UpgradeUrlClient) mutate(ctx context.Context, m *UpgradeUrlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeUrlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeUrlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeUrlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeUrlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeUrl mutation op: %q", m.Op())
	}
}

// UpgradeUrlUpgradeStrategyClient is a client for the UpgradeUrlUpgradeStrategy schema.
type UpgradeUrlUpgradeStrategyClient struct {
	config
}

// NewUpgradeUrlUpgradeStrategyClient returns a client for the UpgradeUrlUpgradeStrategy from the given config.
func NewUpgradeUrlUpgradeStrategyClient(c config) *UpgradeUrlUpgradeStrategyClient {
	return &UpgradeUrlUpgradeStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeurlupgradestrategy.Hooks(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeUrlUpgradeStrategy = append(c.hooks.UpgradeUrlUpgradeStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeurlupgradestrategy.Intercept(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeUrlUpgradeStrategy = append(c.inters.UpgradeUrlUpgradeStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeUrlUpgradeStrategy entity.
func (c *UpgradeUrlUpgradeStrategyClient) Create() *UpgradeUrlUpgradeStrategyCreate {
	mutation := newUpgradeUrlUpgradeStrategyMutation(c.config, OpCreate)
	return &UpgradeUrlUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeUrlUpgradeStrategy entities.
func (c *UpgradeUrlUpgradeStrategyClient) CreateBulk(builders ...*UpgradeUrlUpgradeStrategyCreate) *UpgradeUrlUpgradeStrategyCreateBulk {
	return &UpgradeUrlUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeUrlUpgradeStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeUrlUpgradeStrategyCreate, int)) *UpgradeUrlUpgradeStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeUrlUpgradeStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeUrlUpgradeStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeUrlUpgradeStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeUrlUpgradeStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeUrlUpgradeStrategy.
func (c *UpgradeUrlUpgradeStrategyClient) Update() *UpgradeUrlUpgradeStrategyUpdate {
	mutation := newUpgradeUrlUpgradeStrategyMutation(c.config, OpUpdate)
	return &UpgradeUrlUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeUrlUpgradeStrategyClient) UpdateOne(uuus *UpgradeUrlUpgradeStrategy) *UpgradeUrlUpgradeStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategy(uuus))
	return &UpgradeUrlUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeUrlUpgradeStrategyClient) UpdateOneID(id int) *UpgradeUrlUpgradeStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategyID(id))
	return &UpgradeUrlUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeUrlUpgradeStrategy.
func (c *UpgradeUrlUpgradeStrategyClient) Delete() *UpgradeUrlUpgradeStrategyDelete {
	mutation := newUpgradeUrlUpgradeStrategyMutation(c.config, OpDelete)
	return &UpgradeUrlUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeUrlUpgradeStrategyClient) DeleteOne(uuus *UpgradeUrlUpgradeStrategy) *UpgradeUrlUpgradeStrategyDeleteOne {
	return c.DeleteOneID(uuus.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeUrlUpgradeStrategyClient) DeleteOneID(id int) *UpgradeUrlUpgradeStrategyDeleteOne {
	builder := c.Delete().Where(upgradeurlupgradestrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeUrlUpgradeStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeUrlUpgradeStrategy.
func (c *UpgradeUrlUpgradeStrategyClient) Query() *UpgradeUrlUpgradeStrategyQuery {
	return &UpgradeUrlUpgradeStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeUrlUpgradeStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeUrlUpgradeStrategy entity by its id.
func (c *UpgradeUrlUpgradeStrategyClient) Get(ctx context.Context, id int) (*UpgradeUrlUpgradeStrategy, error) {
	return c.Query().Where(upgradeurlupgradestrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeUrlUpgradeStrategyClient) GetX(ctx context.Context, id int) *UpgradeUrlUpgradeStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeUrlUpgradeStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeUrlUpgradeStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeUrlUpgradeStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeUrlUpgradeStrategy
}

func (c *UpgradeUrlUpgradeStrategyClient) mutate(ctx context.Context, m *UpgradeUrlUpgradeStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeUrlUpgradeStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeUrlUpgradeStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeUrlUpgradeStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeUrlUpgradeStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeUrlUpgradeStrategy mutation op: %q", m.Op())
	}
}

// UpgradeUrlUpgradeStrategyFlowLimitStrategyClient is a client for the UpgradeUrlUpgradeStrategyFlowLimitStrategy schema.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyClient struct {
	config
}

// NewUpgradeUrlUpgradeStrategyFlowLimitStrategyClient returns a client for the UpgradeUrlUpgradeStrategyFlowLimitStrategy from the given config.
func NewUpgradeUrlUpgradeStrategyFlowLimitStrategyClient(c config) *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient {
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeurlupgradestrategyflowlimitstrategy.Hooks(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeUrlUpgradeStrategyFlowLimitStrategy = append(c.hooks.UpgradeUrlUpgradeStrategyFlowLimitStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeurlupgradestrategyflowlimitstrategy.Intercept(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeUrlUpgradeStrategyFlowLimitStrategy = append(c.inters.UpgradeUrlUpgradeStrategyFlowLimitStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeUrlUpgradeStrategyFlowLimitStrategy entity.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Create() *UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate {
	mutation := newUpgradeUrlUpgradeStrategyFlowLimitStrategyMutation(c.config, OpCreate)
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeUrlUpgradeStrategyFlowLimitStrategy entities.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) CreateBulk(builders ...*UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate) *UpgradeUrlUpgradeStrategyFlowLimitStrategyCreateBulk {
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate, int)) *UpgradeUrlUpgradeStrategyFlowLimitStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeUrlUpgradeStrategyFlowLimitStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeUrlUpgradeStrategyFlowLimitStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeUrlUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Update() *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	mutation := newUpgradeUrlUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdate)
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) UpdateOne(uuusfls *UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategyFlowLimitStrategy(uuusfls))
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) UpdateOneID(id int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyFlowLimitStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategyFlowLimitStrategyID(id))
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeUrlUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Delete() *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete {
	mutation := newUpgradeUrlUpgradeStrategyFlowLimitStrategyMutation(c.config, OpDelete)
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) DeleteOne(uuusfls *UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne {
	return c.DeleteOneID(uuusfls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) DeleteOneID(id int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne {
	builder := c.Delete().Where(upgradeurlupgradestrategyflowlimitstrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeUrlUpgradeStrategyFlowLimitStrategy.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Query() *UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery {
	return &UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeUrlUpgradeStrategyFlowLimitStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeUrlUpgradeStrategyFlowLimitStrategy entity by its id.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Get(ctx context.Context, id int) (*UpgradeUrlUpgradeStrategyFlowLimitStrategy, error) {
	return c.Query().Where(upgradeurlupgradestrategyflowlimitstrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) GetX(ctx context.Context, id int) *UpgradeUrlUpgradeStrategyFlowLimitStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeUrlUpgradeStrategyFlowLimitStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeUrlUpgradeStrategyFlowLimitStrategy
}

func (c *UpgradeUrlUpgradeStrategyFlowLimitStrategyClient) mutate(ctx context.Context, m *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeUrlUpgradeStrategyFlowLimitStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeUrlUpgradeStrategyFlowLimitStrategy mutation op: %q", m.Op())
	}
}

// UpgradeUrlUpgradeStrategyGrayStrategyClient is a client for the UpgradeUrlUpgradeStrategyGrayStrategy schema.
type UpgradeUrlUpgradeStrategyGrayStrategyClient struct {
	config
}

// NewUpgradeUrlUpgradeStrategyGrayStrategyClient returns a client for the UpgradeUrlUpgradeStrategyGrayStrategy from the given config.
func NewUpgradeUrlUpgradeStrategyGrayStrategyClient(c config) *UpgradeUrlUpgradeStrategyGrayStrategyClient {
	return &UpgradeUrlUpgradeStrategyGrayStrategyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeurlupgradestrategygraystrategy.Hooks(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Use(hooks ...Hook) {
	c.hooks.UpgradeUrlUpgradeStrategyGrayStrategy = append(c.hooks.UpgradeUrlUpgradeStrategyGrayStrategy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeurlupgradestrategygraystrategy.Intercept(f(g(h())))`.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeUrlUpgradeStrategyGrayStrategy = append(c.inters.UpgradeUrlUpgradeStrategyGrayStrategy, interceptors...)
}

// Create returns a builder for creating a UpgradeUrlUpgradeStrategyGrayStrategy entity.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Create() *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	mutation := newUpgradeUrlUpgradeStrategyGrayStrategyMutation(c.config, OpCreate)
	return &UpgradeUrlUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeUrlUpgradeStrategyGrayStrategy entities.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) CreateBulk(builders ...*UpgradeUrlUpgradeStrategyGrayStrategyCreate) *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk {
	return &UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) MapCreateBulk(slice any, setFunc func(*UpgradeUrlUpgradeStrategyGrayStrategyCreate, int)) *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk{err: fmt.Errorf("calling to UpgradeUrlUpgradeStrategyGrayStrategyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeUrlUpgradeStrategyGrayStrategyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeUrlUpgradeStrategyGrayStrategy.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Update() *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	mutation := newUpgradeUrlUpgradeStrategyGrayStrategyMutation(c.config, OpUpdate)
	return &UpgradeUrlUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) UpdateOne(uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategyGrayStrategy(uuusgs))
	return &UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) UpdateOneID(id int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	mutation := newUpgradeUrlUpgradeStrategyGrayStrategyMutation(c.config, OpUpdateOne, withUpgradeUrlUpgradeStrategyGrayStrategyID(id))
	return &UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeUrlUpgradeStrategyGrayStrategy.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Delete() *UpgradeUrlUpgradeStrategyGrayStrategyDelete {
	mutation := newUpgradeUrlUpgradeStrategyGrayStrategyMutation(c.config, OpDelete)
	return &UpgradeUrlUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) DeleteOne(uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) *UpgradeUrlUpgradeStrategyGrayStrategyDeleteOne {
	return c.DeleteOneID(uuusgs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) DeleteOneID(id int) *UpgradeUrlUpgradeStrategyGrayStrategyDeleteOne {
	builder := c.Delete().Where(upgradeurlupgradestrategygraystrategy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeUrlUpgradeStrategyGrayStrategyDeleteOne{builder}
}

// Query returns a query builder for UpgradeUrlUpgradeStrategyGrayStrategy.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Query() *UpgradeUrlUpgradeStrategyGrayStrategyQuery {
	return &UpgradeUrlUpgradeStrategyGrayStrategyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeUrlUpgradeStrategyGrayStrategy},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeUrlUpgradeStrategyGrayStrategy entity by its id.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Get(ctx context.Context, id int) (*UpgradeUrlUpgradeStrategyGrayStrategy, error) {
	return c.Query().Where(upgradeurlupgradestrategygraystrategy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) GetX(ctx context.Context, id int) *UpgradeUrlUpgradeStrategyGrayStrategy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Hooks() []Hook {
	return c.hooks.UpgradeUrlUpgradeStrategyGrayStrategy
}

// Interceptors returns the client interceptors.
func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) Interceptors() []Interceptor {
	return c.inters.UpgradeUrlUpgradeStrategyGrayStrategy
}

func (c *UpgradeUrlUpgradeStrategyGrayStrategyClient) mutate(ctx context.Context, m *UpgradeUrlUpgradeStrategyGrayStrategyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeUrlUpgradeStrategyGrayStrategyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeUrlUpgradeStrategyGrayStrategyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeUrlUpgradeStrategyGrayStrategyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeUrlUpgradeStrategyGrayStrategy mutation op: %q", m.Op())
	}
}

// UpgradeUrlVersionClient is a client for the UpgradeUrlVersion schema.
type UpgradeUrlVersionClient struct {
	config
}

// NewUpgradeUrlVersionClient returns a client for the UpgradeUrlVersion from the given config.
func NewUpgradeUrlVersionClient(c config) *UpgradeUrlVersionClient {
	return &UpgradeUrlVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upgradeurlversion.Hooks(f(g(h())))`.
func (c *UpgradeUrlVersionClient) Use(hooks ...Hook) {
	c.hooks.UpgradeUrlVersion = append(c.hooks.UpgradeUrlVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upgradeurlversion.Intercept(f(g(h())))`.
func (c *UpgradeUrlVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpgradeUrlVersion = append(c.inters.UpgradeUrlVersion, interceptors...)
}

// Create returns a builder for creating a UpgradeUrlVersion entity.
func (c *UpgradeUrlVersionClient) Create() *UpgradeUrlVersionCreate {
	mutation := newUpgradeUrlVersionMutation(c.config, OpCreate)
	return &UpgradeUrlVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpgradeUrlVersion entities.
func (c *UpgradeUrlVersionClient) CreateBulk(builders ...*UpgradeUrlVersionCreate) *UpgradeUrlVersionCreateBulk {
	return &UpgradeUrlVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpgradeUrlVersionClient) MapCreateBulk(slice any, setFunc func(*UpgradeUrlVersionCreate, int)) *UpgradeUrlVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpgradeUrlVersionCreateBulk{err: fmt.Errorf("calling to UpgradeUrlVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpgradeUrlVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpgradeUrlVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpgradeUrlVersion.
func (c *UpgradeUrlVersionClient) Update() *UpgradeUrlVersionUpdate {
	mutation := newUpgradeUrlVersionMutation(c.config, OpUpdate)
	return &UpgradeUrlVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpgradeUrlVersionClient) UpdateOne(uuv *UpgradeUrlVersion) *UpgradeUrlVersionUpdateOne {
	mutation := newUpgradeUrlVersionMutation(c.config, OpUpdateOne, withUpgradeUrlVersion(uuv))
	return &UpgradeUrlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpgradeUrlVersionClient) UpdateOneID(id int) *UpgradeUrlVersionUpdateOne {
	mutation := newUpgradeUrlVersionMutation(c.config, OpUpdateOne, withUpgradeUrlVersionID(id))
	return &UpgradeUrlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpgradeUrlVersion.
func (c *UpgradeUrlVersionClient) Delete() *UpgradeUrlVersionDelete {
	mutation := newUpgradeUrlVersionMutation(c.config, OpDelete)
	return &UpgradeUrlVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpgradeUrlVersionClient) DeleteOne(uuv *UpgradeUrlVersion) *UpgradeUrlVersionDeleteOne {
	return c.DeleteOneID(uuv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpgradeUrlVersionClient) DeleteOneID(id int) *UpgradeUrlVersionDeleteOne {
	builder := c.Delete().Where(upgradeurlversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpgradeUrlVersionDeleteOne{builder}
}

// Query returns a query builder for UpgradeUrlVersion.
func (c *UpgradeUrlVersionClient) Query() *UpgradeUrlVersionQuery {
	return &UpgradeUrlVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpgradeUrlVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a UpgradeUrlVersion entity by its id.
func (c *UpgradeUrlVersionClient) Get(ctx context.Context, id int) (*UpgradeUrlVersion, error) {
	return c.Query().Where(upgradeurlversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpgradeUrlVersionClient) GetX(ctx context.Context, id int) *UpgradeUrlVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpgradeUrlVersionClient) Hooks() []Hook {
	return c.hooks.UpgradeUrlVersion
}

// Interceptors returns the client interceptors.
func (c *UpgradeUrlVersionClient) Interceptors() []Interceptor {
	return c.inters.UpgradeUrlVersion
}

func (c *UpgradeUrlVersionClient) mutate(ctx context.Context, m *UpgradeUrlVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpgradeUrlVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpgradeUrlVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpgradeUrlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpgradeUrlVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpgradeUrlVersion mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		FmsCloudFile, SysUser, UpgradeApk, UpgradeApkUpgradeStrategy,
		UpgradeApkUpgradeStrategyFlowLimitStrategy,
		UpgradeApkUpgradeStrategyGrayStrategy, UpgradeApkVersion,
		UpgradeAppDownloadReportLog, UpgradeCompanyIncome, UpgradeCompanyTrafficPacket,
		UpgradeConfiguration, UpgradeConfigurationUpgradeStrategy,
		UpgradeConfigurationUpgradeStrategyFlowLimitStrategy,
		UpgradeConfigurationUpgradeStrategyGrayStrategy, UpgradeConfigurationVersion,
		UpgradeDev, UpgradeDevGroup, UpgradeDevGroupRelation, UpgradeDevModel,
		UpgradeElectron, UpgradeElectronUpgradeStrategy,
		UpgradeElectronUpgradeStrategyFlowLimitStrategy,
		UpgradeElectronUpgradeStrategyGrayStrategy, UpgradeElectronVersion,
		UpgradeFile, UpgradeFileUpgradeStrategy,
		UpgradeFileUpgradeStrategyFlowLimitStrategy,
		UpgradeFileUpgradeStrategyGrayStrategy, UpgradeFileVersion, UpgradeTauri,
		UpgradeTauriUpgradeStrategy, UpgradeTauriUpgradeStrategyFlowLimitStrategy,
		UpgradeTauriUpgradeStrategyGrayStrategy, UpgradeTauriVersion,
		UpgradeTrafficPacket, UpgradeUrl, UpgradeUrlUpgradeStrategy,
		UpgradeUrlUpgradeStrategyFlowLimitStrategy,
		UpgradeUrlUpgradeStrategyGrayStrategy, UpgradeUrlVersion []ent.Hook
	}
	inters struct {
		FmsCloudFile, SysUser, UpgradeApk, UpgradeApkUpgradeStrategy,
		UpgradeApkUpgradeStrategyFlowLimitStrategy,
		UpgradeApkUpgradeStrategyGrayStrategy, UpgradeApkVersion,
		UpgradeAppDownloadReportLog, UpgradeCompanyIncome, UpgradeCompanyTrafficPacket,
		UpgradeConfiguration, UpgradeConfigurationUpgradeStrategy,
		UpgradeConfigurationUpgradeStrategyFlowLimitStrategy,
		UpgradeConfigurationUpgradeStrategyGrayStrategy, UpgradeConfigurationVersion,
		UpgradeDev, UpgradeDevGroup, UpgradeDevGroupRelation, UpgradeDevModel,
		UpgradeElectron, UpgradeElectronUpgradeStrategy,
		UpgradeElectronUpgradeStrategyFlowLimitStrategy,
		UpgradeElectronUpgradeStrategyGrayStrategy, UpgradeElectronVersion,
		UpgradeFile, UpgradeFileUpgradeStrategy,
		UpgradeFileUpgradeStrategyFlowLimitStrategy,
		UpgradeFileUpgradeStrategyGrayStrategy, UpgradeFileVersion, UpgradeTauri,
		UpgradeTauriUpgradeStrategy, UpgradeTauriUpgradeStrategyFlowLimitStrategy,
		UpgradeTauriUpgradeStrategyGrayStrategy, UpgradeTauriVersion,
		UpgradeTrafficPacket, UpgradeUrl, UpgradeUrlUpgradeStrategy,
		UpgradeUrlUpgradeStrategyFlowLimitStrategy,
		UpgradeUrlUpgradeStrategyGrayStrategy, UpgradeUrlVersion []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
