// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyUpdate is the builder for updating UpgradeTauriUpgradeStrategy entities.
type UpgradeTauriUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyUpdate builder.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.Where(ps...)
	return utusu
}

// SetCompanyID sets the "company_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetCompanyID()
	utusu.mutation.SetCompanyID(i)
	return utusu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetCompanyID(*i)
	}
	return utusu
}

// AddCompanyID adds i to the "company_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddCompanyID(i)
	return utusu
}

// SetEnable sets the "enable" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetEnable()
	utusu.mutation.SetEnable(i)
	return utusu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetEnable(*i)
	}
	return utusu
}

// AddEnable adds i to the "enable" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddEnable(i)
	return utusu
}

// SetName sets the "name" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetName(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetName(s)
	return utusu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetName(*s)
	}
	return utusu
}

// SetDescription sets the "description" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetDescription(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetDescription(s)
	return utusu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetDescription(*s)
	}
	return utusu
}

// ClearDescription clears the value of the "description" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) ClearDescription() *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ClearDescription()
	return utusu
}

// SetTauriID sets the "tauri_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetTauriID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetTauriID()
	utusu.mutation.SetTauriID(i)
	return utusu
}

// SetNillableTauriID sets the "tauri_id" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableTauriID(i *int) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetTauriID(*i)
	}
	return utusu
}

// AddTauriID adds i to the "tauri_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddTauriID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddTauriID(i)
	return utusu
}

// SetTauriVersionID sets the "tauri_version_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetTauriVersionID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetTauriVersionID()
	utusu.mutation.SetTauriVersionID(i)
	return utusu
}

// SetNillableTauriVersionID sets the "tauri_version_id" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableTauriVersionID(i *int) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetTauriVersionID(*i)
	}
	return utusu
}

// AddTauriVersionID adds i to the "tauri_version_id" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddTauriVersionID(i int) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddTauriVersionID(i)
	return utusu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetBeginDatetime(t)
	return utusu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	if t != nil {
		utusu.SetBeginDatetime(*t)
	}
	return utusu
}

// SetEndDatetime sets the "end_datetime" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetEndDatetime(t)
	return utusu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	if t != nil {
		utusu.SetEndDatetime(*t)
	}
	return utusu
}

// SetUpgradeType sets the "upgrade_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetUpgradeType()
	utusu.mutation.SetUpgradeType(i)
	return utusu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetUpgradeType(*i)
	}
	return utusu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddUpgradeType(i)
	return utusu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetPromptUpgradeContent(s)
	return utusu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetPromptUpgradeContent(*s)
	}
	return utusu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ClearPromptUpgradeContent()
	return utusu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetUpgradeDevType()
	utusu.mutation.SetUpgradeDevType(i)
	return utusu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetUpgradeDevType(*i)
	}
	return utusu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddUpgradeDevType(i)
	return utusu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetUpgradeDevData(s)
	return utusu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetUpgradeDevData(*s)
	}
	return utusu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetUpgradeVersionType()
	utusu.mutation.SetUpgradeVersionType(i)
	return utusu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetUpgradeVersionType(*i)
	}
	return utusu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddUpgradeVersionType(i)
	return utusu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetUpgradeVersionData(s)
	return utusu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetUpgradeVersionData(*s)
	}
	return utusu
}

// SetIsGray sets the "is_gray" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetIsGray()
	utusu.mutation.SetIsGray(i)
	return utusu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetIsGray(*i)
	}
	return utusu
}

// AddIsGray adds i to the "is_gray" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddIsGray(i)
	return utusu
}

// SetGrayData sets the "gray_data" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetGrayData(s)
	return utusu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetGrayData(*s)
	}
	return utusu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetIsFlowLimit()
	utusu.mutation.SetIsFlowLimit(i)
	return utusu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetIsFlowLimit(*i)
	}
	return utusu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddIsFlowLimit(i)
	return utusu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetFlowLimitData(s)
	return utusu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeTauriUpgradeStrategyUpdate {
	if s != nil {
		utusu.SetFlowLimitData(*s)
	}
	return utusu
}

// SetIsDel sets the "is_del" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ResetIsDel()
	utusu.mutation.SetIsDel(i)
	return utusu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyUpdate {
	if i != nil {
		utusu.SetIsDel(*i)
	}
	return utusu
}

// AddIsDel adds i to the "is_del" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.AddIsDel(i)
	return utusu
}

// SetCreateAt sets the "create_at" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetCreateAt(t)
	return utusu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	if t != nil {
		utusu.SetCreateAt(*t)
	}
	return utusu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) ClearCreateAt() *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ClearCreateAt()
	return utusu
}

// SetUpdateAt sets the "update_at" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.SetUpdateAt(t)
	return utusu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyUpdate {
	if t != nil {
		utusu.SetUpdateAt(*t)
	}
	return utusu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeTauriUpgradeStrategyUpdate {
	utusu.mutation.ClearUpdateAt()
	return utusu
}

// Mutation returns the UpgradeTauriUpgradeStrategyMutation object of the builder.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) Mutation() *UpgradeTauriUpgradeStrategyMutation {
	return utusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utusu.sqlSave, utusu.mutation, utusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := utusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := utusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusu *UpgradeTauriUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := utusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusu *UpgradeTauriUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategy.Table, upgradetauriupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategy.FieldID, field.TypeInt))
	if ps := utusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusu.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.Name(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := utusu.mutation.Description(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if utusu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := utusu.mutation.TauriID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.AddedTauriID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.TauriVersionID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriVersionID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.AddedTauriVersionID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldTauriVersionID, field.TypeInt, value)
	}
	if value, ok := utusu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := utusu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := utusu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if utusu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := utusu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := utusu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := utusu.mutation.IsGray(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.GrayData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := utusu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := utusu.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utusu.mutation.done = true
	return n, nil
}

// UpgradeTauriUpgradeStrategyUpdateOne is the builder for updating a single UpgradeTauriUpgradeStrategy entity.
type UpgradeTauriUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetCompanyID()
	utusuo.mutation.SetCompanyID(i)
	return utusuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetCompanyID(*i)
	}
	return utusuo
}

// AddCompanyID adds i to the "company_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddCompanyID(i)
	return utusuo
}

// SetEnable sets the "enable" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetEnable()
	utusuo.mutation.SetEnable(i)
	return utusuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetEnable(*i)
	}
	return utusuo
}

// AddEnable adds i to the "enable" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddEnable(i)
	return utusuo
}

// SetName sets the "name" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetName(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetName(s)
	return utusuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetName(*s)
	}
	return utusuo
}

// SetDescription sets the "description" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetDescription(s)
	return utusuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetDescription(*s)
	}
	return utusuo
}

// ClearDescription clears the value of the "description" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) ClearDescription() *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ClearDescription()
	return utusuo
}

// SetTauriID sets the "tauri_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetTauriID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetTauriID()
	utusuo.mutation.SetTauriID(i)
	return utusuo
}

// SetNillableTauriID sets the "tauri_id" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableTauriID(i *int) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetTauriID(*i)
	}
	return utusuo
}

// AddTauriID adds i to the "tauri_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddTauriID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddTauriID(i)
	return utusuo
}

// SetTauriVersionID sets the "tauri_version_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetTauriVersionID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetTauriVersionID()
	utusuo.mutation.SetTauriVersionID(i)
	return utusuo
}

// SetNillableTauriVersionID sets the "tauri_version_id" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableTauriVersionID(i *int) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetTauriVersionID(*i)
	}
	return utusuo
}

// AddTauriVersionID adds i to the "tauri_version_id" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddTauriVersionID(i int) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddTauriVersionID(i)
	return utusuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetBeginDatetime(t)
	return utusuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	if t != nil {
		utusuo.SetBeginDatetime(*t)
	}
	return utusuo
}

// SetEndDatetime sets the "end_datetime" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetEndDatetime(t)
	return utusuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	if t != nil {
		utusuo.SetEndDatetime(*t)
	}
	return utusuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetUpgradeType()
	utusuo.mutation.SetUpgradeType(i)
	return utusuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetUpgradeType(*i)
	}
	return utusuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddUpgradeType(i)
	return utusuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetPromptUpgradeContent(s)
	return utusuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetPromptUpgradeContent(*s)
	}
	return utusuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ClearPromptUpgradeContent()
	return utusuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetUpgradeDevType()
	utusuo.mutation.SetUpgradeDevType(i)
	return utusuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetUpgradeDevType(*i)
	}
	return utusuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddUpgradeDevType(i)
	return utusuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetUpgradeDevData(s)
	return utusuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetUpgradeDevData(*s)
	}
	return utusuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetUpgradeVersionType()
	utusuo.mutation.SetUpgradeVersionType(i)
	return utusuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetUpgradeVersionType(*i)
	}
	return utusuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddUpgradeVersionType(i)
	return utusuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetUpgradeVersionData(s)
	return utusuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetUpgradeVersionData(*s)
	}
	return utusuo
}

// SetIsGray sets the "is_gray" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetIsGray()
	utusuo.mutation.SetIsGray(i)
	return utusuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetIsGray(*i)
	}
	return utusuo
}

// AddIsGray adds i to the "is_gray" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddIsGray(i)
	return utusuo
}

// SetGrayData sets the "gray_data" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetGrayData(s)
	return utusuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetGrayData(*s)
	}
	return utusuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetIsFlowLimit()
	utusuo.mutation.SetIsFlowLimit(i)
	return utusuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetIsFlowLimit(*i)
	}
	return utusuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddIsFlowLimit(i)
	return utusuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetFlowLimitData(s)
	return utusuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeTauriUpgradeStrategyUpdateOne {
	if s != nil {
		utusuo.SetFlowLimitData(*s)
	}
	return utusuo
}

// SetIsDel sets the "is_del" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ResetIsDel()
	utusuo.mutation.SetIsDel(i)
	return utusuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	if i != nil {
		utusuo.SetIsDel(*i)
	}
	return utusuo
}

// AddIsDel adds i to the "is_del" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.AddIsDel(i)
	return utusuo
}

// SetCreateAt sets the "create_at" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetCreateAt(t)
	return utusuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	if t != nil {
		utusuo.SetCreateAt(*t)
	}
	return utusuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ClearCreateAt()
	return utusuo
}

// SetUpdateAt sets the "update_at" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.SetUpdateAt(t)
	return utusuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyUpdateOne {
	if t != nil {
		utusuo.SetUpdateAt(*t)
	}
	return utusuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.ClearUpdateAt()
	return utusuo
}

// Mutation returns the UpgradeTauriUpgradeStrategyMutation object of the builder.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) Mutation() *UpgradeTauriUpgradeStrategyMutation {
	return utusuo.mutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyUpdate builder.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.mutation.Where(ps...)
	return utusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeTauriUpgradeStrategyUpdateOne {
	utusuo.fields = append([]string{field}, fields...)
	return utusuo
}

// Save executes the query and returns the updated UpgradeTauriUpgradeStrategy entity.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeTauriUpgradeStrategy, error) {
	return withHooks(ctx, utusuo.sqlSave, utusuo.mutation, utusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeTauriUpgradeStrategy {
	node, err := utusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := utusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := utusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusuo *UpgradeTauriUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTauriUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategy.Table, upgradetauriupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategy.FieldID, field.TypeInt))
	id, ok := utusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTauriUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauriupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradetauriupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetauriupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.Name(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := utusuo.mutation.Description(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if utusuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := utusuo.mutation.TauriID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.AddedTauriID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.TauriVersionID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriVersionID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.AddedTauriVersionID(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldTauriVersionID, field.TypeInt, value)
	}
	if value, ok := utusuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := utusuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := utusuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if utusuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := utusuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := utusuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := utusuo.mutation.IsGray(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.GrayData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := utusuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := utusuo.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTauriUpgradeStrategy{config: utusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utusuo.mutation.done = true
	return _node, nil
}
