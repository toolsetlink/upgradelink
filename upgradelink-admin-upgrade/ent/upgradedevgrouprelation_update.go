// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedevgrouprelation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevGroupRelationUpdate is the builder for updating UpgradeDevGroupRelation entities.
type UpgradeDevGroupRelationUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeDevGroupRelationMutation
}

// Where appends a list predicates to the UpgradeDevGroupRelationUpdate builder.
func (udgru *UpgradeDevGroupRelationUpdate) Where(ps ...predicate.UpgradeDevGroupRelation) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.Where(ps...)
	return udgru
}

// SetDevID sets the "dev_id" field.
func (udgru *UpgradeDevGroupRelationUpdate) SetDevID(i int) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.ResetDevID()
	udgru.mutation.SetDevID(i)
	return udgru
}

// SetNillableDevID sets the "dev_id" field if the given value is not nil.
func (udgru *UpgradeDevGroupRelationUpdate) SetNillableDevID(i *int) *UpgradeDevGroupRelationUpdate {
	if i != nil {
		udgru.SetDevID(*i)
	}
	return udgru
}

// AddDevID adds i to the "dev_id" field.
func (udgru *UpgradeDevGroupRelationUpdate) AddDevID(i int) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.AddDevID(i)
	return udgru
}

// SetDevGroupID sets the "dev_group_id" field.
func (udgru *UpgradeDevGroupRelationUpdate) SetDevGroupID(i int) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.ResetDevGroupID()
	udgru.mutation.SetDevGroupID(i)
	return udgru
}

// SetNillableDevGroupID sets the "dev_group_id" field if the given value is not nil.
func (udgru *UpgradeDevGroupRelationUpdate) SetNillableDevGroupID(i *int) *UpgradeDevGroupRelationUpdate {
	if i != nil {
		udgru.SetDevGroupID(*i)
	}
	return udgru
}

// AddDevGroupID adds i to the "dev_group_id" field.
func (udgru *UpgradeDevGroupRelationUpdate) AddDevGroupID(i int) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.AddDevGroupID(i)
	return udgru
}

// SetIsDel sets the "is_del" field.
func (udgru *UpgradeDevGroupRelationUpdate) SetIsDel(i int32) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.ResetIsDel()
	udgru.mutation.SetIsDel(i)
	return udgru
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udgru *UpgradeDevGroupRelationUpdate) SetNillableIsDel(i *int32) *UpgradeDevGroupRelationUpdate {
	if i != nil {
		udgru.SetIsDel(*i)
	}
	return udgru
}

// AddIsDel adds i to the "is_del" field.
func (udgru *UpgradeDevGroupRelationUpdate) AddIsDel(i int32) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.AddIsDel(i)
	return udgru
}

// SetCreateAt sets the "create_at" field.
func (udgru *UpgradeDevGroupRelationUpdate) SetCreateAt(t time.Time) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.SetCreateAt(t)
	return udgru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udgru *UpgradeDevGroupRelationUpdate) SetNillableCreateAt(t *time.Time) *UpgradeDevGroupRelationUpdate {
	if t != nil {
		udgru.SetCreateAt(*t)
	}
	return udgru
}

// ClearCreateAt clears the value of the "create_at" field.
func (udgru *UpgradeDevGroupRelationUpdate) ClearCreateAt() *UpgradeDevGroupRelationUpdate {
	udgru.mutation.ClearCreateAt()
	return udgru
}

// SetUpdateAt sets the "update_at" field.
func (udgru *UpgradeDevGroupRelationUpdate) SetUpdateAt(t time.Time) *UpgradeDevGroupRelationUpdate {
	udgru.mutation.SetUpdateAt(t)
	return udgru
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udgru *UpgradeDevGroupRelationUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeDevGroupRelationUpdate {
	if t != nil {
		udgru.SetUpdateAt(*t)
	}
	return udgru
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udgru *UpgradeDevGroupRelationUpdate) ClearUpdateAt() *UpgradeDevGroupRelationUpdate {
	udgru.mutation.ClearUpdateAt()
	return udgru
}

// Mutation returns the UpgradeDevGroupRelationMutation object of the builder.
func (udgru *UpgradeDevGroupRelationUpdate) Mutation() *UpgradeDevGroupRelationMutation {
	return udgru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udgru *UpgradeDevGroupRelationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udgru.sqlSave, udgru.mutation, udgru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udgru *UpgradeDevGroupRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := udgru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udgru *UpgradeDevGroupRelationUpdate) Exec(ctx context.Context) error {
	_, err := udgru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udgru *UpgradeDevGroupRelationUpdate) ExecX(ctx context.Context) {
	if err := udgru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udgru *UpgradeDevGroupRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevgrouprelation.Table, upgradedevgrouprelation.Columns, sqlgraph.NewFieldSpec(upgradedevgrouprelation.FieldID, field.TypeInt))
	if ps := udgru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udgru.mutation.DevID(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldDevID, field.TypeInt, value)
	}
	if value, ok := udgru.mutation.AddedDevID(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldDevID, field.TypeInt, value)
	}
	if value, ok := udgru.mutation.DevGroupID(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldDevGroupID, field.TypeInt, value)
	}
	if value, ok := udgru.mutation.AddedDevGroupID(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldDevGroupID, field.TypeInt, value)
	}
	if value, ok := udgru.mutation.IsDel(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgru.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgru.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldCreateAt, field.TypeTime, value)
	}
	if udgru.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevgrouprelation.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udgru.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldUpdateAt, field.TypeTime, value)
	}
	if udgru.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevgrouprelation.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udgru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevgrouprelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udgru.mutation.done = true
	return n, nil
}

// UpgradeDevGroupRelationUpdateOne is the builder for updating a single UpgradeDevGroupRelation entity.
type UpgradeDevGroupRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeDevGroupRelationMutation
}

// SetDevID sets the "dev_id" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetDevID(i int) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.ResetDevID()
	udgruo.mutation.SetDevID(i)
	return udgruo
}

// SetNillableDevID sets the "dev_id" field if the given value is not nil.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetNillableDevID(i *int) *UpgradeDevGroupRelationUpdateOne {
	if i != nil {
		udgruo.SetDevID(*i)
	}
	return udgruo
}

// AddDevID adds i to the "dev_id" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) AddDevID(i int) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.AddDevID(i)
	return udgruo
}

// SetDevGroupID sets the "dev_group_id" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetDevGroupID(i int) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.ResetDevGroupID()
	udgruo.mutation.SetDevGroupID(i)
	return udgruo
}

// SetNillableDevGroupID sets the "dev_group_id" field if the given value is not nil.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetNillableDevGroupID(i *int) *UpgradeDevGroupRelationUpdateOne {
	if i != nil {
		udgruo.SetDevGroupID(*i)
	}
	return udgruo
}

// AddDevGroupID adds i to the "dev_group_id" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) AddDevGroupID(i int) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.AddDevGroupID(i)
	return udgruo
}

// SetIsDel sets the "is_del" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetIsDel(i int32) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.ResetIsDel()
	udgruo.mutation.SetIsDel(i)
	return udgruo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetNillableIsDel(i *int32) *UpgradeDevGroupRelationUpdateOne {
	if i != nil {
		udgruo.SetIsDel(*i)
	}
	return udgruo
}

// AddIsDel adds i to the "is_del" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) AddIsDel(i int32) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.AddIsDel(i)
	return udgruo
}

// SetCreateAt sets the "create_at" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetCreateAt(t time.Time) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.SetCreateAt(t)
	return udgruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeDevGroupRelationUpdateOne {
	if t != nil {
		udgruo.SetCreateAt(*t)
	}
	return udgruo
}

// ClearCreateAt clears the value of the "create_at" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) ClearCreateAt() *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.ClearCreateAt()
	return udgruo
}

// SetUpdateAt sets the "update_at" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetUpdateAt(t time.Time) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.SetUpdateAt(t)
	return udgruo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeDevGroupRelationUpdateOne {
	if t != nil {
		udgruo.SetUpdateAt(*t)
	}
	return udgruo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udgruo *UpgradeDevGroupRelationUpdateOne) ClearUpdateAt() *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.ClearUpdateAt()
	return udgruo
}

// Mutation returns the UpgradeDevGroupRelationMutation object of the builder.
func (udgruo *UpgradeDevGroupRelationUpdateOne) Mutation() *UpgradeDevGroupRelationMutation {
	return udgruo.mutation
}

// Where appends a list predicates to the UpgradeDevGroupRelationUpdate builder.
func (udgruo *UpgradeDevGroupRelationUpdateOne) Where(ps ...predicate.UpgradeDevGroupRelation) *UpgradeDevGroupRelationUpdateOne {
	udgruo.mutation.Where(ps...)
	return udgruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udgruo *UpgradeDevGroupRelationUpdateOne) Select(field string, fields ...string) *UpgradeDevGroupRelationUpdateOne {
	udgruo.fields = append([]string{field}, fields...)
	return udgruo
}

// Save executes the query and returns the updated UpgradeDevGroupRelation entity.
func (udgruo *UpgradeDevGroupRelationUpdateOne) Save(ctx context.Context) (*UpgradeDevGroupRelation, error) {
	return withHooks(ctx, udgruo.sqlSave, udgruo.mutation, udgruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udgruo *UpgradeDevGroupRelationUpdateOne) SaveX(ctx context.Context) *UpgradeDevGroupRelation {
	node, err := udgruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udgruo *UpgradeDevGroupRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := udgruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udgruo *UpgradeDevGroupRelationUpdateOne) ExecX(ctx context.Context) {
	if err := udgruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udgruo *UpgradeDevGroupRelationUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeDevGroupRelation, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevgrouprelation.Table, upgradedevgrouprelation.Columns, sqlgraph.NewFieldSpec(upgradedevgrouprelation.FieldID, field.TypeInt))
	id, ok := udgruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeDevGroupRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udgruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradedevgrouprelation.FieldID)
		for _, f := range fields {
			if !upgradedevgrouprelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradedevgrouprelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udgruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udgruo.mutation.DevID(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldDevID, field.TypeInt, value)
	}
	if value, ok := udgruo.mutation.AddedDevID(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldDevID, field.TypeInt, value)
	}
	if value, ok := udgruo.mutation.DevGroupID(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldDevGroupID, field.TypeInt, value)
	}
	if value, ok := udgruo.mutation.AddedDevGroupID(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldDevGroupID, field.TypeInt, value)
	}
	if value, ok := udgruo.mutation.IsDel(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgruo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevgrouprelation.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udgruo.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldCreateAt, field.TypeTime, value)
	}
	if udgruo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevgrouprelation.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udgruo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevgrouprelation.FieldUpdateAt, field.TypeTime, value)
	}
	if udgruo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevgrouprelation.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeDevGroupRelation{config: udgruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udgruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevgrouprelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	udgruo.mutation.done = true
	return _node, nil
}
