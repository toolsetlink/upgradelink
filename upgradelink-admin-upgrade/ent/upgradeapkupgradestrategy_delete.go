// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeapkupgradestrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyDelete is the builder for deleting a UpgradeApkUpgradeStrategy entity.
type UpgradeApkUpgradeStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyDelete builder.
func (uausd *UpgradeApkUpgradeStrategyDelete) Where(ps ...predicate.UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyDelete {
	uausd.mutation.Where(ps...)
	return uausd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uausd *UpgradeApkUpgradeStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uausd.sqlExec, uausd.mutation, uausd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uausd *UpgradeApkUpgradeStrategyDelete) ExecX(ctx context.Context) int {
	n, err := uausd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uausd *UpgradeApkUpgradeStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeapkupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradeapkupgradestrategy.FieldID, field.TypeInt))
	if ps := uausd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uausd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uausd.mutation.done = true
	return affected, err
}

// UpgradeApkUpgradeStrategyDeleteOne is the builder for deleting a single UpgradeApkUpgradeStrategy entity.
type UpgradeApkUpgradeStrategyDeleteOne struct {
	uausd *UpgradeApkUpgradeStrategyDelete
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyDelete builder.
func (uausdo *UpgradeApkUpgradeStrategyDeleteOne) Where(ps ...predicate.UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyDeleteOne {
	uausdo.uausd.mutation.Where(ps...)
	return uausdo
}

// Exec executes the deletion query.
func (uausdo *UpgradeApkUpgradeStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := uausdo.uausd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeapkupgradestrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uausdo *UpgradeApkUpgradeStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := uausdo.Exec(ctx); err != nil {
		panic(err)
	}
}
