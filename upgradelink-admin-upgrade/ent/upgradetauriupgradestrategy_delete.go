// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyDelete is the builder for deleting a UpgradeTauriUpgradeStrategy entity.
type UpgradeTauriUpgradeStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyDelete builder.
func (utusd *UpgradeTauriUpgradeStrategyDelete) Where(ps ...predicate.UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyDelete {
	utusd.mutation.Where(ps...)
	return utusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utusd *UpgradeTauriUpgradeStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utusd.sqlExec, utusd.mutation, utusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utusd *UpgradeTauriUpgradeStrategyDelete) ExecX(ctx context.Context) int {
	n, err := utusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utusd *UpgradeTauriUpgradeStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradetauriupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradetauriupgradestrategy.FieldID, field.TypeInt))
	if ps := utusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utusd.mutation.done = true
	return affected, err
}

// UpgradeTauriUpgradeStrategyDeleteOne is the builder for deleting a single UpgradeTauriUpgradeStrategy entity.
type UpgradeTauriUpgradeStrategyDeleteOne struct {
	utusd *UpgradeTauriUpgradeStrategyDelete
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyDelete builder.
func (utusdo *UpgradeTauriUpgradeStrategyDeleteOne) Where(ps ...predicate.UpgradeTauriUpgradeStrategy) *UpgradeTauriUpgradeStrategyDeleteOne {
	utusdo.utusd.mutation.Where(ps...)
	return utusdo
}

// Exec executes the deletion query.
func (utusdo *UpgradeTauriUpgradeStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := utusdo.utusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradetauriupgradestrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utusdo *UpgradeTauriUpgradeStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := utusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
