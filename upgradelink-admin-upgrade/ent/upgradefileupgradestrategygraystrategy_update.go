// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeFileUpgradeStrategyGrayStrategy entities.
type UpgradeFileUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyGrayStrategyUpdate builder.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeFileUpgradeStrategyGrayStrategy) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.Where(ps...)
	return ufusgsu
}

// SetEnable sets the "enable" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.ResetEnable()
	ufusgsu.mutation.SetEnable(i)
	return ufusgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ufusgsu.SetEnable(*i)
	}
	return ufusgsu
}

// AddEnable adds i to the "enable" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.AddEnable(i)
	return ufusgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.SetBeginDatetime(t)
	return ufusgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ufusgsu.SetBeginDatetime(*t)
	}
	return ufusgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.SetEndDatetime(t)
	return ufusgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ufusgsu.SetEndDatetime(*t)
	}
	return ufusgsu
}

// SetLimit sets the "limit" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.ResetLimit()
	ufusgsu.mutation.SetLimit(i)
	return ufusgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ufusgsu.SetLimit(*i)
	}
	return ufusgsu
}

// AddLimit adds i to the "limit" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.AddLimit(i)
	return ufusgsu
}

// SetIsDel sets the "is_del" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.ResetIsDel()
	ufusgsu.mutation.SetIsDel(i)
	return ufusgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ufusgsu.SetIsDel(*i)
	}
	return ufusgsu
}

// AddIsDel adds i to the "is_del" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.AddIsDel(i)
	return ufusgsu
}

// SetCreateAt sets the "create_at" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.SetCreateAt(t)
	return ufusgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ufusgsu.SetCreateAt(*t)
	}
	return ufusgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.ClearCreateAt()
	return ufusgsu
}

// SetUpdateAt sets the "update_at" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.SetUpdateAt(t)
	return ufusgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ufusgsu.SetUpdateAt(*t)
	}
	return ufusgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeFileUpgradeStrategyGrayStrategyUpdate {
	ufusgsu.mutation.ClearUpdateAt()
	return ufusgsu
}

// Mutation returns the UpgradeFileUpgradeStrategyGrayStrategyMutation object of the builder.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeFileUpgradeStrategyGrayStrategyMutation {
	return ufusgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufusgsu.sqlSave, ufusgsu.mutation, ufusgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ufusgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ufusgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := ufusgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusgsu *UpgradeFileUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategygraystrategy.Table, upgradefileupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := ufusgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusgsu.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ufusgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ufusgsu.mutation.Limit(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufusgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufusgsu.mutation.done = true
	return n, nil
}

// UpgradeFileUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeFileUpgradeStrategyGrayStrategy entity.
type UpgradeFileUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.ResetEnable()
	ufusgsuo.mutation.SetEnable(i)
	return ufusgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ufusgsuo.SetEnable(*i)
	}
	return ufusgsuo
}

// AddEnable adds i to the "enable" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.AddEnable(i)
	return ufusgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.SetBeginDatetime(t)
	return ufusgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ufusgsuo.SetBeginDatetime(*t)
	}
	return ufusgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.SetEndDatetime(t)
	return ufusgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ufusgsuo.SetEndDatetime(*t)
	}
	return ufusgsuo
}

// SetLimit sets the "limit" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.ResetLimit()
	ufusgsuo.mutation.SetLimit(i)
	return ufusgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ufusgsuo.SetLimit(*i)
	}
	return ufusgsuo
}

// AddLimit adds i to the "limit" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.AddLimit(i)
	return ufusgsuo
}

// SetIsDel sets the "is_del" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.ResetIsDel()
	ufusgsuo.mutation.SetIsDel(i)
	return ufusgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ufusgsuo.SetIsDel(*i)
	}
	return ufusgsuo
}

// AddIsDel adds i to the "is_del" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.AddIsDel(i)
	return ufusgsuo
}

// SetCreateAt sets the "create_at" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.SetCreateAt(t)
	return ufusgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ufusgsuo.SetCreateAt(*t)
	}
	return ufusgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.ClearCreateAt()
	return ufusgsuo
}

// SetUpdateAt sets the "update_at" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.SetUpdateAt(t)
	return ufusgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ufusgsuo.SetUpdateAt(*t)
	}
	return ufusgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.ClearUpdateAt()
	return ufusgsuo
}

// Mutation returns the UpgradeFileUpgradeStrategyGrayStrategyMutation object of the builder.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeFileUpgradeStrategyGrayStrategyMutation {
	return ufusgsuo.mutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyGrayStrategyUpdate builder.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeFileUpgradeStrategyGrayStrategy) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.mutation.Where(ps...)
	return ufusgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne {
	ufusgsuo.fields = append([]string{field}, fields...)
	return ufusgsuo
}

// Save executes the query and returns the updated UpgradeFileUpgradeStrategyGrayStrategy entity.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeFileUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, ufusgsuo.sqlSave, ufusgsuo.mutation, ufusgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeFileUpgradeStrategyGrayStrategy {
	node, err := ufusgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ufusgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ufusgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusgsuo *UpgradeFileUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeFileUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategygraystrategy.Table, upgradefileupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := ufusgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeFileUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufusgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradefileupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradefileupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradefileupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufusgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ufusgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ufusgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeFileUpgradeStrategyGrayStrategy{config: ufusgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufusgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufusgsuo.mutation.done = true
	return _node, nil
}
