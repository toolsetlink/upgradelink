// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedevgrouprelation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevGroupRelationDelete is the builder for deleting a UpgradeDevGroupRelation entity.
type UpgradeDevGroupRelationDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeDevGroupRelationMutation
}

// Where appends a list predicates to the UpgradeDevGroupRelationDelete builder.
func (udgrd *UpgradeDevGroupRelationDelete) Where(ps ...predicate.UpgradeDevGroupRelation) *UpgradeDevGroupRelationDelete {
	udgrd.mutation.Where(ps...)
	return udgrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (udgrd *UpgradeDevGroupRelationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, udgrd.sqlExec, udgrd.mutation, udgrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (udgrd *UpgradeDevGroupRelationDelete) ExecX(ctx context.Context) int {
	n, err := udgrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (udgrd *UpgradeDevGroupRelationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradedevgrouprelation.Table, sqlgraph.NewFieldSpec(upgradedevgrouprelation.FieldID, field.TypeInt))
	if ps := udgrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, udgrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	udgrd.mutation.done = true
	return affected, err
}

// UpgradeDevGroupRelationDeleteOne is the builder for deleting a single UpgradeDevGroupRelation entity.
type UpgradeDevGroupRelationDeleteOne struct {
	udgrd *UpgradeDevGroupRelationDelete
}

// Where appends a list predicates to the UpgradeDevGroupRelationDelete builder.
func (udgrdo *UpgradeDevGroupRelationDeleteOne) Where(ps ...predicate.UpgradeDevGroupRelation) *UpgradeDevGroupRelationDeleteOne {
	udgrdo.udgrd.mutation.Where(ps...)
	return udgrdo
}

// Exec executes the deletion query.
func (udgrdo *UpgradeDevGroupRelationDeleteOne) Exec(ctx context.Context) error {
	n, err := udgrdo.udgrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradedevgrouprelation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (udgrdo *UpgradeDevGroupRelationDeleteOne) ExecX(ctx context.Context) {
	if err := udgrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
