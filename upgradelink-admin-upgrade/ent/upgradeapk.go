// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradeapk"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeApk is the model entity for the UpgradeApk schema.
type UpgradeApk struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 安卓应用唯一标识
	Key string `json:"key,omitempty"`
	// 安卓应用名称
	Name string `json:"name,omitempty"`
	// 安卓应用包名
	PackageName string `json:"package_name,omitempty"`
	// 描述信息
	Description string `json:"description,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeApk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeapk.FieldID, upgradeapk.FieldCompanyID, upgradeapk.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeapk.FieldKey, upgradeapk.FieldName, upgradeapk.FieldPackageName, upgradeapk.FieldDescription:
			values[i] = new(sql.NullString)
		case upgradeapk.FieldCreateAt, upgradeapk.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeApk fields.
func (ua *UpgradeApk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeapk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case upgradeapk.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				ua.CompanyID = int(value.Int64)
			}
		case upgradeapk.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ua.Key = value.String
			}
		case upgradeapk.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ua.Name = value.String
			}
		case upgradeapk.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				ua.PackageName = value.String
			}
		case upgradeapk.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ua.Description = value.String
			}
		case upgradeapk.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				ua.IsDel = int32(value.Int64)
			}
		case upgradeapk.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ua.CreateAt = value.Time
			}
		case upgradeapk.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ua.UpdateAt = value.Time
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeApk.
// This includes values selected through modifiers, order, etc.
func (ua *UpgradeApk) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeApk.
// Note that you need to call UpgradeApk.Unwrap() before calling this method if this UpgradeApk
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UpgradeApk) Update() *UpgradeApkUpdateOne {
	return NewUpgradeApkClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UpgradeApk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UpgradeApk) Unwrap() *UpgradeApk {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeApk is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UpgradeApk) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeApk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ua.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ua.Name)
	builder.WriteString(", ")
	builder.WriteString("package_name=")
	builder.WriteString(ua.PackageName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ua.Description)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ua.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ua.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeApks is a parsable slice of UpgradeApk.
type UpgradeApks []*UpgradeApk
