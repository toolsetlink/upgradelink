// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradetrafficpacket"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeTrafficPacket is the model entity for the UpgradeTrafficPacket schema.
type UpgradeTrafficPacket struct {
	config `json:"-"`
	// ID of the ent.
	// 流量包ID
	ID uint64 `json:"id,omitempty"`
	// 流量包名称
	Name string `json:"name,omitempty"`
	// 流量包唯一标识
	Key string `json:"key,omitempty"`
	// 流量大小(单位:字节)
	Size int `json:"size,omitempty"`
	// 价格
	Price int32 `json:"price,omitempty"`
	// 有效期(天)
	ValidDays int32 `json:"valid_days,omitempty"`
	// 状态: 1=有效, 2=已兑换
	Status int32 `json:"status,omitempty"`
	// 描述
	Description string `json:"description,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeTrafficPacket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradetrafficpacket.FieldID, upgradetrafficpacket.FieldSize, upgradetrafficpacket.FieldPrice, upgradetrafficpacket.FieldValidDays, upgradetrafficpacket.FieldStatus:
			values[i] = new(sql.NullInt64)
		case upgradetrafficpacket.FieldName, upgradetrafficpacket.FieldKey, upgradetrafficpacket.FieldDescription:
			values[i] = new(sql.NullString)
		case upgradetrafficpacket.FieldCreateAt, upgradetrafficpacket.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeTrafficPacket fields.
func (utp *UpgradeTrafficPacket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradetrafficpacket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			utp.ID = uint64(value.Int64)
		case upgradetrafficpacket.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				utp.Name = value.String
			}
		case upgradetrafficpacket.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				utp.Key = value.String
			}
		case upgradetrafficpacket.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				utp.Size = int(value.Int64)
			}
		case upgradetrafficpacket.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				utp.Price = int32(value.Int64)
			}
		case upgradetrafficpacket.FieldValidDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field valid_days", values[i])
			} else if value.Valid {
				utp.ValidDays = int32(value.Int64)
			}
		case upgradetrafficpacket.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				utp.Status = int32(value.Int64)
			}
		case upgradetrafficpacket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				utp.Description = value.String
			}
		case upgradetrafficpacket.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				utp.CreateAt = value.Time
			}
		case upgradetrafficpacket.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				utp.UpdateAt = value.Time
			}
		default:
			utp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeTrafficPacket.
// This includes values selected through modifiers, order, etc.
func (utp *UpgradeTrafficPacket) Value(name string) (ent.Value, error) {
	return utp.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeTrafficPacket.
// Note that you need to call UpgradeTrafficPacket.Unwrap() before calling this method if this UpgradeTrafficPacket
// was returned from a transaction, and the transaction was committed or rolled back.
func (utp *UpgradeTrafficPacket) Update() *UpgradeTrafficPacketUpdateOne {
	return NewUpgradeTrafficPacketClient(utp.config).UpdateOne(utp)
}

// Unwrap unwraps the UpgradeTrafficPacket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utp *UpgradeTrafficPacket) Unwrap() *UpgradeTrafficPacket {
	_tx, ok := utp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeTrafficPacket is not a transactional entity")
	}
	utp.config.driver = _tx.drv
	return utp
}

// String implements the fmt.Stringer.
func (utp *UpgradeTrafficPacket) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeTrafficPacket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utp.ID))
	builder.WriteString("name=")
	builder.WriteString(utp.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(utp.Key)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", utp.Size))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", utp.Price))
	builder.WriteString(", ")
	builder.WriteString("valid_days=")
	builder.WriteString(fmt.Sprintf("%v", utp.ValidDays))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", utp.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(utp.Description)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(utp.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(utp.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeTrafficPackets is a parsable slice of UpgradeTrafficPacket.
type UpgradeTrafficPackets []*UpgradeTrafficPacket
