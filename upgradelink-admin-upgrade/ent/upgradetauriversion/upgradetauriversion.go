// Code generated by ent, DO NOT EDIT.

package upgradetauriversion

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradetauriversion type in the database.
	Label = "upgrade_tauri_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldTauriID holds the string denoting the tauri_id field in the database.
	FieldTauriID = "tauri_id"
	// FieldCloudFileID holds the string denoting the cloud_file_id field in the database.
	FieldCloudFileID = "cloud_file_id"
	// FieldInstallCloudFileID holds the string denoting the install_cloud_file_id field in the database.
	FieldInstallCloudFileID = "install_cloud_file_id"
	// FieldVersionName holds the string denoting the version_name field in the database.
	FieldVersionName = "version_name"
	// FieldVersionCode holds the string denoting the version_code field in the database.
	FieldVersionCode = "version_code"
	// FieldTarget holds the string denoting the target field in the database.
	FieldTarget = "target"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradetauriversion in the database.
	Table = "upgrade_tauri_version"
)

// Columns holds all SQL columns for upgradetauriversion fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldTauriID,
	FieldCloudFileID,
	FieldInstallCloudFileID,
	FieldVersionName,
	FieldVersionCode,
	FieldTarget,
	FieldArch,
	FieldSignature,
	FieldDescription,
	FieldIsDel,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeTauriVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByTauriID orders the results by the tauri_id field.
func ByTauriID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTauriID, opts...).ToFunc()
}

// ByCloudFileID orders the results by the cloud_file_id field.
func ByCloudFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudFileID, opts...).ToFunc()
}

// ByInstallCloudFileID orders the results by the install_cloud_file_id field.
func ByInstallCloudFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallCloudFileID, opts...).ToFunc()
}

// ByVersionName orders the results by the version_name field.
func ByVersionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionName, opts...).ToFunc()
}

// ByVersionCode orders the results by the version_code field.
func ByVersionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionCode, opts...).ToFunc()
}

// ByTarget orders the results by the target field.
func ByTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTarget, opts...).ToFunc()
}

// ByArch orders the results by the arch field.
func ByArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArch, opts...).ToFunc()
}

// BySignature orders the results by the signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
