// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyCreate is the builder for creating a UpgradeTauriUpgradeStrategy entity.
type UpgradeTauriUpgradeStrategyCreate struct {
	config
	mutation *UpgradeTauriUpgradeStrategyMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetCompanyID(i int) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetCompanyID(i)
	return utusc
}

// SetEnable sets the "enable" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetEnable(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetEnable(i)
	return utusc
}

// SetName sets the "name" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetName(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetName(s)
	return utusc
}

// SetDescription sets the "description" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetDescription(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetDescription(s)
	return utusc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetNillableDescription(s *string) *UpgradeTauriUpgradeStrategyCreate {
	if s != nil {
		utusc.SetDescription(*s)
	}
	return utusc
}

// SetTauriID sets the "tauri_id" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetTauriID(i int) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetTauriID(i)
	return utusc
}

// SetTauriVersionID sets the "tauri_version_id" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetTauriVersionID(i int) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetTauriVersionID(i)
	return utusc
}

// SetBeginDatetime sets the "begin_datetime" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetBeginDatetime(t time.Time) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetBeginDatetime(t)
	return utusc
}

// SetEndDatetime sets the "end_datetime" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetEndDatetime(t time.Time) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetEndDatetime(t)
	return utusc
}

// SetUpgradeType sets the "upgrade_type" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpgradeType(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpgradeType(i)
	return utusc
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetPromptUpgradeContent(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetPromptUpgradeContent(s)
	return utusc
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetNillablePromptUpgradeContent(s *string) *UpgradeTauriUpgradeStrategyCreate {
	if s != nil {
		utusc.SetPromptUpgradeContent(*s)
	}
	return utusc
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpgradeDevType(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpgradeDevType(i)
	return utusc
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpgradeDevData(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpgradeDevData(s)
	return utusc
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpgradeVersionType(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpgradeVersionType(i)
	return utusc
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpgradeVersionData(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpgradeVersionData(s)
	return utusc
}

// SetIsGray sets the "is_gray" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetIsGray(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetIsGray(i)
	return utusc
}

// SetGrayData sets the "gray_data" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetGrayData(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetGrayData(s)
	return utusc
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetIsFlowLimit(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetIsFlowLimit(i)
	return utusc
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetFlowLimitData(s string) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetFlowLimitData(s)
	return utusc
}

// SetIsDel sets the "is_del" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetIsDel(i)
	return utusc
}

// SetCreateAt sets the "create_at" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetCreateAt(t)
	return utusc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyCreate {
	if t != nil {
		utusc.SetCreateAt(*t)
	}
	return utusc
}

// SetUpdateAt sets the "update_at" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetUpdateAt(t)
	return utusc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyCreate {
	if t != nil {
		utusc.SetUpdateAt(*t)
	}
	return utusc
}

// SetID sets the "id" field.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SetID(i int) *UpgradeTauriUpgradeStrategyCreate {
	utusc.mutation.SetID(i)
	return utusc
}

// Mutation returns the UpgradeTauriUpgradeStrategyMutation object of the builder.
func (utusc *UpgradeTauriUpgradeStrategyCreate) Mutation() *UpgradeTauriUpgradeStrategyMutation {
	return utusc.mutation
}

// Save creates the UpgradeTauriUpgradeStrategy in the database.
func (utusc *UpgradeTauriUpgradeStrategyCreate) Save(ctx context.Context) (*UpgradeTauriUpgradeStrategy, error) {
	return withHooks(ctx, utusc.sqlSave, utusc.mutation, utusc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utusc *UpgradeTauriUpgradeStrategyCreate) SaveX(ctx context.Context) *UpgradeTauriUpgradeStrategy {
	v, err := utusc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utusc *UpgradeTauriUpgradeStrategyCreate) Exec(ctx context.Context) error {
	_, err := utusc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusc *UpgradeTauriUpgradeStrategyCreate) ExecX(ctx context.Context) {
	if err := utusc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utusc *UpgradeTauriUpgradeStrategyCreate) check() error {
	if _, ok := utusc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.company_id"`)}
	}
	if _, ok := utusc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.enable"`)}
	}
	if _, ok := utusc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.name"`)}
	}
	if _, ok := utusc.mutation.TauriID(); !ok {
		return &ValidationError{Name: "tauri_id", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.tauri_id"`)}
	}
	if _, ok := utusc.mutation.TauriVersionID(); !ok {
		return &ValidationError{Name: "tauri_version_id", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.tauri_version_id"`)}
	}
	if _, ok := utusc.mutation.BeginDatetime(); !ok {
		return &ValidationError{Name: "begin_datetime", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.begin_datetime"`)}
	}
	if _, ok := utusc.mutation.EndDatetime(); !ok {
		return &ValidationError{Name: "end_datetime", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.end_datetime"`)}
	}
	if _, ok := utusc.mutation.UpgradeType(); !ok {
		return &ValidationError{Name: "upgrade_type", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.upgrade_type"`)}
	}
	if _, ok := utusc.mutation.UpgradeDevType(); !ok {
		return &ValidationError{Name: "upgrade_dev_type", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.upgrade_dev_type"`)}
	}
	if _, ok := utusc.mutation.UpgradeDevData(); !ok {
		return &ValidationError{Name: "upgrade_dev_data", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.upgrade_dev_data"`)}
	}
	if _, ok := utusc.mutation.UpgradeVersionType(); !ok {
		return &ValidationError{Name: "upgrade_version_type", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.upgrade_version_type"`)}
	}
	if _, ok := utusc.mutation.UpgradeVersionData(); !ok {
		return &ValidationError{Name: "upgrade_version_data", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.upgrade_version_data"`)}
	}
	if _, ok := utusc.mutation.IsGray(); !ok {
		return &ValidationError{Name: "is_gray", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.is_gray"`)}
	}
	if _, ok := utusc.mutation.GrayData(); !ok {
		return &ValidationError{Name: "gray_data", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.gray_data"`)}
	}
	if _, ok := utusc.mutation.IsFlowLimit(); !ok {
		return &ValidationError{Name: "is_flow_limit", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.is_flow_limit"`)}
	}
	if _, ok := utusc.mutation.FlowLimitData(); !ok {
		return &ValidationError{Name: "flow_limit_data", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.flow_limit_data"`)}
	}
	if _, ok := utusc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeTauriUpgradeStrategy.is_del"`)}
	}
	return nil
}

func (utusc *UpgradeTauriUpgradeStrategyCreate) sqlSave(ctx context.Context) (*UpgradeTauriUpgradeStrategy, error) {
	if err := utusc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utusc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utusc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	utusc.mutation.id = &_node.ID
	utusc.mutation.done = true
	return _node, nil
}

func (utusc *UpgradeTauriUpgradeStrategyCreate) createSpec() (*UpgradeTauriUpgradeStrategy, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeTauriUpgradeStrategy{config: utusc.config}
		_spec = sqlgraph.NewCreateSpec(upgradetauriupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradetauriupgradestrategy.FieldID, field.TypeInt))
	)
	if id, ok := utusc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utusc.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := utusc.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEnable, field.TypeInt32, value)
		_node.Enable = value
	}
	if value, ok := utusc.mutation.Name(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := utusc.mutation.Description(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := utusc.mutation.TauriID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriID, field.TypeInt, value)
		_node.TauriID = value
	}
	if value, ok := utusc.mutation.TauriVersionID(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldTauriVersionID, field.TypeInt, value)
		_node.TauriVersionID = value
	}
	if value, ok := utusc.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
		_node.BeginDatetime = value
	}
	if value, ok := utusc.mutation.EndDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldEndDatetime, field.TypeTime, value)
		_node.EndDatetime = value
	}
	if value, ok := utusc.mutation.UpgradeType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
		_node.UpgradeType = value
	}
	if value, ok := utusc.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
		_node.PromptUpgradeContent = value
	}
	if value, ok := utusc.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
		_node.UpgradeDevType = value
	}
	if value, ok := utusc.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
		_node.UpgradeDevData = value
	}
	if value, ok := utusc.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
		_node.UpgradeVersionType = value
	}
	if value, ok := utusc.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
		_node.UpgradeVersionData = value
	}
	if value, ok := utusc.mutation.IsGray(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsGray, field.TypeInt32, value)
		_node.IsGray = value
	}
	if value, ok := utusc.mutation.GrayData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldGrayData, field.TypeString, value)
		_node.GrayData = value
	}
	if value, ok := utusc.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
		_node.IsFlowLimit = value
	}
	if value, ok := utusc.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldFlowLimitData, field.TypeString, value)
		_node.FlowLimitData = value
	}
	if value, ok := utusc.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := utusc.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := utusc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategy.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeTauriUpgradeStrategyCreateBulk is the builder for creating many UpgradeTauriUpgradeStrategy entities in bulk.
type UpgradeTauriUpgradeStrategyCreateBulk struct {
	config
	err      error
	builders []*UpgradeTauriUpgradeStrategyCreate
}

// Save creates the UpgradeTauriUpgradeStrategy entities in the database.
func (utuscb *UpgradeTauriUpgradeStrategyCreateBulk) Save(ctx context.Context) ([]*UpgradeTauriUpgradeStrategy, error) {
	if utuscb.err != nil {
		return nil, utuscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utuscb.builders))
	nodes := make([]*UpgradeTauriUpgradeStrategy, len(utuscb.builders))
	mutators := make([]Mutator, len(utuscb.builders))
	for i := range utuscb.builders {
		func(i int, root context.Context) {
			builder := utuscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeTauriUpgradeStrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utuscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utuscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utuscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utuscb *UpgradeTauriUpgradeStrategyCreateBulk) SaveX(ctx context.Context) []*UpgradeTauriUpgradeStrategy {
	v, err := utuscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utuscb *UpgradeTauriUpgradeStrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := utuscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuscb *UpgradeTauriUpgradeStrategyCreateBulk) ExecX(ctx context.Context) {
	if err := utuscb.Exec(ctx); err != nil {
		panic(err)
	}
}
