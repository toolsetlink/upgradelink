// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradecompanytrafficpacket"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeCompanyTrafficPacket is the model entity for the UpgradeCompanyTrafficPacket schema.
type UpgradeCompanyTrafficPacket struct {
	config `json:"-"`
	// ID of the ent.
	// 记录ID
	ID uint64 `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 流量包ID
	PacketID int `json:"packet_id,omitempty"`
	// 开始时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime time.Time `json:"end_time,omitempty"`
	// 初始流量大小(字节)
	InitialSize int `json:"initial_size,omitempty"`
	// 剩余流量大小(字节)
	RemainingSize int `json:"remaining_size,omitempty"`
	// 状态: 1=有效, 0=已过期, 2=已用完
	Status int32 `json:"status,omitempty"`
	// 兑换流量包时间
	ExchangeTime time.Time `json:"exchange_time,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeCompanyTrafficPacket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradecompanytrafficpacket.FieldID, upgradecompanytrafficpacket.FieldCompanyID, upgradecompanytrafficpacket.FieldPacketID, upgradecompanytrafficpacket.FieldInitialSize, upgradecompanytrafficpacket.FieldRemainingSize, upgradecompanytrafficpacket.FieldStatus:
			values[i] = new(sql.NullInt64)
		case upgradecompanytrafficpacket.FieldStartTime, upgradecompanytrafficpacket.FieldEndTime, upgradecompanytrafficpacket.FieldExchangeTime, upgradecompanytrafficpacket.FieldCreateAt, upgradecompanytrafficpacket.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeCompanyTrafficPacket fields.
func (uctp *UpgradeCompanyTrafficPacket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradecompanytrafficpacket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uctp.ID = uint64(value.Int64)
		case upgradecompanytrafficpacket.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				uctp.CompanyID = int(value.Int64)
			}
		case upgradecompanytrafficpacket.FieldPacketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field packet_id", values[i])
			} else if value.Valid {
				uctp.PacketID = int(value.Int64)
			}
		case upgradecompanytrafficpacket.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				uctp.StartTime = value.Time
			}
		case upgradecompanytrafficpacket.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				uctp.EndTime = value.Time
			}
		case upgradecompanytrafficpacket.FieldInitialSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_size", values[i])
			} else if value.Valid {
				uctp.InitialSize = int(value.Int64)
			}
		case upgradecompanytrafficpacket.FieldRemainingSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining_size", values[i])
			} else if value.Valid {
				uctp.RemainingSize = int(value.Int64)
			}
		case upgradecompanytrafficpacket.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uctp.Status = int32(value.Int64)
			}
		case upgradecompanytrafficpacket.FieldExchangeTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_time", values[i])
			} else if value.Valid {
				uctp.ExchangeTime = value.Time
			}
		case upgradecompanytrafficpacket.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uctp.CreateAt = value.Time
			}
		case upgradecompanytrafficpacket.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uctp.UpdateAt = value.Time
			}
		default:
			uctp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeCompanyTrafficPacket.
// This includes values selected through modifiers, order, etc.
func (uctp *UpgradeCompanyTrafficPacket) Value(name string) (ent.Value, error) {
	return uctp.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeCompanyTrafficPacket.
// Note that you need to call UpgradeCompanyTrafficPacket.Unwrap() before calling this method if this UpgradeCompanyTrafficPacket
// was returned from a transaction, and the transaction was committed or rolled back.
func (uctp *UpgradeCompanyTrafficPacket) Update() *UpgradeCompanyTrafficPacketUpdateOne {
	return NewUpgradeCompanyTrafficPacketClient(uctp.config).UpdateOne(uctp)
}

// Unwrap unwraps the UpgradeCompanyTrafficPacket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uctp *UpgradeCompanyTrafficPacket) Unwrap() *UpgradeCompanyTrafficPacket {
	_tx, ok := uctp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeCompanyTrafficPacket is not a transactional entity")
	}
	uctp.config.driver = _tx.drv
	return uctp
}

// String implements the fmt.Stringer.
func (uctp *UpgradeCompanyTrafficPacket) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeCompanyTrafficPacket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uctp.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", uctp.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("packet_id=")
	builder.WriteString(fmt.Sprintf("%v", uctp.PacketID))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(uctp.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(uctp.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("initial_size=")
	builder.WriteString(fmt.Sprintf("%v", uctp.InitialSize))
	builder.WriteString(", ")
	builder.WriteString("remaining_size=")
	builder.WriteString(fmt.Sprintf("%v", uctp.RemainingSize))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", uctp.Status))
	builder.WriteString(", ")
	builder.WriteString("exchange_time=")
	builder.WriteString(uctp.ExchangeTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(uctp.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(uctp.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeCompanyTrafficPackets is a parsable slice of UpgradeCompanyTrafficPacket.
type UpgradeCompanyTrafficPackets []*UpgradeCompanyTrafficPacket
