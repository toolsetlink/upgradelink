// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradecompanyincome"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeCompanyIncomeUpdate is the builder for updating UpgradeCompanyIncome entities.
type UpgradeCompanyIncomeUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeCompanyIncomeMutation
}

// Where appends a list predicates to the UpgradeCompanyIncomeUpdate builder.
func (uciu *UpgradeCompanyIncomeUpdate) Where(ps ...predicate.UpgradeCompanyIncome) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.Where(ps...)
	return uciu
}

// SetCompanyID sets the "company_id" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetCompanyID(i int) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ResetCompanyID()
	uciu.mutation.SetCompanyID(i)
	return uciu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableCompanyID(i *int) *UpgradeCompanyIncomeUpdate {
	if i != nil {
		uciu.SetCompanyID(*i)
	}
	return uciu
}

// AddCompanyID adds i to the "company_id" field.
func (uciu *UpgradeCompanyIncomeUpdate) AddCompanyID(i int) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.AddCompanyID(i)
	return uciu
}

// SetIncomeType sets the "income_type" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetIncomeType(i int8) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ResetIncomeType()
	uciu.mutation.SetIncomeType(i)
	return uciu
}

// SetNillableIncomeType sets the "income_type" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableIncomeType(i *int8) *UpgradeCompanyIncomeUpdate {
	if i != nil {
		uciu.SetIncomeType(*i)
	}
	return uciu
}

// AddIncomeType adds i to the "income_type" field.
func (uciu *UpgradeCompanyIncomeUpdate) AddIncomeType(i int8) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.AddIncomeType(i)
	return uciu
}

// SetIncomeAmount sets the "income_amount" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetIncomeAmount(i int) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ResetIncomeAmount()
	uciu.mutation.SetIncomeAmount(i)
	return uciu
}

// SetNillableIncomeAmount sets the "income_amount" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableIncomeAmount(i *int) *UpgradeCompanyIncomeUpdate {
	if i != nil {
		uciu.SetIncomeAmount(*i)
	}
	return uciu
}

// AddIncomeAmount adds i to the "income_amount" field.
func (uciu *UpgradeCompanyIncomeUpdate) AddIncomeAmount(i int) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.AddIncomeAmount(i)
	return uciu
}

// SetIncomeTime sets the "income_time" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetIncomeTime(t time.Time) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.SetIncomeTime(t)
	return uciu
}

// SetNillableIncomeTime sets the "income_time" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableIncomeTime(t *time.Time) *UpgradeCompanyIncomeUpdate {
	if t != nil {
		uciu.SetIncomeTime(*t)
	}
	return uciu
}

// ClearIncomeTime clears the value of the "income_time" field.
func (uciu *UpgradeCompanyIncomeUpdate) ClearIncomeTime() *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ClearIncomeTime()
	return uciu
}

// SetRemark sets the "remark" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetRemark(s string) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.SetRemark(s)
	return uciu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableRemark(s *string) *UpgradeCompanyIncomeUpdate {
	if s != nil {
		uciu.SetRemark(*s)
	}
	return uciu
}

// ClearRemark clears the value of the "remark" field.
func (uciu *UpgradeCompanyIncomeUpdate) ClearRemark() *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ClearRemark()
	return uciu
}

// SetStatus sets the "status" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetStatus(i int32) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ResetStatus()
	uciu.mutation.SetStatus(i)
	return uciu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableStatus(i *int32) *UpgradeCompanyIncomeUpdate {
	if i != nil {
		uciu.SetStatus(*i)
	}
	return uciu
}

// AddStatus adds i to the "status" field.
func (uciu *UpgradeCompanyIncomeUpdate) AddStatus(i int32) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.AddStatus(i)
	return uciu
}

// SetIsDel sets the "is_del" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetIsDel(i int32) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ResetIsDel()
	uciu.mutation.SetIsDel(i)
	return uciu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableIsDel(i *int32) *UpgradeCompanyIncomeUpdate {
	if i != nil {
		uciu.SetIsDel(*i)
	}
	return uciu
}

// AddIsDel adds i to the "is_del" field.
func (uciu *UpgradeCompanyIncomeUpdate) AddIsDel(i int32) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.AddIsDel(i)
	return uciu
}

// SetCreateAt sets the "create_at" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetCreateAt(t time.Time) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.SetCreateAt(t)
	return uciu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableCreateAt(t *time.Time) *UpgradeCompanyIncomeUpdate {
	if t != nil {
		uciu.SetCreateAt(*t)
	}
	return uciu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uciu *UpgradeCompanyIncomeUpdate) ClearCreateAt() *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ClearCreateAt()
	return uciu
}

// SetUpdateAt sets the "update_at" field.
func (uciu *UpgradeCompanyIncomeUpdate) SetUpdateAt(t time.Time) *UpgradeCompanyIncomeUpdate {
	uciu.mutation.SetUpdateAt(t)
	return uciu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uciu *UpgradeCompanyIncomeUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyIncomeUpdate {
	if t != nil {
		uciu.SetUpdateAt(*t)
	}
	return uciu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uciu *UpgradeCompanyIncomeUpdate) ClearUpdateAt() *UpgradeCompanyIncomeUpdate {
	uciu.mutation.ClearUpdateAt()
	return uciu
}

// Mutation returns the UpgradeCompanyIncomeMutation object of the builder.
func (uciu *UpgradeCompanyIncomeUpdate) Mutation() *UpgradeCompanyIncomeMutation {
	return uciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uciu *UpgradeCompanyIncomeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uciu.sqlSave, uciu.mutation, uciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uciu *UpgradeCompanyIncomeUpdate) SaveX(ctx context.Context) int {
	affected, err := uciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uciu *UpgradeCompanyIncomeUpdate) Exec(ctx context.Context) error {
	_, err := uciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uciu *UpgradeCompanyIncomeUpdate) ExecX(ctx context.Context) {
	if err := uciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uciu *UpgradeCompanyIncomeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradecompanyincome.Table, upgradecompanyincome.Columns, sqlgraph.NewFieldSpec(upgradecompanyincome.FieldID, field.TypeInt))
	if ps := uciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uciu.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanyincome.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uciu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradecompanyincome.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uciu.mutation.IncomeType(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeType, field.TypeInt8, value)
	}
	if value, ok := uciu.mutation.AddedIncomeType(); ok {
		_spec.AddField(upgradecompanyincome.FieldIncomeType, field.TypeInt8, value)
	}
	if value, ok := uciu.mutation.IncomeAmount(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeAmount, field.TypeInt, value)
	}
	if value, ok := uciu.mutation.AddedIncomeAmount(); ok {
		_spec.AddField(upgradecompanyincome.FieldIncomeAmount, field.TypeInt, value)
	}
	if value, ok := uciu.mutation.IncomeTime(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeTime, field.TypeTime, value)
	}
	if uciu.mutation.IncomeTimeCleared() {
		_spec.ClearField(upgradecompanyincome.FieldIncomeTime, field.TypeTime)
	}
	if value, ok := uciu.mutation.Remark(); ok {
		_spec.SetField(upgradecompanyincome.FieldRemark, field.TypeString, value)
	}
	if uciu.mutation.RemarkCleared() {
		_spec.ClearField(upgradecompanyincome.FieldRemark, field.TypeString)
	}
	if value, ok := uciu.mutation.Status(); ok {
		_spec.SetField(upgradecompanyincome.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uciu.mutation.AddedStatus(); ok {
		_spec.AddField(upgradecompanyincome.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uciu.mutation.IsDel(); ok {
		_spec.SetField(upgradecompanyincome.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uciu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradecompanyincome.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uciu.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldCreateAt, field.TypeTime, value)
	}
	if uciu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradecompanyincome.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uciu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldUpdateAt, field.TypeTime, value)
	}
	if uciu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradecompanyincome.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradecompanyincome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uciu.mutation.done = true
	return n, nil
}

// UpgradeCompanyIncomeUpdateOne is the builder for updating a single UpgradeCompanyIncome entity.
type UpgradeCompanyIncomeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeCompanyIncomeMutation
}

// SetCompanyID sets the "company_id" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetCompanyID(i int) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ResetCompanyID()
	uciuo.mutation.SetCompanyID(i)
	return uciuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableCompanyID(i *int) *UpgradeCompanyIncomeUpdateOne {
	if i != nil {
		uciuo.SetCompanyID(*i)
	}
	return uciuo
}

// AddCompanyID adds i to the "company_id" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) AddCompanyID(i int) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.AddCompanyID(i)
	return uciuo
}

// SetIncomeType sets the "income_type" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetIncomeType(i int8) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ResetIncomeType()
	uciuo.mutation.SetIncomeType(i)
	return uciuo
}

// SetNillableIncomeType sets the "income_type" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableIncomeType(i *int8) *UpgradeCompanyIncomeUpdateOne {
	if i != nil {
		uciuo.SetIncomeType(*i)
	}
	return uciuo
}

// AddIncomeType adds i to the "income_type" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) AddIncomeType(i int8) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.AddIncomeType(i)
	return uciuo
}

// SetIncomeAmount sets the "income_amount" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetIncomeAmount(i int) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ResetIncomeAmount()
	uciuo.mutation.SetIncomeAmount(i)
	return uciuo
}

// SetNillableIncomeAmount sets the "income_amount" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableIncomeAmount(i *int) *UpgradeCompanyIncomeUpdateOne {
	if i != nil {
		uciuo.SetIncomeAmount(*i)
	}
	return uciuo
}

// AddIncomeAmount adds i to the "income_amount" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) AddIncomeAmount(i int) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.AddIncomeAmount(i)
	return uciuo
}

// SetIncomeTime sets the "income_time" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetIncomeTime(t time.Time) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.SetIncomeTime(t)
	return uciuo
}

// SetNillableIncomeTime sets the "income_time" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableIncomeTime(t *time.Time) *UpgradeCompanyIncomeUpdateOne {
	if t != nil {
		uciuo.SetIncomeTime(*t)
	}
	return uciuo
}

// ClearIncomeTime clears the value of the "income_time" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) ClearIncomeTime() *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ClearIncomeTime()
	return uciuo
}

// SetRemark sets the "remark" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetRemark(s string) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.SetRemark(s)
	return uciuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableRemark(s *string) *UpgradeCompanyIncomeUpdateOne {
	if s != nil {
		uciuo.SetRemark(*s)
	}
	return uciuo
}

// ClearRemark clears the value of the "remark" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) ClearRemark() *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ClearRemark()
	return uciuo
}

// SetStatus sets the "status" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetStatus(i int32) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ResetStatus()
	uciuo.mutation.SetStatus(i)
	return uciuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableStatus(i *int32) *UpgradeCompanyIncomeUpdateOne {
	if i != nil {
		uciuo.SetStatus(*i)
	}
	return uciuo
}

// AddStatus adds i to the "status" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) AddStatus(i int32) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.AddStatus(i)
	return uciuo
}

// SetIsDel sets the "is_del" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetIsDel(i int32) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ResetIsDel()
	uciuo.mutation.SetIsDel(i)
	return uciuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableIsDel(i *int32) *UpgradeCompanyIncomeUpdateOne {
	if i != nil {
		uciuo.SetIsDel(*i)
	}
	return uciuo
}

// AddIsDel adds i to the "is_del" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) AddIsDel(i int32) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.AddIsDel(i)
	return uciuo
}

// SetCreateAt sets the "create_at" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetCreateAt(t time.Time) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.SetCreateAt(t)
	return uciuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeCompanyIncomeUpdateOne {
	if t != nil {
		uciuo.SetCreateAt(*t)
	}
	return uciuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) ClearCreateAt() *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ClearCreateAt()
	return uciuo
}

// SetUpdateAt sets the "update_at" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetUpdateAt(t time.Time) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.SetUpdateAt(t)
	return uciuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyIncomeUpdateOne {
	if t != nil {
		uciuo.SetUpdateAt(*t)
	}
	return uciuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uciuo *UpgradeCompanyIncomeUpdateOne) ClearUpdateAt() *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.ClearUpdateAt()
	return uciuo
}

// Mutation returns the UpgradeCompanyIncomeMutation object of the builder.
func (uciuo *UpgradeCompanyIncomeUpdateOne) Mutation() *UpgradeCompanyIncomeMutation {
	return uciuo.mutation
}

// Where appends a list predicates to the UpgradeCompanyIncomeUpdate builder.
func (uciuo *UpgradeCompanyIncomeUpdateOne) Where(ps ...predicate.UpgradeCompanyIncome) *UpgradeCompanyIncomeUpdateOne {
	uciuo.mutation.Where(ps...)
	return uciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uciuo *UpgradeCompanyIncomeUpdateOne) Select(field string, fields ...string) *UpgradeCompanyIncomeUpdateOne {
	uciuo.fields = append([]string{field}, fields...)
	return uciuo
}

// Save executes the query and returns the updated UpgradeCompanyIncome entity.
func (uciuo *UpgradeCompanyIncomeUpdateOne) Save(ctx context.Context) (*UpgradeCompanyIncome, error) {
	return withHooks(ctx, uciuo.sqlSave, uciuo.mutation, uciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uciuo *UpgradeCompanyIncomeUpdateOne) SaveX(ctx context.Context) *UpgradeCompanyIncome {
	node, err := uciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uciuo *UpgradeCompanyIncomeUpdateOne) Exec(ctx context.Context) error {
	_, err := uciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uciuo *UpgradeCompanyIncomeUpdateOne) ExecX(ctx context.Context) {
	if err := uciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uciuo *UpgradeCompanyIncomeUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeCompanyIncome, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradecompanyincome.Table, upgradecompanyincome.Columns, sqlgraph.NewFieldSpec(upgradecompanyincome.FieldID, field.TypeInt))
	id, ok := uciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeCompanyIncome.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradecompanyincome.FieldID)
		for _, f := range fields {
			if !upgradecompanyincome.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradecompanyincome.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uciuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanyincome.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uciuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradecompanyincome.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uciuo.mutation.IncomeType(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeType, field.TypeInt8, value)
	}
	if value, ok := uciuo.mutation.AddedIncomeType(); ok {
		_spec.AddField(upgradecompanyincome.FieldIncomeType, field.TypeInt8, value)
	}
	if value, ok := uciuo.mutation.IncomeAmount(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeAmount, field.TypeInt, value)
	}
	if value, ok := uciuo.mutation.AddedIncomeAmount(); ok {
		_spec.AddField(upgradecompanyincome.FieldIncomeAmount, field.TypeInt, value)
	}
	if value, ok := uciuo.mutation.IncomeTime(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeTime, field.TypeTime, value)
	}
	if uciuo.mutation.IncomeTimeCleared() {
		_spec.ClearField(upgradecompanyincome.FieldIncomeTime, field.TypeTime)
	}
	if value, ok := uciuo.mutation.Remark(); ok {
		_spec.SetField(upgradecompanyincome.FieldRemark, field.TypeString, value)
	}
	if uciuo.mutation.RemarkCleared() {
		_spec.ClearField(upgradecompanyincome.FieldRemark, field.TypeString)
	}
	if value, ok := uciuo.mutation.Status(); ok {
		_spec.SetField(upgradecompanyincome.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uciuo.mutation.AddedStatus(); ok {
		_spec.AddField(upgradecompanyincome.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uciuo.mutation.IsDel(); ok {
		_spec.SetField(upgradecompanyincome.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uciuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradecompanyincome.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uciuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldCreateAt, field.TypeTime, value)
	}
	if uciuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradecompanyincome.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uciuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldUpdateAt, field.TypeTime, value)
	}
	if uciuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradecompanyincome.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeCompanyIncome{config: uciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradecompanyincome.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uciuo.mutation.done = true
	return _node, nil
}
