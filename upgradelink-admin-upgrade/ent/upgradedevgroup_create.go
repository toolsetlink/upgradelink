// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradedevgroup"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevGroupCreate is the builder for creating a UpgradeDevGroup entity.
type UpgradeDevGroupCreate struct {
	config
	mutation *UpgradeDevGroupMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (udgc *UpgradeDevGroupCreate) SetCompanyID(i int) *UpgradeDevGroupCreate {
	udgc.mutation.SetCompanyID(i)
	return udgc
}

// SetName sets the "name" field.
func (udgc *UpgradeDevGroupCreate) SetName(s string) *UpgradeDevGroupCreate {
	udgc.mutation.SetName(s)
	return udgc
}

// SetIsDel sets the "is_del" field.
func (udgc *UpgradeDevGroupCreate) SetIsDel(i int32) *UpgradeDevGroupCreate {
	udgc.mutation.SetIsDel(i)
	return udgc
}

// SetCreateAt sets the "create_at" field.
func (udgc *UpgradeDevGroupCreate) SetCreateAt(t time.Time) *UpgradeDevGroupCreate {
	udgc.mutation.SetCreateAt(t)
	return udgc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udgc *UpgradeDevGroupCreate) SetNillableCreateAt(t *time.Time) *UpgradeDevGroupCreate {
	if t != nil {
		udgc.SetCreateAt(*t)
	}
	return udgc
}

// SetUpdateAt sets the "update_at" field.
func (udgc *UpgradeDevGroupCreate) SetUpdateAt(t time.Time) *UpgradeDevGroupCreate {
	udgc.mutation.SetUpdateAt(t)
	return udgc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udgc *UpgradeDevGroupCreate) SetNillableUpdateAt(t *time.Time) *UpgradeDevGroupCreate {
	if t != nil {
		udgc.SetUpdateAt(*t)
	}
	return udgc
}

// SetID sets the "id" field.
func (udgc *UpgradeDevGroupCreate) SetID(i int) *UpgradeDevGroupCreate {
	udgc.mutation.SetID(i)
	return udgc
}

// Mutation returns the UpgradeDevGroupMutation object of the builder.
func (udgc *UpgradeDevGroupCreate) Mutation() *UpgradeDevGroupMutation {
	return udgc.mutation
}

// Save creates the UpgradeDevGroup in the database.
func (udgc *UpgradeDevGroupCreate) Save(ctx context.Context) (*UpgradeDevGroup, error) {
	return withHooks(ctx, udgc.sqlSave, udgc.mutation, udgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udgc *UpgradeDevGroupCreate) SaveX(ctx context.Context) *UpgradeDevGroup {
	v, err := udgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udgc *UpgradeDevGroupCreate) Exec(ctx context.Context) error {
	_, err := udgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udgc *UpgradeDevGroupCreate) ExecX(ctx context.Context) {
	if err := udgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udgc *UpgradeDevGroupCreate) check() error {
	if _, ok := udgc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeDevGroup.company_id"`)}
	}
	if _, ok := udgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UpgradeDevGroup.name"`)}
	}
	if _, ok := udgc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeDevGroup.is_del"`)}
	}
	return nil
}

func (udgc *UpgradeDevGroupCreate) sqlSave(ctx context.Context) (*UpgradeDevGroup, error) {
	if err := udgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	udgc.mutation.id = &_node.ID
	udgc.mutation.done = true
	return _node, nil
}

func (udgc *UpgradeDevGroupCreate) createSpec() (*UpgradeDevGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeDevGroup{config: udgc.config}
		_spec = sqlgraph.NewCreateSpec(upgradedevgroup.Table, sqlgraph.NewFieldSpec(upgradedevgroup.FieldID, field.TypeInt))
	)
	if id, ok := udgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udgc.mutation.CompanyID(); ok {
		_spec.SetField(upgradedevgroup.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := udgc.mutation.Name(); ok {
		_spec.SetField(upgradedevgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := udgc.mutation.IsDel(); ok {
		_spec.SetField(upgradedevgroup.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := udgc.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := udgc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevgroup.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeDevGroupCreateBulk is the builder for creating many UpgradeDevGroup entities in bulk.
type UpgradeDevGroupCreateBulk struct {
	config
	err      error
	builders []*UpgradeDevGroupCreate
}

// Save creates the UpgradeDevGroup entities in the database.
func (udgcb *UpgradeDevGroupCreateBulk) Save(ctx context.Context) ([]*UpgradeDevGroup, error) {
	if udgcb.err != nil {
		return nil, udgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udgcb.builders))
	nodes := make([]*UpgradeDevGroup, len(udgcb.builders))
	mutators := make([]Mutator, len(udgcb.builders))
	for i := range udgcb.builders {
		func(i int, root context.Context) {
			builder := udgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeDevGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udgcb *UpgradeDevGroupCreateBulk) SaveX(ctx context.Context) []*UpgradeDevGroup {
	v, err := udgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udgcb *UpgradeDevGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := udgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udgcb *UpgradeDevGroupCreateBulk) ExecX(ctx context.Context) {
	if err := udgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
