// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/fmscloudfile"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FmsCloudFile is the model entity for the FmsCloudFile schema.
type FmsCloudFile struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID string `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State true: normal false: ban | 状态 true 正常 false 禁用
	State bool `json:"state,omitempty"`
	// The file's name | 文件名
	Name string `json:"name,omitempty"`
	// The file's url | 文件地址
	URL string `json:"url,omitempty"`
	// The file's size | 文件大小
	Size uint64 `json:"size,omitempty"`
	// The file's type | 文件类型
	FileType uint8 `json:"file_type,omitempty"`
	// The user who upload the file | 上传用户的 ID
	UserID string `json:"user_id,omitempty"`
	// CloudFileStorageProviders holds the value of the "cloud_file_storage_providers" field.
	CloudFileStorageProviders uint64 `json:"cloud_file_storage_providers,omitempty"`
	selectValues              sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FmsCloudFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fmscloudfile.FieldState:
			values[i] = new(sql.NullBool)
		case fmscloudfile.FieldSize, fmscloudfile.FieldFileType, fmscloudfile.FieldCloudFileStorageProviders:
			values[i] = new(sql.NullInt64)
		case fmscloudfile.FieldID, fmscloudfile.FieldName, fmscloudfile.FieldURL, fmscloudfile.FieldUserID:
			values[i] = new(sql.NullString)
		case fmscloudfile.FieldCreatedAt, fmscloudfile.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FmsCloudFile fields.
func (fcf *FmsCloudFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fmscloudfile.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fcf.ID = value.String
			}
		case fmscloudfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fcf.CreatedAt = value.Time
			}
		case fmscloudfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fcf.UpdatedAt = value.Time
			}
		case fmscloudfile.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				fcf.State = value.Bool
			}
		case fmscloudfile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fcf.Name = value.String
			}
		case fmscloudfile.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				fcf.URL = value.String
			}
		case fmscloudfile.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				fcf.Size = uint64(value.Int64)
			}
		case fmscloudfile.FieldFileType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				fcf.FileType = uint8(value.Int64)
			}
		case fmscloudfile.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fcf.UserID = value.String
			}
		case fmscloudfile.FieldCloudFileStorageProviders:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cloud_file_storage_providers", values[i])
			} else if value.Valid {
				fcf.CloudFileStorageProviders = uint64(value.Int64)
			}
		default:
			fcf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FmsCloudFile.
// This includes values selected through modifiers, order, etc.
func (fcf *FmsCloudFile) Value(name string) (ent.Value, error) {
	return fcf.selectValues.Get(name)
}

// Update returns a builder for updating this FmsCloudFile.
// Note that you need to call FmsCloudFile.Unwrap() before calling this method if this FmsCloudFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (fcf *FmsCloudFile) Update() *FmsCloudFileUpdateOne {
	return NewFmsCloudFileClient(fcf.config).UpdateOne(fcf)
}

// Unwrap unwraps the FmsCloudFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fcf *FmsCloudFile) Unwrap() *FmsCloudFile {
	_tx, ok := fcf.config.driver.(*txDriver)
	if !ok {
		panic("ent: FmsCloudFile is not a transactional entity")
	}
	fcf.config.driver = _tx.drv
	return fcf
}

// String implements the fmt.Stringer.
func (fcf *FmsCloudFile) String() string {
	var builder strings.Builder
	builder.WriteString("FmsCloudFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fcf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fcf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fcf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", fcf.State))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fcf.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fcf.URL)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", fcf.Size))
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(fmt.Sprintf("%v", fcf.FileType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fcf.UserID)
	builder.WriteString(", ")
	builder.WriteString("cloud_file_storage_providers=")
	builder.WriteString(fmt.Sprintf("%v", fcf.CloudFileStorageProviders))
	builder.WriteByte(')')
	return builder.String()
}

// FmsCloudFiles is a parsable slice of FmsCloudFile.
type FmsCloudFiles []*FmsCloudFile
