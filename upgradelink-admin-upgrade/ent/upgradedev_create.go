// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradedev"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevCreate is the builder for creating a UpgradeDev entity.
type UpgradeDevCreate struct {
	config
	mutation *UpgradeDevMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (udc *UpgradeDevCreate) SetCompanyID(i int) *UpgradeDevCreate {
	udc.mutation.SetCompanyID(i)
	return udc
}

// SetKey sets the "key" field.
func (udc *UpgradeDevCreate) SetKey(s string) *UpgradeDevCreate {
	udc.mutation.SetKey(s)
	return udc
}

// SetIsDel sets the "is_del" field.
func (udc *UpgradeDevCreate) SetIsDel(i int32) *UpgradeDevCreate {
	udc.mutation.SetIsDel(i)
	return udc
}

// SetCreateAt sets the "create_at" field.
func (udc *UpgradeDevCreate) SetCreateAt(t time.Time) *UpgradeDevCreate {
	udc.mutation.SetCreateAt(t)
	return udc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udc *UpgradeDevCreate) SetNillableCreateAt(t *time.Time) *UpgradeDevCreate {
	if t != nil {
		udc.SetCreateAt(*t)
	}
	return udc
}

// SetUpdateAt sets the "update_at" field.
func (udc *UpgradeDevCreate) SetUpdateAt(t time.Time) *UpgradeDevCreate {
	udc.mutation.SetUpdateAt(t)
	return udc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udc *UpgradeDevCreate) SetNillableUpdateAt(t *time.Time) *UpgradeDevCreate {
	if t != nil {
		udc.SetUpdateAt(*t)
	}
	return udc
}

// SetID sets the "id" field.
func (udc *UpgradeDevCreate) SetID(i int) *UpgradeDevCreate {
	udc.mutation.SetID(i)
	return udc
}

// Mutation returns the UpgradeDevMutation object of the builder.
func (udc *UpgradeDevCreate) Mutation() *UpgradeDevMutation {
	return udc.mutation
}

// Save creates the UpgradeDev in the database.
func (udc *UpgradeDevCreate) Save(ctx context.Context) (*UpgradeDev, error) {
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UpgradeDevCreate) SaveX(ctx context.Context) *UpgradeDev {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UpgradeDevCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UpgradeDevCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UpgradeDevCreate) check() error {
	if _, ok := udc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeDev.company_id"`)}
	}
	if _, ok := udc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "UpgradeDev.key"`)}
	}
	if _, ok := udc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeDev.is_del"`)}
	}
	return nil
}

func (udc *UpgradeDevCreate) sqlSave(ctx context.Context) (*UpgradeDev, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UpgradeDevCreate) createSpec() (*UpgradeDev, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeDev{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(upgradedev.Table, sqlgraph.NewFieldSpec(upgradedev.FieldID, field.TypeInt))
	)
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.CompanyID(); ok {
		_spec.SetField(upgradedev.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := udc.mutation.Key(); ok {
		_spec.SetField(upgradedev.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := udc.mutation.IsDel(); ok {
		_spec.SetField(upgradedev.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := udc.mutation.CreateAt(); ok {
		_spec.SetField(upgradedev.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := udc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedev.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeDevCreateBulk is the builder for creating many UpgradeDev entities in bulk.
type UpgradeDevCreateBulk struct {
	config
	err      error
	builders []*UpgradeDevCreate
}

// Save creates the UpgradeDev entities in the database.
func (udcb *UpgradeDevCreateBulk) Save(ctx context.Context) ([]*UpgradeDev, error) {
	if udcb.err != nil {
		return nil, udcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UpgradeDev, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeDevMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UpgradeDevCreateBulk) SaveX(ctx context.Context) []*UpgradeDev {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UpgradeDevCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UpgradeDevCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
