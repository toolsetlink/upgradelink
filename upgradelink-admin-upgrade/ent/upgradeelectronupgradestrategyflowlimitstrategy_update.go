// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeElectronUpgradeStrategyFlowLimitStrategy entities.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.Where(ps...)
	return ueusflsu
}

// SetEnable sets the "enable" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ResetEnable()
	ueusflsu.mutation.SetEnable(i)
	return ueusflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ueusflsu.SetEnable(*i)
	}
	return ueusflsu
}

// AddEnable adds i to the "enable" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.AddEnable(i)
	return ueusflsu
}

// SetBeginTime sets the "begin_time" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.SetBeginTime(s)
	return ueusflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ueusflsu.SetBeginTime(*s)
	}
	return ueusflsu
}

// SetEndTime sets the "end_time" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.SetEndTime(s)
	return ueusflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ueusflsu.SetEndTime(*s)
	}
	return ueusflsu
}

// SetDimension sets the "dimension" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ResetDimension()
	ueusflsu.mutation.SetDimension(i)
	return ueusflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ueusflsu.SetDimension(*i)
	}
	return ueusflsu
}

// AddDimension adds i to the "dimension" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.AddDimension(i)
	return ueusflsu
}

// SetLimit sets the "limit" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ResetLimit()
	ueusflsu.mutation.SetLimit(i)
	return ueusflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ueusflsu.SetLimit(*i)
	}
	return ueusflsu
}

// AddLimit adds i to the "limit" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.AddLimit(i)
	return ueusflsu
}

// SetIsDel sets the "is_del" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ResetIsDel()
	ueusflsu.mutation.SetIsDel(i)
	return ueusflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ueusflsu.SetIsDel(*i)
	}
	return ueusflsu
}

// AddIsDel adds i to the "is_del" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.AddIsDel(i)
	return ueusflsu
}

// SetCreateAt sets the "create_at" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.SetCreateAt(t)
	return ueusflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ueusflsu.SetCreateAt(*t)
	}
	return ueusflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ClearCreateAt()
	return ueusflsu
}

// SetUpdateAt sets the "update_at" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.SetUpdateAt(t)
	return ueusflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ueusflsu.SetUpdateAt(*t)
	}
	return ueusflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate {
	ueusflsu.mutation.ClearUpdateAt()
	return ueusflsu
}

// Mutation returns the UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation {
	return ueusflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusflsu.sqlSave, ueusflsu.mutation, ueusflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ueusflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ueusflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := ueusflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusflsu *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategyflowlimitstrategy.Table, upgradeelectronupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ueusflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusflsu.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ueusflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ueusflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.Limit(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueusflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ueusflsu.mutation.done = true
	return n, nil
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeElectronUpgradeStrategyFlowLimitStrategy entity.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ResetEnable()
	ueusflsuo.mutation.SetEnable(i)
	return ueusflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ueusflsuo.SetEnable(*i)
	}
	return ueusflsuo
}

// AddEnable adds i to the "enable" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.AddEnable(i)
	return ueusflsuo
}

// SetBeginTime sets the "begin_time" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.SetBeginTime(s)
	return ueusflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ueusflsuo.SetBeginTime(*s)
	}
	return ueusflsuo
}

// SetEndTime sets the "end_time" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.SetEndTime(s)
	return ueusflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ueusflsuo.SetEndTime(*s)
	}
	return ueusflsuo
}

// SetDimension sets the "dimension" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ResetDimension()
	ueusflsuo.mutation.SetDimension(i)
	return ueusflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ueusflsuo.SetDimension(*i)
	}
	return ueusflsuo
}

// AddDimension adds i to the "dimension" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.AddDimension(i)
	return ueusflsuo
}

// SetLimit sets the "limit" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ResetLimit()
	ueusflsuo.mutation.SetLimit(i)
	return ueusflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ueusflsuo.SetLimit(*i)
	}
	return ueusflsuo
}

// AddLimit adds i to the "limit" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.AddLimit(i)
	return ueusflsuo
}

// SetIsDel sets the "is_del" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ResetIsDel()
	ueusflsuo.mutation.SetIsDel(i)
	return ueusflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ueusflsuo.SetIsDel(*i)
	}
	return ueusflsuo
}

// AddIsDel adds i to the "is_del" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.AddIsDel(i)
	return ueusflsuo
}

// SetCreateAt sets the "create_at" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.SetCreateAt(t)
	return ueusflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ueusflsuo.SetCreateAt(*t)
	}
	return ueusflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ClearCreateAt()
	return ueusflsuo
}

// SetUpdateAt sets the "update_at" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.SetUpdateAt(t)
	return ueusflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ueusflsuo.SetUpdateAt(*t)
	}
	return ueusflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.ClearUpdateAt()
	return ueusflsuo
}

// Mutation returns the UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation {
	return ueusflsuo.mutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.mutation.Where(ps...)
	return ueusflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	ueusflsuo.fields = append([]string{field}, fields...)
	return ueusflsuo
}

// Save executes the query and returns the updated UpgradeElectronUpgradeStrategyFlowLimitStrategy entity.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, ueusflsuo.sqlSave, ueusflsuo.mutation, ueusflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	node, err := ueusflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ueusflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ueusflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusflsuo *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeElectronUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategyflowlimitstrategy.Table, upgradeelectronupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := ueusflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeElectronUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ueusflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectronupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradeelectronupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeelectronupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueusflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ueusflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ueusflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeElectronUpgradeStrategyFlowLimitStrategy{config: ueusflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueusflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ueusflsuo.mutation.done = true
	return _node, nil
}
