// Code generated by ent, DO NOT EDIT.

package upgradecompanytrafficpacket

import (
	"upgradelink-admin-upgrade/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldID, id))
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldCompanyID, v))
}

// PacketID applies equality check predicate on the "packet_id" field. It's identical to PacketIDEQ.
func PacketID(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldPacketID, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldEndTime, v))
}

// InitialSize applies equality check predicate on the "initial_size" field. It's identical to InitialSizeEQ.
func InitialSize(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldInitialSize, v))
}

// RemainingSize applies equality check predicate on the "remaining_size" field. It's identical to RemainingSizeEQ.
func RemainingSize(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldRemainingSize, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldStatus, v))
}

// ExchangeTime applies equality check predicate on the "exchange_time" field. It's identical to ExchangeTimeEQ.
func ExchangeTime(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldExchangeTime, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldUpdateAt, v))
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldCompanyID, v))
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldCompanyID, v))
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldCompanyID, vs...))
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldCompanyID, vs...))
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldCompanyID, v))
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldCompanyID, v))
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldCompanyID, v))
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldCompanyID, v))
}

// PacketIDEQ applies the EQ predicate on the "packet_id" field.
func PacketIDEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldPacketID, v))
}

// PacketIDNEQ applies the NEQ predicate on the "packet_id" field.
func PacketIDNEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldPacketID, v))
}

// PacketIDIn applies the In predicate on the "packet_id" field.
func PacketIDIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldPacketID, vs...))
}

// PacketIDNotIn applies the NotIn predicate on the "packet_id" field.
func PacketIDNotIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldPacketID, vs...))
}

// PacketIDGT applies the GT predicate on the "packet_id" field.
func PacketIDGT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldPacketID, v))
}

// PacketIDGTE applies the GTE predicate on the "packet_id" field.
func PacketIDGTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldPacketID, v))
}

// PacketIDLT applies the LT predicate on the "packet_id" field.
func PacketIDLT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldPacketID, v))
}

// PacketIDLTE applies the LTE predicate on the "packet_id" field.
func PacketIDLTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldPacketID, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldEndTime, v))
}

// InitialSizeEQ applies the EQ predicate on the "initial_size" field.
func InitialSizeEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldInitialSize, v))
}

// InitialSizeNEQ applies the NEQ predicate on the "initial_size" field.
func InitialSizeNEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldInitialSize, v))
}

// InitialSizeIn applies the In predicate on the "initial_size" field.
func InitialSizeIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldInitialSize, vs...))
}

// InitialSizeNotIn applies the NotIn predicate on the "initial_size" field.
func InitialSizeNotIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldInitialSize, vs...))
}

// InitialSizeGT applies the GT predicate on the "initial_size" field.
func InitialSizeGT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldInitialSize, v))
}

// InitialSizeGTE applies the GTE predicate on the "initial_size" field.
func InitialSizeGTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldInitialSize, v))
}

// InitialSizeLT applies the LT predicate on the "initial_size" field.
func InitialSizeLT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldInitialSize, v))
}

// InitialSizeLTE applies the LTE predicate on the "initial_size" field.
func InitialSizeLTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldInitialSize, v))
}

// RemainingSizeEQ applies the EQ predicate on the "remaining_size" field.
func RemainingSizeEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldRemainingSize, v))
}

// RemainingSizeNEQ applies the NEQ predicate on the "remaining_size" field.
func RemainingSizeNEQ(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldRemainingSize, v))
}

// RemainingSizeIn applies the In predicate on the "remaining_size" field.
func RemainingSizeIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldRemainingSize, vs...))
}

// RemainingSizeNotIn applies the NotIn predicate on the "remaining_size" field.
func RemainingSizeNotIn(vs ...int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldRemainingSize, vs...))
}

// RemainingSizeGT applies the GT predicate on the "remaining_size" field.
func RemainingSizeGT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldRemainingSize, v))
}

// RemainingSizeGTE applies the GTE predicate on the "remaining_size" field.
func RemainingSizeGTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldRemainingSize, v))
}

// RemainingSizeLT applies the LT predicate on the "remaining_size" field.
func RemainingSizeLT(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldRemainingSize, v))
}

// RemainingSizeLTE applies the LTE predicate on the "remaining_size" field.
func RemainingSizeLTE(v int) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldRemainingSize, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldStatus, v))
}

// ExchangeTimeEQ applies the EQ predicate on the "exchange_time" field.
func ExchangeTimeEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldExchangeTime, v))
}

// ExchangeTimeNEQ applies the NEQ predicate on the "exchange_time" field.
func ExchangeTimeNEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldExchangeTime, v))
}

// ExchangeTimeIn applies the In predicate on the "exchange_time" field.
func ExchangeTimeIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldExchangeTime, vs...))
}

// ExchangeTimeNotIn applies the NotIn predicate on the "exchange_time" field.
func ExchangeTimeNotIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldExchangeTime, vs...))
}

// ExchangeTimeGT applies the GT predicate on the "exchange_time" field.
func ExchangeTimeGT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldExchangeTime, v))
}

// ExchangeTimeGTE applies the GTE predicate on the "exchange_time" field.
func ExchangeTimeGTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldExchangeTime, v))
}

// ExchangeTimeLT applies the LT predicate on the "exchange_time" field.
func ExchangeTimeLT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldExchangeTime, v))
}

// ExchangeTimeLTE applies the LTE predicate on the "exchange_time" field.
func ExchangeTimeLTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldExchangeTime, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeCompanyTrafficPacket) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeCompanyTrafficPacket) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeCompanyTrafficPacket) predicate.UpgradeCompanyTrafficPacket {
	return predicate.UpgradeCompanyTrafficPacket(sql.NotPredicates(p))
}
