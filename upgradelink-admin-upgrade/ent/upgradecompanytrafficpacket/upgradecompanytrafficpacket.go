// Code generated by ent, DO NOT EDIT.

package upgradecompanytrafficpacket

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradecompanytrafficpacket type in the database.
	Label = "upgrade_company_traffic_packet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldPacketID holds the string denoting the packet_id field in the database.
	FieldPacketID = "packet_id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldInitialSize holds the string denoting the initial_size field in the database.
	FieldInitialSize = "initial_size"
	// FieldRemainingSize holds the string denoting the remaining_size field in the database.
	FieldRemainingSize = "remaining_size"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExchangeTime holds the string denoting the exchange_time field in the database.
	FieldExchangeTime = "exchange_time"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradecompanytrafficpacket in the database.
	Table = "upgrade_company_traffic_packet"
)

// Columns holds all SQL columns for upgradecompanytrafficpacket fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldPacketID,
	FieldStartTime,
	FieldEndTime,
	FieldInitialSize,
	FieldRemainingSize,
	FieldStatus,
	FieldExchangeTime,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeCompanyTrafficPacket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByPacketID orders the results by the packet_id field.
func ByPacketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPacketID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByInitialSize orders the results by the initial_size field.
func ByInitialSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialSize, opts...).ToFunc()
}

// ByRemainingSize orders the results by the remaining_size field.
func ByRemainingSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemainingSize, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByExchangeTime orders the results by the exchange_time field.
func ByExchangeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExchangeTime, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
