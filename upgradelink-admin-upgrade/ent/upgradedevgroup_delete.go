// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedevgroup"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevGroupDelete is the builder for deleting a UpgradeDevGroup entity.
type UpgradeDevGroupDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeDevGroupMutation
}

// Where appends a list predicates to the UpgradeDevGroupDelete builder.
func (udgd *UpgradeDevGroupDelete) Where(ps ...predicate.UpgradeDevGroup) *UpgradeDevGroupDelete {
	udgd.mutation.Where(ps...)
	return udgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (udgd *UpgradeDevGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, udgd.sqlExec, udgd.mutation, udgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (udgd *UpgradeDevGroupDelete) ExecX(ctx context.Context) int {
	n, err := udgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (udgd *UpgradeDevGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradedevgroup.Table, sqlgraph.NewFieldSpec(upgradedevgroup.FieldID, field.TypeInt))
	if ps := udgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, udgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	udgd.mutation.done = true
	return affected, err
}

// UpgradeDevGroupDeleteOne is the builder for deleting a single UpgradeDevGroup entity.
type UpgradeDevGroupDeleteOne struct {
	udgd *UpgradeDevGroupDelete
}

// Where appends a list predicates to the UpgradeDevGroupDelete builder.
func (udgdo *UpgradeDevGroupDeleteOne) Where(ps ...predicate.UpgradeDevGroup) *UpgradeDevGroupDeleteOne {
	udgdo.udgd.mutation.Where(ps...)
	return udgdo
}

// Exec executes the deletion query.
func (udgdo *UpgradeDevGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := udgdo.udgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradedevgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (udgdo *UpgradeDevGroupDeleteOne) ExecX(ctx context.Context) {
	if err := udgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
