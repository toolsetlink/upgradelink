// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeurl"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpdate is the builder for updating UpgradeUrl entities.
type UpgradeUrlUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlMutation
}

// Where appends a list predicates to the UpgradeUrlUpdate builder.
func (uuu *UpgradeUrlUpdate) Where(ps ...predicate.UpgradeUrl) *UpgradeUrlUpdate {
	uuu.mutation.Where(ps...)
	return uuu
}

// SetCompanyID sets the "company_id" field.
func (uuu *UpgradeUrlUpdate) SetCompanyID(i int) *UpgradeUrlUpdate {
	uuu.mutation.ResetCompanyID()
	uuu.mutation.SetCompanyID(i)
	return uuu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableCompanyID(i *int) *UpgradeUrlUpdate {
	if i != nil {
		uuu.SetCompanyID(*i)
	}
	return uuu
}

// AddCompanyID adds i to the "company_id" field.
func (uuu *UpgradeUrlUpdate) AddCompanyID(i int) *UpgradeUrlUpdate {
	uuu.mutation.AddCompanyID(i)
	return uuu
}

// SetKey sets the "key" field.
func (uuu *UpgradeUrlUpdate) SetKey(s string) *UpgradeUrlUpdate {
	uuu.mutation.SetKey(s)
	return uuu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableKey(s *string) *UpgradeUrlUpdate {
	if s != nil {
		uuu.SetKey(*s)
	}
	return uuu
}

// SetName sets the "name" field.
func (uuu *UpgradeUrlUpdate) SetName(s string) *UpgradeUrlUpdate {
	uuu.mutation.SetName(s)
	return uuu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableName(s *string) *UpgradeUrlUpdate {
	if s != nil {
		uuu.SetName(*s)
	}
	return uuu
}

// SetDescription sets the "description" field.
func (uuu *UpgradeUrlUpdate) SetDescription(s string) *UpgradeUrlUpdate {
	uuu.mutation.SetDescription(s)
	return uuu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableDescription(s *string) *UpgradeUrlUpdate {
	if s != nil {
		uuu.SetDescription(*s)
	}
	return uuu
}

// ClearDescription clears the value of the "description" field.
func (uuu *UpgradeUrlUpdate) ClearDescription() *UpgradeUrlUpdate {
	uuu.mutation.ClearDescription()
	return uuu
}

// SetIsDel sets the "is_del" field.
func (uuu *UpgradeUrlUpdate) SetIsDel(i int32) *UpgradeUrlUpdate {
	uuu.mutation.ResetIsDel()
	uuu.mutation.SetIsDel(i)
	return uuu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableIsDel(i *int32) *UpgradeUrlUpdate {
	if i != nil {
		uuu.SetIsDel(*i)
	}
	return uuu
}

// AddIsDel adds i to the "is_del" field.
func (uuu *UpgradeUrlUpdate) AddIsDel(i int32) *UpgradeUrlUpdate {
	uuu.mutation.AddIsDel(i)
	return uuu
}

// SetCreateAt sets the "create_at" field.
func (uuu *UpgradeUrlUpdate) SetCreateAt(t time.Time) *UpgradeUrlUpdate {
	uuu.mutation.SetCreateAt(t)
	return uuu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpdate {
	if t != nil {
		uuu.SetCreateAt(*t)
	}
	return uuu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuu *UpgradeUrlUpdate) ClearCreateAt() *UpgradeUrlUpdate {
	uuu.mutation.ClearCreateAt()
	return uuu
}

// SetUpdateAt sets the "update_at" field.
func (uuu *UpgradeUrlUpdate) SetUpdateAt(t time.Time) *UpgradeUrlUpdate {
	uuu.mutation.SetUpdateAt(t)
	return uuu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuu *UpgradeUrlUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpdate {
	if t != nil {
		uuu.SetUpdateAt(*t)
	}
	return uuu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuu *UpgradeUrlUpdate) ClearUpdateAt() *UpgradeUrlUpdate {
	uuu.mutation.ClearUpdateAt()
	return uuu
}

// Mutation returns the UpgradeUrlMutation object of the builder.
func (uuu *UpgradeUrlUpdate) Mutation() *UpgradeUrlMutation {
	return uuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuu *UpgradeUrlUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuu.sqlSave, uuu.mutation, uuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuu *UpgradeUrlUpdate) SaveX(ctx context.Context) int {
	affected, err := uuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuu *UpgradeUrlUpdate) Exec(ctx context.Context) error {
	_, err := uuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuu *UpgradeUrlUpdate) ExecX(ctx context.Context) {
	if err := uuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuu *UpgradeUrlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurl.Table, upgradeurl.Columns, sqlgraph.NewFieldSpec(upgradeurl.FieldID, field.TypeInt))
	if ps := uuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurl.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurl.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuu.mutation.Key(); ok {
		_spec.SetField(upgradeurl.FieldKey, field.TypeString, value)
	}
	if value, ok := uuu.mutation.Name(); ok {
		_spec.SetField(upgradeurl.FieldName, field.TypeString, value)
	}
	if value, ok := uuu.mutation.Description(); ok {
		_spec.SetField(upgradeurl.FieldDescription, field.TypeString, value)
	}
	if uuu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurl.FieldDescription, field.TypeString)
	}
	if value, ok := uuu.mutation.IsDel(); ok {
		_spec.SetField(upgradeurl.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurl.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurl.FieldCreateAt, field.TypeTime, value)
	}
	if uuu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurl.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurl.FieldUpdateAt, field.TypeTime, value)
	}
	if uuu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurl.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuu.mutation.done = true
	return n, nil
}

// UpgradeUrlUpdateOne is the builder for updating a single UpgradeUrl entity.
type UpgradeUrlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeUrlMutation
}

// SetCompanyID sets the "company_id" field.
func (uuuo *UpgradeUrlUpdateOne) SetCompanyID(i int) *UpgradeUrlUpdateOne {
	uuuo.mutation.ResetCompanyID()
	uuuo.mutation.SetCompanyID(i)
	return uuuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableCompanyID(i *int) *UpgradeUrlUpdateOne {
	if i != nil {
		uuuo.SetCompanyID(*i)
	}
	return uuuo
}

// AddCompanyID adds i to the "company_id" field.
func (uuuo *UpgradeUrlUpdateOne) AddCompanyID(i int) *UpgradeUrlUpdateOne {
	uuuo.mutation.AddCompanyID(i)
	return uuuo
}

// SetKey sets the "key" field.
func (uuuo *UpgradeUrlUpdateOne) SetKey(s string) *UpgradeUrlUpdateOne {
	uuuo.mutation.SetKey(s)
	return uuuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableKey(s *string) *UpgradeUrlUpdateOne {
	if s != nil {
		uuuo.SetKey(*s)
	}
	return uuuo
}

// SetName sets the "name" field.
func (uuuo *UpgradeUrlUpdateOne) SetName(s string) *UpgradeUrlUpdateOne {
	uuuo.mutation.SetName(s)
	return uuuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableName(s *string) *UpgradeUrlUpdateOne {
	if s != nil {
		uuuo.SetName(*s)
	}
	return uuuo
}

// SetDescription sets the "description" field.
func (uuuo *UpgradeUrlUpdateOne) SetDescription(s string) *UpgradeUrlUpdateOne {
	uuuo.mutation.SetDescription(s)
	return uuuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableDescription(s *string) *UpgradeUrlUpdateOne {
	if s != nil {
		uuuo.SetDescription(*s)
	}
	return uuuo
}

// ClearDescription clears the value of the "description" field.
func (uuuo *UpgradeUrlUpdateOne) ClearDescription() *UpgradeUrlUpdateOne {
	uuuo.mutation.ClearDescription()
	return uuuo
}

// SetIsDel sets the "is_del" field.
func (uuuo *UpgradeUrlUpdateOne) SetIsDel(i int32) *UpgradeUrlUpdateOne {
	uuuo.mutation.ResetIsDel()
	uuuo.mutation.SetIsDel(i)
	return uuuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableIsDel(i *int32) *UpgradeUrlUpdateOne {
	if i != nil {
		uuuo.SetIsDel(*i)
	}
	return uuuo
}

// AddIsDel adds i to the "is_del" field.
func (uuuo *UpgradeUrlUpdateOne) AddIsDel(i int32) *UpgradeUrlUpdateOne {
	uuuo.mutation.AddIsDel(i)
	return uuuo
}

// SetCreateAt sets the "create_at" field.
func (uuuo *UpgradeUrlUpdateOne) SetCreateAt(t time.Time) *UpgradeUrlUpdateOne {
	uuuo.mutation.SetCreateAt(t)
	return uuuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpdateOne {
	if t != nil {
		uuuo.SetCreateAt(*t)
	}
	return uuuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuuo *UpgradeUrlUpdateOne) ClearCreateAt() *UpgradeUrlUpdateOne {
	uuuo.mutation.ClearCreateAt()
	return uuuo
}

// SetUpdateAt sets the "update_at" field.
func (uuuo *UpgradeUrlUpdateOne) SetUpdateAt(t time.Time) *UpgradeUrlUpdateOne {
	uuuo.mutation.SetUpdateAt(t)
	return uuuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuuo *UpgradeUrlUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpdateOne {
	if t != nil {
		uuuo.SetUpdateAt(*t)
	}
	return uuuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuuo *UpgradeUrlUpdateOne) ClearUpdateAt() *UpgradeUrlUpdateOne {
	uuuo.mutation.ClearUpdateAt()
	return uuuo
}

// Mutation returns the UpgradeUrlMutation object of the builder.
func (uuuo *UpgradeUrlUpdateOne) Mutation() *UpgradeUrlMutation {
	return uuuo.mutation
}

// Where appends a list predicates to the UpgradeUrlUpdate builder.
func (uuuo *UpgradeUrlUpdateOne) Where(ps ...predicate.UpgradeUrl) *UpgradeUrlUpdateOne {
	uuuo.mutation.Where(ps...)
	return uuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuuo *UpgradeUrlUpdateOne) Select(field string, fields ...string) *UpgradeUrlUpdateOne {
	uuuo.fields = append([]string{field}, fields...)
	return uuuo
}

// Save executes the query and returns the updated UpgradeUrl entity.
func (uuuo *UpgradeUrlUpdateOne) Save(ctx context.Context) (*UpgradeUrl, error) {
	return withHooks(ctx, uuuo.sqlSave, uuuo.mutation, uuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuuo *UpgradeUrlUpdateOne) SaveX(ctx context.Context) *UpgradeUrl {
	node, err := uuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuuo *UpgradeUrlUpdateOne) Exec(ctx context.Context) error {
	_, err := uuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuuo *UpgradeUrlUpdateOne) ExecX(ctx context.Context) {
	if err := uuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuuo *UpgradeUrlUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeUrl, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurl.Table, upgradeurl.Columns, sqlgraph.NewFieldSpec(upgradeurl.FieldID, field.TypeInt))
	id, ok := uuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeUrl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeurl.FieldID)
		for _, f := range fields {
			if !upgradeurl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeurl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurl.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurl.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuuo.mutation.Key(); ok {
		_spec.SetField(upgradeurl.FieldKey, field.TypeString, value)
	}
	if value, ok := uuuo.mutation.Name(); ok {
		_spec.SetField(upgradeurl.FieldName, field.TypeString, value)
	}
	if value, ok := uuuo.mutation.Description(); ok {
		_spec.SetField(upgradeurl.FieldDescription, field.TypeString, value)
	}
	if uuuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurl.FieldDescription, field.TypeString)
	}
	if value, ok := uuuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeurl.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurl.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurl.FieldCreateAt, field.TypeTime, value)
	}
	if uuuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurl.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurl.FieldUpdateAt, field.TypeTime, value)
	}
	if uuuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurl.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeUrl{config: uuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuuo.mutation.done = true
	return _node, nil
}
