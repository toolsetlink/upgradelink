// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpgradeStrategyDelete is the builder for deleting a UpgradeFileUpgradeStrategy entity.
type UpgradeFileUpgradeStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyDelete builder.
func (ufusd *UpgradeFileUpgradeStrategyDelete) Where(ps ...predicate.UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyDelete {
	ufusd.mutation.Where(ps...)
	return ufusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufusd *UpgradeFileUpgradeStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufusd.sqlExec, ufusd.mutation, ufusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusd *UpgradeFileUpgradeStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ufusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufusd *UpgradeFileUpgradeStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradefileupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradefileupgradestrategy.FieldID, field.TypeInt))
	if ps := ufusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufusd.mutation.done = true
	return affected, err
}

// UpgradeFileUpgradeStrategyDeleteOne is the builder for deleting a single UpgradeFileUpgradeStrategy entity.
type UpgradeFileUpgradeStrategyDeleteOne struct {
	ufusd *UpgradeFileUpgradeStrategyDelete
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyDelete builder.
func (ufusdo *UpgradeFileUpgradeStrategyDeleteOne) Where(ps ...predicate.UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyDeleteOne {
	ufusdo.ufusd.mutation.Where(ps...)
	return ufusdo
}

// Exec executes the deletion query.
func (ufusdo *UpgradeFileUpgradeStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ufusdo.ufusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradefileupgradestrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusdo *UpgradeFileUpgradeStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ufusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
