// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeapk"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkDelete is the builder for deleting a UpgradeApk entity.
type UpgradeApkDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeApkMutation
}

// Where appends a list predicates to the UpgradeApkDelete builder.
func (uad *UpgradeApkDelete) Where(ps ...predicate.UpgradeApk) *UpgradeApkDelete {
	uad.mutation.Where(ps...)
	return uad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uad *UpgradeApkDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uad.sqlExec, uad.mutation, uad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uad *UpgradeApkDelete) ExecX(ctx context.Context) int {
	n, err := uad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uad *UpgradeApkDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeapk.Table, sqlgraph.NewFieldSpec(upgradeapk.FieldID, field.TypeInt))
	if ps := uad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uad.mutation.done = true
	return affected, err
}

// UpgradeApkDeleteOne is the builder for deleting a single UpgradeApk entity.
type UpgradeApkDeleteOne struct {
	uad *UpgradeApkDelete
}

// Where appends a list predicates to the UpgradeApkDelete builder.
func (uado *UpgradeApkDeleteOne) Where(ps ...predicate.UpgradeApk) *UpgradeApkDeleteOne {
	uado.uad.mutation.Where(ps...)
	return uado
}

// Exec executes the deletion query.
func (uado *UpgradeApkDeleteOne) Exec(ctx context.Context) error {
	n, err := uado.uad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeapk.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uado *UpgradeApkDeleteOne) ExecX(ctx context.Context) {
	if err := uado.Exec(ctx); err != nil {
		panic(err)
	}
}
