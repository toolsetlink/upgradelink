// Code generated by ent, DO NOT EDIT.

package upgradefileversion

import (
	"upgradelink-admin-upgrade/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldID, id))
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCompanyID, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldFileID, v))
}

// CloudFileID applies equality check predicate on the "cloud_file_id" field. It's identical to CloudFileIDEQ.
func CloudFileID(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCloudFileID, v))
}

// VersionName applies equality check predicate on the "version_name" field. It's identical to VersionNameEQ.
func VersionName(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldVersionName, v))
}

// VersionCode applies equality check predicate on the "version_code" field. It's identical to VersionCodeEQ.
func VersionCode(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldVersionCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldDescription, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldUpdateAt, v))
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCompanyID, v))
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldCompanyID, v))
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldCompanyID, vs...))
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldCompanyID, vs...))
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldCompanyID, v))
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldCompanyID, v))
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldCompanyID, v))
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldCompanyID, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldFileID, v))
}

// CloudFileIDEQ applies the EQ predicate on the "cloud_file_id" field.
func CloudFileIDEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCloudFileID, v))
}

// CloudFileIDNEQ applies the NEQ predicate on the "cloud_file_id" field.
func CloudFileIDNEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldCloudFileID, v))
}

// CloudFileIDIn applies the In predicate on the "cloud_file_id" field.
func CloudFileIDIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldCloudFileID, vs...))
}

// CloudFileIDNotIn applies the NotIn predicate on the "cloud_file_id" field.
func CloudFileIDNotIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldCloudFileID, vs...))
}

// CloudFileIDGT applies the GT predicate on the "cloud_file_id" field.
func CloudFileIDGT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldCloudFileID, v))
}

// CloudFileIDGTE applies the GTE predicate on the "cloud_file_id" field.
func CloudFileIDGTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldCloudFileID, v))
}

// CloudFileIDLT applies the LT predicate on the "cloud_file_id" field.
func CloudFileIDLT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldCloudFileID, v))
}

// CloudFileIDLTE applies the LTE predicate on the "cloud_file_id" field.
func CloudFileIDLTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldCloudFileID, v))
}

// CloudFileIDContains applies the Contains predicate on the "cloud_file_id" field.
func CloudFileIDContains(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContains(FieldCloudFileID, v))
}

// CloudFileIDHasPrefix applies the HasPrefix predicate on the "cloud_file_id" field.
func CloudFileIDHasPrefix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasPrefix(FieldCloudFileID, v))
}

// CloudFileIDHasSuffix applies the HasSuffix predicate on the "cloud_file_id" field.
func CloudFileIDHasSuffix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasSuffix(FieldCloudFileID, v))
}

// CloudFileIDEqualFold applies the EqualFold predicate on the "cloud_file_id" field.
func CloudFileIDEqualFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEqualFold(FieldCloudFileID, v))
}

// CloudFileIDContainsFold applies the ContainsFold predicate on the "cloud_file_id" field.
func CloudFileIDContainsFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContainsFold(FieldCloudFileID, v))
}

// VersionNameEQ applies the EQ predicate on the "version_name" field.
func VersionNameEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldVersionName, v))
}

// VersionNameNEQ applies the NEQ predicate on the "version_name" field.
func VersionNameNEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldVersionName, v))
}

// VersionNameIn applies the In predicate on the "version_name" field.
func VersionNameIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldVersionName, vs...))
}

// VersionNameNotIn applies the NotIn predicate on the "version_name" field.
func VersionNameNotIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldVersionName, vs...))
}

// VersionNameGT applies the GT predicate on the "version_name" field.
func VersionNameGT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldVersionName, v))
}

// VersionNameGTE applies the GTE predicate on the "version_name" field.
func VersionNameGTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldVersionName, v))
}

// VersionNameLT applies the LT predicate on the "version_name" field.
func VersionNameLT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldVersionName, v))
}

// VersionNameLTE applies the LTE predicate on the "version_name" field.
func VersionNameLTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldVersionName, v))
}

// VersionNameContains applies the Contains predicate on the "version_name" field.
func VersionNameContains(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContains(FieldVersionName, v))
}

// VersionNameHasPrefix applies the HasPrefix predicate on the "version_name" field.
func VersionNameHasPrefix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasPrefix(FieldVersionName, v))
}

// VersionNameHasSuffix applies the HasSuffix predicate on the "version_name" field.
func VersionNameHasSuffix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasSuffix(FieldVersionName, v))
}

// VersionNameEqualFold applies the EqualFold predicate on the "version_name" field.
func VersionNameEqualFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEqualFold(FieldVersionName, v))
}

// VersionNameContainsFold applies the ContainsFold predicate on the "version_name" field.
func VersionNameContainsFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContainsFold(FieldVersionName, v))
}

// VersionCodeEQ applies the EQ predicate on the "version_code" field.
func VersionCodeEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldVersionCode, v))
}

// VersionCodeNEQ applies the NEQ predicate on the "version_code" field.
func VersionCodeNEQ(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldVersionCode, v))
}

// VersionCodeIn applies the In predicate on the "version_code" field.
func VersionCodeIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldVersionCode, vs...))
}

// VersionCodeNotIn applies the NotIn predicate on the "version_code" field.
func VersionCodeNotIn(vs ...int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldVersionCode, vs...))
}

// VersionCodeGT applies the GT predicate on the "version_code" field.
func VersionCodeGT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldVersionCode, v))
}

// VersionCodeGTE applies the GTE predicate on the "version_code" field.
func VersionCodeGTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldVersionCode, v))
}

// VersionCodeLT applies the LT predicate on the "version_code" field.
func VersionCodeLT(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldVersionCode, v))
}

// VersionCodeLTE applies the LTE predicate on the "version_code" field.
func VersionCodeLTE(v int) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldVersionCode, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldContainsFold(FieldDescription, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeFileVersion) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeFileVersion) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeFileVersion) predicate.UpgradeFileVersion {
	return predicate.UpgradeFileVersion(sql.NotPredicates(p))
}
