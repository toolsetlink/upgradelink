// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradeurlupgradestrategygraystrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeUrlUpgradeStrategyGrayStrategy is the model entity for the UpgradeUrlUpgradeStrategyGrayStrategy schema.
type UpgradeUrlUpgradeStrategyGrayStrategy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 是否生效；可通过此控制策略是否生效0：失效；1：生效
	Enable int32 `json:"enable,omitempty"`
	// 任务开始时间
	BeginDatetime time.Time `json:"begin_datetime,omitempty"`
	// 任务结束时间
	EndDatetime time.Time `json:"end_datetime,omitempty"`
	// 数量限制
	Limit int `json:"limit,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeUrlUpgradeStrategyGrayStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeurlupgradestrategygraystrategy.FieldID, upgradeurlupgradestrategygraystrategy.FieldEnable, upgradeurlupgradestrategygraystrategy.FieldLimit, upgradeurlupgradestrategygraystrategy.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeurlupgradestrategygraystrategy.FieldBeginDatetime, upgradeurlupgradestrategygraystrategy.FieldEndDatetime, upgradeurlupgradestrategygraystrategy.FieldCreateAt, upgradeurlupgradestrategygraystrategy.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeUrlUpgradeStrategyGrayStrategy fields.
func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeurlupgradestrategygraystrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uuusgs.ID = int(value.Int64)
		case upgradeurlupgradestrategygraystrategy.FieldEnable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				uuusgs.Enable = int32(value.Int64)
			}
		case upgradeurlupgradestrategygraystrategy.FieldBeginDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_datetime", values[i])
			} else if value.Valid {
				uuusgs.BeginDatetime = value.Time
			}
		case upgradeurlupgradestrategygraystrategy.FieldEndDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_datetime", values[i])
			} else if value.Valid {
				uuusgs.EndDatetime = value.Time
			}
		case upgradeurlupgradestrategygraystrategy.FieldLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit", values[i])
			} else if value.Valid {
				uuusgs.Limit = int(value.Int64)
			}
		case upgradeurlupgradestrategygraystrategy.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				uuusgs.IsDel = int32(value.Int64)
			}
		case upgradeurlupgradestrategygraystrategy.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uuusgs.CreateAt = value.Time
			}
		case upgradeurlupgradestrategygraystrategy.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uuusgs.UpdateAt = value.Time
			}
		default:
			uuusgs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeUrlUpgradeStrategyGrayStrategy.
// This includes values selected through modifiers, order, etc.
func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) Value(name string) (ent.Value, error) {
	return uuusgs.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeUrlUpgradeStrategyGrayStrategy.
// Note that you need to call UpgradeUrlUpgradeStrategyGrayStrategy.Unwrap() before calling this method if this UpgradeUrlUpgradeStrategyGrayStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) Update() *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	return NewUpgradeUrlUpgradeStrategyGrayStrategyClient(uuusgs.config).UpdateOne(uuusgs)
}

// Unwrap unwraps the UpgradeUrlUpgradeStrategyGrayStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) Unwrap() *UpgradeUrlUpgradeStrategyGrayStrategy {
	_tx, ok := uuusgs.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeUrlUpgradeStrategyGrayStrategy is not a transactional entity")
	}
	uuusgs.config.driver = _tx.drv
	return uuusgs
}

// String implements the fmt.Stringer.
func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeUrlUpgradeStrategyGrayStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uuusgs.ID))
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", uuusgs.Enable))
	builder.WriteString(", ")
	builder.WriteString("begin_datetime=")
	builder.WriteString(uuusgs.BeginDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_datetime=")
	builder.WriteString(uuusgs.EndDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("limit=")
	builder.WriteString(fmt.Sprintf("%v", uuusgs.Limit))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", uuusgs.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(uuusgs.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(uuusgs.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeUrlUpgradeStrategyGrayStrategies is a parsable slice of UpgradeUrlUpgradeStrategyGrayStrategy.
type UpgradeUrlUpgradeStrategyGrayStrategies []*UpgradeUrlUpgradeStrategyGrayStrategy
