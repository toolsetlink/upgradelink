// Code generated by ent, DO NOT EDIT.

package upgradetauriupgradestrategyflowlimitstrategy

import (
	"upgradelink-admin-upgrade/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldID, id))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldEnable, v))
}

// BeginTime applies equality check predicate on the "begin_time" field. It's identical to BeginTimeEQ.
func BeginTime(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldBeginTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldEndTime, v))
}

// Dimension applies equality check predicate on the "dimension" field. It's identical to DimensionEQ.
func Dimension(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldDimension, v))
}

// Limit applies equality check predicate on the "limit" field. It's identical to LimitEQ.
func Limit(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldLimit, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldEnable, v))
}

// EnableIn applies the In predicate on the "enable" field.
func EnableIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldEnable, vs...))
}

// EnableNotIn applies the NotIn predicate on the "enable" field.
func EnableNotIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldEnable, vs...))
}

// EnableGT applies the GT predicate on the "enable" field.
func EnableGT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldEnable, v))
}

// EnableGTE applies the GTE predicate on the "enable" field.
func EnableGTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldEnable, v))
}

// EnableLT applies the LT predicate on the "enable" field.
func EnableLT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldEnable, v))
}

// EnableLTE applies the LTE predicate on the "enable" field.
func EnableLTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldEnable, v))
}

// BeginTimeEQ applies the EQ predicate on the "begin_time" field.
func BeginTimeEQ(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldBeginTime, v))
}

// BeginTimeNEQ applies the NEQ predicate on the "begin_time" field.
func BeginTimeNEQ(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldBeginTime, v))
}

// BeginTimeIn applies the In predicate on the "begin_time" field.
func BeginTimeIn(vs ...string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldBeginTime, vs...))
}

// BeginTimeNotIn applies the NotIn predicate on the "begin_time" field.
func BeginTimeNotIn(vs ...string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldBeginTime, vs...))
}

// BeginTimeGT applies the GT predicate on the "begin_time" field.
func BeginTimeGT(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldBeginTime, v))
}

// BeginTimeGTE applies the GTE predicate on the "begin_time" field.
func BeginTimeGTE(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldBeginTime, v))
}

// BeginTimeLT applies the LT predicate on the "begin_time" field.
func BeginTimeLT(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldBeginTime, v))
}

// BeginTimeLTE applies the LTE predicate on the "begin_time" field.
func BeginTimeLTE(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldBeginTime, v))
}

// BeginTimeContains applies the Contains predicate on the "begin_time" field.
func BeginTimeContains(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldContains(FieldBeginTime, v))
}

// BeginTimeHasPrefix applies the HasPrefix predicate on the "begin_time" field.
func BeginTimeHasPrefix(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldHasPrefix(FieldBeginTime, v))
}

// BeginTimeHasSuffix applies the HasSuffix predicate on the "begin_time" field.
func BeginTimeHasSuffix(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldHasSuffix(FieldBeginTime, v))
}

// BeginTimeEqualFold applies the EqualFold predicate on the "begin_time" field.
func BeginTimeEqualFold(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEqualFold(FieldBeginTime, v))
}

// BeginTimeContainsFold applies the ContainsFold predicate on the "begin_time" field.
func BeginTimeContainsFold(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldContainsFold(FieldBeginTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeContains applies the Contains predicate on the "end_time" field.
func EndTimeContains(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldContains(FieldEndTime, v))
}

// EndTimeHasPrefix applies the HasPrefix predicate on the "end_time" field.
func EndTimeHasPrefix(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldHasPrefix(FieldEndTime, v))
}

// EndTimeHasSuffix applies the HasSuffix predicate on the "end_time" field.
func EndTimeHasSuffix(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldHasSuffix(FieldEndTime, v))
}

// EndTimeEqualFold applies the EqualFold predicate on the "end_time" field.
func EndTimeEqualFold(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEqualFold(FieldEndTime, v))
}

// EndTimeContainsFold applies the ContainsFold predicate on the "end_time" field.
func EndTimeContainsFold(v string) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldContainsFold(FieldEndTime, v))
}

// DimensionEQ applies the EQ predicate on the "dimension" field.
func DimensionEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldDimension, v))
}

// DimensionNEQ applies the NEQ predicate on the "dimension" field.
func DimensionNEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldDimension, v))
}

// DimensionIn applies the In predicate on the "dimension" field.
func DimensionIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldDimension, vs...))
}

// DimensionNotIn applies the NotIn predicate on the "dimension" field.
func DimensionNotIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldDimension, vs...))
}

// DimensionGT applies the GT predicate on the "dimension" field.
func DimensionGT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldDimension, v))
}

// DimensionGTE applies the GTE predicate on the "dimension" field.
func DimensionGTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldDimension, v))
}

// DimensionLT applies the LT predicate on the "dimension" field.
func DimensionLT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldDimension, v))
}

// DimensionLTE applies the LTE predicate on the "dimension" field.
func DimensionLTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldDimension, v))
}

// LimitEQ applies the EQ predicate on the "limit" field.
func LimitEQ(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldLimit, v))
}

// LimitNEQ applies the NEQ predicate on the "limit" field.
func LimitNEQ(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldLimit, v))
}

// LimitIn applies the In predicate on the "limit" field.
func LimitIn(vs ...int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldLimit, vs...))
}

// LimitNotIn applies the NotIn predicate on the "limit" field.
func LimitNotIn(vs ...int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldLimit, vs...))
}

// LimitGT applies the GT predicate on the "limit" field.
func LimitGT(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldLimit, v))
}

// LimitGTE applies the GTE predicate on the "limit" field.
func LimitGTE(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldLimit, v))
}

// LimitLT applies the LT predicate on the "limit" field.
func LimitLT(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldLimit, v))
}

// LimitLTE applies the LTE predicate on the "limit" field.
func LimitLTE(v int) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldLimit, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	return predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy(sql.NotPredicates(p))
}
