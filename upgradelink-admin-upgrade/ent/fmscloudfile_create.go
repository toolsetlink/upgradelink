// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/fmscloudfile"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmsCloudFileCreate is the builder for creating a FmsCloudFile entity.
type FmsCloudFileCreate struct {
	config
	mutation *FmsCloudFileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fcfc *FmsCloudFileCreate) SetCreatedAt(t time.Time) *FmsCloudFileCreate {
	fcfc.mutation.SetCreatedAt(t)
	return fcfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcfc *FmsCloudFileCreate) SetNillableCreatedAt(t *time.Time) *FmsCloudFileCreate {
	if t != nil {
		fcfc.SetCreatedAt(*t)
	}
	return fcfc
}

// SetUpdatedAt sets the "updated_at" field.
func (fcfc *FmsCloudFileCreate) SetUpdatedAt(t time.Time) *FmsCloudFileCreate {
	fcfc.mutation.SetUpdatedAt(t)
	return fcfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcfc *FmsCloudFileCreate) SetNillableUpdatedAt(t *time.Time) *FmsCloudFileCreate {
	if t != nil {
		fcfc.SetUpdatedAt(*t)
	}
	return fcfc
}

// SetState sets the "state" field.
func (fcfc *FmsCloudFileCreate) SetState(b bool) *FmsCloudFileCreate {
	fcfc.mutation.SetState(b)
	return fcfc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (fcfc *FmsCloudFileCreate) SetNillableState(b *bool) *FmsCloudFileCreate {
	if b != nil {
		fcfc.SetState(*b)
	}
	return fcfc
}

// SetName sets the "name" field.
func (fcfc *FmsCloudFileCreate) SetName(s string) *FmsCloudFileCreate {
	fcfc.mutation.SetName(s)
	return fcfc
}

// SetURL sets the "url" field.
func (fcfc *FmsCloudFileCreate) SetURL(s string) *FmsCloudFileCreate {
	fcfc.mutation.SetURL(s)
	return fcfc
}

// SetSize sets the "size" field.
func (fcfc *FmsCloudFileCreate) SetSize(u uint64) *FmsCloudFileCreate {
	fcfc.mutation.SetSize(u)
	return fcfc
}

// SetFileType sets the "file_type" field.
func (fcfc *FmsCloudFileCreate) SetFileType(u uint8) *FmsCloudFileCreate {
	fcfc.mutation.SetFileType(u)
	return fcfc
}

// SetUserID sets the "user_id" field.
func (fcfc *FmsCloudFileCreate) SetUserID(s string) *FmsCloudFileCreate {
	fcfc.mutation.SetUserID(s)
	return fcfc
}

// SetCloudFileStorageProviders sets the "cloud_file_storage_providers" field.
func (fcfc *FmsCloudFileCreate) SetCloudFileStorageProviders(u uint64) *FmsCloudFileCreate {
	fcfc.mutation.SetCloudFileStorageProviders(u)
	return fcfc
}

// SetNillableCloudFileStorageProviders sets the "cloud_file_storage_providers" field if the given value is not nil.
func (fcfc *FmsCloudFileCreate) SetNillableCloudFileStorageProviders(u *uint64) *FmsCloudFileCreate {
	if u != nil {
		fcfc.SetCloudFileStorageProviders(*u)
	}
	return fcfc
}

// SetID sets the "id" field.
func (fcfc *FmsCloudFileCreate) SetID(s string) *FmsCloudFileCreate {
	fcfc.mutation.SetID(s)
	return fcfc
}

// Mutation returns the FmsCloudFileMutation object of the builder.
func (fcfc *FmsCloudFileCreate) Mutation() *FmsCloudFileMutation {
	return fcfc.mutation
}

// Save creates the FmsCloudFile in the database.
func (fcfc *FmsCloudFileCreate) Save(ctx context.Context) (*FmsCloudFile, error) {
	return withHooks(ctx, fcfc.sqlSave, fcfc.mutation, fcfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcfc *FmsCloudFileCreate) SaveX(ctx context.Context) *FmsCloudFile {
	v, err := fcfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcfc *FmsCloudFileCreate) Exec(ctx context.Context) error {
	_, err := fcfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfc *FmsCloudFileCreate) ExecX(ctx context.Context) {
	if err := fcfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcfc *FmsCloudFileCreate) check() error {
	if _, ok := fcfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FmsCloudFile.name"`)}
	}
	if _, ok := fcfc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "FmsCloudFile.url"`)}
	}
	if _, ok := fcfc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "FmsCloudFile.size"`)}
	}
	if _, ok := fcfc.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`ent: missing required field "FmsCloudFile.file_type"`)}
	}
	if _, ok := fcfc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "FmsCloudFile.user_id"`)}
	}
	return nil
}

func (fcfc *FmsCloudFileCreate) sqlSave(ctx context.Context) (*FmsCloudFile, error) {
	if err := fcfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FmsCloudFile.ID type: %T", _spec.ID.Value)
		}
	}
	fcfc.mutation.id = &_node.ID
	fcfc.mutation.done = true
	return _node, nil
}

func (fcfc *FmsCloudFileCreate) createSpec() (*FmsCloudFile, *sqlgraph.CreateSpec) {
	var (
		_node = &FmsCloudFile{config: fcfc.config}
		_spec = sqlgraph.NewCreateSpec(fmscloudfile.Table, sqlgraph.NewFieldSpec(fmscloudfile.FieldID, field.TypeString))
	)
	if id, ok := fcfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fcfc.mutation.CreatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fcfc.mutation.UpdatedAt(); ok {
		_spec.SetField(fmscloudfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fcfc.mutation.State(); ok {
		_spec.SetField(fmscloudfile.FieldState, field.TypeBool, value)
		_node.State = value
	}
	if value, ok := fcfc.mutation.Name(); ok {
		_spec.SetField(fmscloudfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fcfc.mutation.URL(); ok {
		_spec.SetField(fmscloudfile.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := fcfc.mutation.Size(); ok {
		_spec.SetField(fmscloudfile.FieldSize, field.TypeUint64, value)
		_node.Size = value
	}
	if value, ok := fcfc.mutation.FileType(); ok {
		_spec.SetField(fmscloudfile.FieldFileType, field.TypeUint8, value)
		_node.FileType = value
	}
	if value, ok := fcfc.mutation.UserID(); ok {
		_spec.SetField(fmscloudfile.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := fcfc.mutation.CloudFileStorageProviders(); ok {
		_spec.SetField(fmscloudfile.FieldCloudFileStorageProviders, field.TypeUint64, value)
		_node.CloudFileStorageProviders = value
	}
	return _node, _spec
}

// FmsCloudFileCreateBulk is the builder for creating many FmsCloudFile entities in bulk.
type FmsCloudFileCreateBulk struct {
	config
	err      error
	builders []*FmsCloudFileCreate
}

// Save creates the FmsCloudFile entities in the database.
func (fcfcb *FmsCloudFileCreateBulk) Save(ctx context.Context) ([]*FmsCloudFile, error) {
	if fcfcb.err != nil {
		return nil, fcfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcfcb.builders))
	nodes := make([]*FmsCloudFile, len(fcfcb.builders))
	mutators := make([]Mutator, len(fcfcb.builders))
	for i := range fcfcb.builders {
		func(i int, root context.Context) {
			builder := fcfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FmsCloudFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcfcb *FmsCloudFileCreateBulk) SaveX(ctx context.Context) []*FmsCloudFile {
	v, err := fcfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcfcb *FmsCloudFileCreateBulk) Exec(ctx context.Context) error {
	_, err := fcfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfcb *FmsCloudFileCreateBulk) ExecX(ctx context.Context) {
	if err := fcfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
