// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpgradeStrategyUpdate is the builder for updating UpgradeConfigurationUpgradeStrategy entities.
type UpgradeConfigurationUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyUpdate builder.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.Where(ps...)
	return ucusu
}

// SetCompanyID sets the "company_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetCompanyID()
	ucusu.mutation.SetCompanyID(i)
	return ucusu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetCompanyID(*i)
	}
	return ucusu
}

// AddCompanyID adds i to the "company_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddCompanyID(i)
	return ucusu
}

// SetEnable sets the "enable" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetEnable()
	ucusu.mutation.SetEnable(i)
	return ucusu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetEnable(*i)
	}
	return ucusu
}

// AddEnable adds i to the "enable" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddEnable(i)
	return ucusu
}

// SetName sets the "name" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetName(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetName(s)
	return ucusu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetName(*s)
	}
	return ucusu
}

// SetDescription sets the "description" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetDescription(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetDescription(s)
	return ucusu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetDescription(*s)
	}
	return ucusu
}

// ClearDescription clears the value of the "description" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) ClearDescription() *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ClearDescription()
	return ucusu
}

// SetConfigurationID sets the "configuration_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetConfigurationID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetConfigurationID()
	ucusu.mutation.SetConfigurationID(i)
	return ucusu
}

// SetNillableConfigurationID sets the "configuration_id" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableConfigurationID(i *int) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetConfigurationID(*i)
	}
	return ucusu
}

// AddConfigurationID adds i to the "configuration_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddConfigurationID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddConfigurationID(i)
	return ucusu
}

// SetConfigurationVersionID sets the "configuration_version_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetConfigurationVersionID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetConfigurationVersionID()
	ucusu.mutation.SetConfigurationVersionID(i)
	return ucusu
}

// SetNillableConfigurationVersionID sets the "configuration_version_id" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableConfigurationVersionID(i *int) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetConfigurationVersionID(*i)
	}
	return ucusu
}

// AddConfigurationVersionID adds i to the "configuration_version_id" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddConfigurationVersionID(i int) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddConfigurationVersionID(i)
	return ucusu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetBeginDatetime(t)
	return ucusu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	if t != nil {
		ucusu.SetBeginDatetime(*t)
	}
	return ucusu
}

// SetEndDatetime sets the "end_datetime" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetEndDatetime(t)
	return ucusu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	if t != nil {
		ucusu.SetEndDatetime(*t)
	}
	return ucusu
}

// SetUpgradeType sets the "upgrade_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetUpgradeType()
	ucusu.mutation.SetUpgradeType(i)
	return ucusu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetUpgradeType(*i)
	}
	return ucusu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddUpgradeType(i)
	return ucusu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetPromptUpgradeContent(s)
	return ucusu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetPromptUpgradeContent(*s)
	}
	return ucusu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ClearPromptUpgradeContent()
	return ucusu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetUpgradeDevType()
	ucusu.mutation.SetUpgradeDevType(i)
	return ucusu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetUpgradeDevType(*i)
	}
	return ucusu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddUpgradeDevType(i)
	return ucusu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetUpgradeDevData(s)
	return ucusu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetUpgradeDevData(*s)
	}
	return ucusu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetUpgradeVersionType()
	ucusu.mutation.SetUpgradeVersionType(i)
	return ucusu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetUpgradeVersionType(*i)
	}
	return ucusu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddUpgradeVersionType(i)
	return ucusu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetUpgradeVersionData(s)
	return ucusu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetUpgradeVersionData(*s)
	}
	return ucusu
}

// SetIsGray sets the "is_gray" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetIsGray()
	ucusu.mutation.SetIsGray(i)
	return ucusu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetIsGray(*i)
	}
	return ucusu
}

// AddIsGray adds i to the "is_gray" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddIsGray(i)
	return ucusu
}

// SetGrayData sets the "gray_data" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetGrayData(s)
	return ucusu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetGrayData(*s)
	}
	return ucusu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetIsFlowLimit()
	ucusu.mutation.SetIsFlowLimit(i)
	return ucusu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetIsFlowLimit(*i)
	}
	return ucusu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddIsFlowLimit(i)
	return ucusu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetFlowLimitData(s)
	return ucusu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeConfigurationUpgradeStrategyUpdate {
	if s != nil {
		ucusu.SetFlowLimitData(*s)
	}
	return ucusu
}

// SetIsDel sets the "is_del" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ResetIsDel()
	ucusu.mutation.SetIsDel(i)
	return ucusu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	if i != nil {
		ucusu.SetIsDel(*i)
	}
	return ucusu
}

// AddIsDel adds i to the "is_del" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.AddIsDel(i)
	return ucusu
}

// SetCreateAt sets the "create_at" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetCreateAt(t)
	return ucusu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	if t != nil {
		ucusu.SetCreateAt(*t)
	}
	return ucusu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ClearCreateAt()
	return ucusu
}

// SetUpdateAt sets the "update_at" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.SetUpdateAt(t)
	return ucusu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdate {
	if t != nil {
		ucusu.SetUpdateAt(*t)
	}
	return ucusu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyUpdate {
	ucusu.mutation.ClearUpdateAt()
	return ucusu
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyMutation object of the builder.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) Mutation() *UpgradeConfigurationUpgradeStrategyMutation {
	return ucusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucusu.sqlSave, ucusu.mutation, ucusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ucusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ucusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := ucusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusu *UpgradeConfigurationUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategy.Table, upgradeconfigurationupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategy.FieldID, field.TypeInt))
	if ps := ucusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.Name(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ucusu.mutation.Description(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ucusu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ucusu.mutation.ConfigurationID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.AddedConfigurationID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.ConfigurationVersionID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldConfigurationVersionID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.AddedConfigurationVersionID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldConfigurationVersionID, field.TypeInt, value)
	}
	if value, ok := ucusu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ucusu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ucusu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ucusu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ucusu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ucusu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ucusu.mutation.IsGray(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.GrayData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ucusu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ucusu.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucusu.mutation.done = true
	return n, nil
}

// UpgradeConfigurationUpgradeStrategyUpdateOne is the builder for updating a single UpgradeConfigurationUpgradeStrategy entity.
type UpgradeConfigurationUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetCompanyID()
	ucusuo.mutation.SetCompanyID(i)
	return ucusuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetCompanyID(*i)
	}
	return ucusuo
}

// AddCompanyID adds i to the "company_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddCompanyID(i)
	return ucusuo
}

// SetEnable sets the "enable" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetEnable()
	ucusuo.mutation.SetEnable(i)
	return ucusuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetEnable(*i)
	}
	return ucusuo
}

// AddEnable adds i to the "enable" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddEnable(i)
	return ucusuo
}

// SetName sets the "name" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetName(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetName(s)
	return ucusuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetName(*s)
	}
	return ucusuo
}

// SetDescription sets the "description" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetDescription(s)
	return ucusuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetDescription(*s)
	}
	return ucusuo
}

// ClearDescription clears the value of the "description" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) ClearDescription() *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ClearDescription()
	return ucusuo
}

// SetConfigurationID sets the "configuration_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetConfigurationID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetConfigurationID()
	ucusuo.mutation.SetConfigurationID(i)
	return ucusuo
}

// SetNillableConfigurationID sets the "configuration_id" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableConfigurationID(i *int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetConfigurationID(*i)
	}
	return ucusuo
}

// AddConfigurationID adds i to the "configuration_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddConfigurationID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddConfigurationID(i)
	return ucusuo
}

// SetConfigurationVersionID sets the "configuration_version_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetConfigurationVersionID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetConfigurationVersionID()
	ucusuo.mutation.SetConfigurationVersionID(i)
	return ucusuo
}

// SetNillableConfigurationVersionID sets the "configuration_version_id" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableConfigurationVersionID(i *int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetConfigurationVersionID(*i)
	}
	return ucusuo
}

// AddConfigurationVersionID adds i to the "configuration_version_id" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddConfigurationVersionID(i int) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddConfigurationVersionID(i)
	return ucusuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetBeginDatetime(t)
	return ucusuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if t != nil {
		ucusuo.SetBeginDatetime(*t)
	}
	return ucusuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetEndDatetime(t)
	return ucusuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if t != nil {
		ucusuo.SetEndDatetime(*t)
	}
	return ucusuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetUpgradeType()
	ucusuo.mutation.SetUpgradeType(i)
	return ucusuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetUpgradeType(*i)
	}
	return ucusuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddUpgradeType(i)
	return ucusuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetPromptUpgradeContent(s)
	return ucusuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetPromptUpgradeContent(*s)
	}
	return ucusuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ClearPromptUpgradeContent()
	return ucusuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetUpgradeDevType()
	ucusuo.mutation.SetUpgradeDevType(i)
	return ucusuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetUpgradeDevType(*i)
	}
	return ucusuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddUpgradeDevType(i)
	return ucusuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetUpgradeDevData(s)
	return ucusuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetUpgradeDevData(*s)
	}
	return ucusuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetUpgradeVersionType()
	ucusuo.mutation.SetUpgradeVersionType(i)
	return ucusuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetUpgradeVersionType(*i)
	}
	return ucusuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddUpgradeVersionType(i)
	return ucusuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetUpgradeVersionData(s)
	return ucusuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetUpgradeVersionData(*s)
	}
	return ucusuo
}

// SetIsGray sets the "is_gray" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetIsGray()
	ucusuo.mutation.SetIsGray(i)
	return ucusuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetIsGray(*i)
	}
	return ucusuo
}

// AddIsGray adds i to the "is_gray" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddIsGray(i)
	return ucusuo
}

// SetGrayData sets the "gray_data" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetGrayData(s)
	return ucusuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetGrayData(*s)
	}
	return ucusuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetIsFlowLimit()
	ucusuo.mutation.SetIsFlowLimit(i)
	return ucusuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetIsFlowLimit(*i)
	}
	return ucusuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddIsFlowLimit(i)
	return ucusuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetFlowLimitData(s)
	return ucusuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if s != nil {
		ucusuo.SetFlowLimitData(*s)
	}
	return ucusuo
}

// SetIsDel sets the "is_del" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ResetIsDel()
	ucusuo.mutation.SetIsDel(i)
	return ucusuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if i != nil {
		ucusuo.SetIsDel(*i)
	}
	return ucusuo
}

// AddIsDel adds i to the "is_del" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.AddIsDel(i)
	return ucusuo
}

// SetCreateAt sets the "create_at" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetCreateAt(t)
	return ucusuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if t != nil {
		ucusuo.SetCreateAt(*t)
	}
	return ucusuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ClearCreateAt()
	return ucusuo
}

// SetUpdateAt sets the "update_at" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.SetUpdateAt(t)
	return ucusuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	if t != nil {
		ucusuo.SetUpdateAt(*t)
	}
	return ucusuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.ClearUpdateAt()
	return ucusuo
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyMutation object of the builder.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) Mutation() *UpgradeConfigurationUpgradeStrategyMutation {
	return ucusuo.mutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyUpdate builder.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.mutation.Where(ps...)
	return ucusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeConfigurationUpgradeStrategyUpdateOne {
	ucusuo.fields = append([]string{field}, fields...)
	return ucusuo
}

// Save executes the query and returns the updated UpgradeConfigurationUpgradeStrategy entity.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeConfigurationUpgradeStrategy, error) {
	return withHooks(ctx, ucusuo.sqlSave, ucusuo.mutation, ucusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeConfigurationUpgradeStrategy {
	node, err := ucusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ucusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ucusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusuo *UpgradeConfigurationUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeConfigurationUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategy.Table, upgradeconfigurationupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategy.FieldID, field.TypeInt))
	id, ok := ucusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeConfigurationUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeconfigurationupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradeconfigurationupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeconfigurationupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.Name(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ucusuo.mutation.Description(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ucusuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ucusuo.mutation.ConfigurationID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.AddedConfigurationID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.ConfigurationVersionID(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldConfigurationVersionID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.AddedConfigurationVersionID(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldConfigurationVersionID, field.TypeInt, value)
	}
	if value, ok := ucusuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ucusuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ucusuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ucusuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ucusuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ucusuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ucusuo.mutation.IsGray(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.GrayData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ucusuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ucusuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeConfigurationUpgradeStrategy{config: ucusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucusuo.mutation.done = true
	return _node, nil
}
