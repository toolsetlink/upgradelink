// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetauriversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriVersionDelete is the builder for deleting a UpgradeTauriVersion entity.
type UpgradeTauriVersionDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriVersionMutation
}

// Where appends a list predicates to the UpgradeTauriVersionDelete builder.
func (utvd *UpgradeTauriVersionDelete) Where(ps ...predicate.UpgradeTauriVersion) *UpgradeTauriVersionDelete {
	utvd.mutation.Where(ps...)
	return utvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utvd *UpgradeTauriVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utvd.sqlExec, utvd.mutation, utvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utvd *UpgradeTauriVersionDelete) ExecX(ctx context.Context) int {
	n, err := utvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utvd *UpgradeTauriVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradetauriversion.Table, sqlgraph.NewFieldSpec(upgradetauriversion.FieldID, field.TypeInt))
	if ps := utvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utvd.mutation.done = true
	return affected, err
}

// UpgradeTauriVersionDeleteOne is the builder for deleting a single UpgradeTauriVersion entity.
type UpgradeTauriVersionDeleteOne struct {
	utvd *UpgradeTauriVersionDelete
}

// Where appends a list predicates to the UpgradeTauriVersionDelete builder.
func (utvdo *UpgradeTauriVersionDeleteOne) Where(ps ...predicate.UpgradeTauriVersion) *UpgradeTauriVersionDeleteOne {
	utvdo.utvd.mutation.Where(ps...)
	return utvdo
}

// Exec executes the deletion query.
func (utvdo *UpgradeTauriVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := utvdo.utvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradetauriversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utvdo *UpgradeTauriVersionDeleteOne) ExecX(ctx context.Context) {
	if err := utvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
