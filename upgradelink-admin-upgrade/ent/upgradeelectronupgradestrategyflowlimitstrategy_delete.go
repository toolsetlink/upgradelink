// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeElectronUpgradeStrategyFlowLimitStrategy entity.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete builder.
func (ueusflsd *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete {
	ueusflsd.mutation.Where(ps...)
	return ueusflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ueusflsd *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusflsd.sqlExec, ueusflsd.mutation, ueusflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusflsd *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ueusflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ueusflsd *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeelectronupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ueusflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ueusflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ueusflsd.mutation.done = true
	return affected, err
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeElectronUpgradeStrategyFlowLimitStrategy entity.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	ueusflsd *UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyFlowLimitStrategyDelete builder.
func (ueusflsdo *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne {
	ueusflsdo.ueusflsd.mutation.Where(ps...)
	return ueusflsdo
}

// Exec executes the deletion query.
func (ueusflsdo *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ueusflsdo.ueusflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusflsdo *UpgradeElectronUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ueusflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
