// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedev"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevUpdate is the builder for updating UpgradeDev entities.
type UpgradeDevUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeDevMutation
}

// Where appends a list predicates to the UpgradeDevUpdate builder.
func (udu *UpgradeDevUpdate) Where(ps ...predicate.UpgradeDev) *UpgradeDevUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetCompanyID sets the "company_id" field.
func (udu *UpgradeDevUpdate) SetCompanyID(i int) *UpgradeDevUpdate {
	udu.mutation.ResetCompanyID()
	udu.mutation.SetCompanyID(i)
	return udu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (udu *UpgradeDevUpdate) SetNillableCompanyID(i *int) *UpgradeDevUpdate {
	if i != nil {
		udu.SetCompanyID(*i)
	}
	return udu
}

// AddCompanyID adds i to the "company_id" field.
func (udu *UpgradeDevUpdate) AddCompanyID(i int) *UpgradeDevUpdate {
	udu.mutation.AddCompanyID(i)
	return udu
}

// SetKey sets the "key" field.
func (udu *UpgradeDevUpdate) SetKey(s string) *UpgradeDevUpdate {
	udu.mutation.SetKey(s)
	return udu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (udu *UpgradeDevUpdate) SetNillableKey(s *string) *UpgradeDevUpdate {
	if s != nil {
		udu.SetKey(*s)
	}
	return udu
}

// SetIsDel sets the "is_del" field.
func (udu *UpgradeDevUpdate) SetIsDel(i int32) *UpgradeDevUpdate {
	udu.mutation.ResetIsDel()
	udu.mutation.SetIsDel(i)
	return udu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udu *UpgradeDevUpdate) SetNillableIsDel(i *int32) *UpgradeDevUpdate {
	if i != nil {
		udu.SetIsDel(*i)
	}
	return udu
}

// AddIsDel adds i to the "is_del" field.
func (udu *UpgradeDevUpdate) AddIsDel(i int32) *UpgradeDevUpdate {
	udu.mutation.AddIsDel(i)
	return udu
}

// SetCreateAt sets the "create_at" field.
func (udu *UpgradeDevUpdate) SetCreateAt(t time.Time) *UpgradeDevUpdate {
	udu.mutation.SetCreateAt(t)
	return udu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udu *UpgradeDevUpdate) SetNillableCreateAt(t *time.Time) *UpgradeDevUpdate {
	if t != nil {
		udu.SetCreateAt(*t)
	}
	return udu
}

// ClearCreateAt clears the value of the "create_at" field.
func (udu *UpgradeDevUpdate) ClearCreateAt() *UpgradeDevUpdate {
	udu.mutation.ClearCreateAt()
	return udu
}

// SetUpdateAt sets the "update_at" field.
func (udu *UpgradeDevUpdate) SetUpdateAt(t time.Time) *UpgradeDevUpdate {
	udu.mutation.SetUpdateAt(t)
	return udu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udu *UpgradeDevUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeDevUpdate {
	if t != nil {
		udu.SetUpdateAt(*t)
	}
	return udu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udu *UpgradeDevUpdate) ClearUpdateAt() *UpgradeDevUpdate {
	udu.mutation.ClearUpdateAt()
	return udu
}

// Mutation returns the UpgradeDevMutation object of the builder.
func (udu *UpgradeDevUpdate) Mutation() *UpgradeDevMutation {
	return udu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UpgradeDevUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UpgradeDevUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UpgradeDevUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UpgradeDevUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udu *UpgradeDevUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedev.Table, upgradedev.Columns, sqlgraph.NewFieldSpec(upgradedev.FieldID, field.TypeInt))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.CompanyID(); ok {
		_spec.SetField(upgradedev.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedev.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udu.mutation.Key(); ok {
		_spec.SetField(upgradedev.FieldKey, field.TypeString, value)
	}
	if value, ok := udu.mutation.IsDel(); ok {
		_spec.SetField(upgradedev.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedev.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udu.mutation.CreateAt(); ok {
		_spec.SetField(upgradedev.FieldCreateAt, field.TypeTime, value)
	}
	if udu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedev.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedev.FieldUpdateAt, field.TypeTime, value)
	}
	if udu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedev.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedev.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UpgradeDevUpdateOne is the builder for updating a single UpgradeDev entity.
type UpgradeDevUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeDevMutation
}

// SetCompanyID sets the "company_id" field.
func (uduo *UpgradeDevUpdateOne) SetCompanyID(i int) *UpgradeDevUpdateOne {
	uduo.mutation.ResetCompanyID()
	uduo.mutation.SetCompanyID(i)
	return uduo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uduo *UpgradeDevUpdateOne) SetNillableCompanyID(i *int) *UpgradeDevUpdateOne {
	if i != nil {
		uduo.SetCompanyID(*i)
	}
	return uduo
}

// AddCompanyID adds i to the "company_id" field.
func (uduo *UpgradeDevUpdateOne) AddCompanyID(i int) *UpgradeDevUpdateOne {
	uduo.mutation.AddCompanyID(i)
	return uduo
}

// SetKey sets the "key" field.
func (uduo *UpgradeDevUpdateOne) SetKey(s string) *UpgradeDevUpdateOne {
	uduo.mutation.SetKey(s)
	return uduo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uduo *UpgradeDevUpdateOne) SetNillableKey(s *string) *UpgradeDevUpdateOne {
	if s != nil {
		uduo.SetKey(*s)
	}
	return uduo
}

// SetIsDel sets the "is_del" field.
func (uduo *UpgradeDevUpdateOne) SetIsDel(i int32) *UpgradeDevUpdateOne {
	uduo.mutation.ResetIsDel()
	uduo.mutation.SetIsDel(i)
	return uduo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uduo *UpgradeDevUpdateOne) SetNillableIsDel(i *int32) *UpgradeDevUpdateOne {
	if i != nil {
		uduo.SetIsDel(*i)
	}
	return uduo
}

// AddIsDel adds i to the "is_del" field.
func (uduo *UpgradeDevUpdateOne) AddIsDel(i int32) *UpgradeDevUpdateOne {
	uduo.mutation.AddIsDel(i)
	return uduo
}

// SetCreateAt sets the "create_at" field.
func (uduo *UpgradeDevUpdateOne) SetCreateAt(t time.Time) *UpgradeDevUpdateOne {
	uduo.mutation.SetCreateAt(t)
	return uduo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uduo *UpgradeDevUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeDevUpdateOne {
	if t != nil {
		uduo.SetCreateAt(*t)
	}
	return uduo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uduo *UpgradeDevUpdateOne) ClearCreateAt() *UpgradeDevUpdateOne {
	uduo.mutation.ClearCreateAt()
	return uduo
}

// SetUpdateAt sets the "update_at" field.
func (uduo *UpgradeDevUpdateOne) SetUpdateAt(t time.Time) *UpgradeDevUpdateOne {
	uduo.mutation.SetUpdateAt(t)
	return uduo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uduo *UpgradeDevUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeDevUpdateOne {
	if t != nil {
		uduo.SetUpdateAt(*t)
	}
	return uduo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uduo *UpgradeDevUpdateOne) ClearUpdateAt() *UpgradeDevUpdateOne {
	uduo.mutation.ClearUpdateAt()
	return uduo
}

// Mutation returns the UpgradeDevMutation object of the builder.
func (uduo *UpgradeDevUpdateOne) Mutation() *UpgradeDevMutation {
	return uduo.mutation
}

// Where appends a list predicates to the UpgradeDevUpdate builder.
func (uduo *UpgradeDevUpdateOne) Where(ps ...predicate.UpgradeDev) *UpgradeDevUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UpgradeDevUpdateOne) Select(field string, fields ...string) *UpgradeDevUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UpgradeDev entity.
func (uduo *UpgradeDevUpdateOne) Save(ctx context.Context) (*UpgradeDev, error) {
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UpgradeDevUpdateOne) SaveX(ctx context.Context) *UpgradeDev {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UpgradeDevUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UpgradeDevUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uduo *UpgradeDevUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeDev, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedev.Table, upgradedev.Columns, sqlgraph.NewFieldSpec(upgradedev.FieldID, field.TypeInt))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeDev.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradedev.FieldID)
		for _, f := range fields {
			if !upgradedev.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradedev.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.CompanyID(); ok {
		_spec.SetField(upgradedev.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uduo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedev.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uduo.mutation.Key(); ok {
		_spec.SetField(upgradedev.FieldKey, field.TypeString, value)
	}
	if value, ok := uduo.mutation.IsDel(); ok {
		_spec.SetField(upgradedev.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uduo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedev.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uduo.mutation.CreateAt(); ok {
		_spec.SetField(upgradedev.FieldCreateAt, field.TypeTime, value)
	}
	if uduo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedev.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uduo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedev.FieldUpdateAt, field.TypeTime, value)
	}
	if uduo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedev.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeDev{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedev.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
