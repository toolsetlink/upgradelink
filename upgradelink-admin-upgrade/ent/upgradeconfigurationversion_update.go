// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeconfigurationversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationVersionUpdate is the builder for updating UpgradeConfigurationVersion entities.
type UpgradeConfigurationVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationVersionMutation
}

// Where appends a list predicates to the UpgradeConfigurationVersionUpdate builder.
func (ucvu *UpgradeConfigurationVersionUpdate) Where(ps ...predicate.UpgradeConfigurationVersion) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.Where(ps...)
	return ucvu
}

// SetCompanyID sets the "company_id" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetCompanyID(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ResetCompanyID()
	ucvu.mutation.SetCompanyID(i)
	return ucvu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableCompanyID(i *int) *UpgradeConfigurationVersionUpdate {
	if i != nil {
		ucvu.SetCompanyID(*i)
	}
	return ucvu
}

// AddCompanyID adds i to the "company_id" field.
func (ucvu *UpgradeConfigurationVersionUpdate) AddCompanyID(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.AddCompanyID(i)
	return ucvu
}

// SetConfigurationID sets the "configuration_id" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetConfigurationID(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ResetConfigurationID()
	ucvu.mutation.SetConfigurationID(i)
	return ucvu
}

// SetNillableConfigurationID sets the "configuration_id" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableConfigurationID(i *int) *UpgradeConfigurationVersionUpdate {
	if i != nil {
		ucvu.SetConfigurationID(*i)
	}
	return ucvu
}

// AddConfigurationID adds i to the "configuration_id" field.
func (ucvu *UpgradeConfigurationVersionUpdate) AddConfigurationID(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.AddConfigurationID(i)
	return ucvu
}

// SetContent sets the "content" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetContent(s string) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.SetContent(s)
	return ucvu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableContent(s *string) *UpgradeConfigurationVersionUpdate {
	if s != nil {
		ucvu.SetContent(*s)
	}
	return ucvu
}

// SetVersionName sets the "version_name" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetVersionName(s string) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.SetVersionName(s)
	return ucvu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableVersionName(s *string) *UpgradeConfigurationVersionUpdate {
	if s != nil {
		ucvu.SetVersionName(*s)
	}
	return ucvu
}

// SetVersionCode sets the "version_code" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetVersionCode(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ResetVersionCode()
	ucvu.mutation.SetVersionCode(i)
	return ucvu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableVersionCode(i *int) *UpgradeConfigurationVersionUpdate {
	if i != nil {
		ucvu.SetVersionCode(*i)
	}
	return ucvu
}

// AddVersionCode adds i to the "version_code" field.
func (ucvu *UpgradeConfigurationVersionUpdate) AddVersionCode(i int) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.AddVersionCode(i)
	return ucvu
}

// SetDescription sets the "description" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetDescription(s string) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.SetDescription(s)
	return ucvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableDescription(s *string) *UpgradeConfigurationVersionUpdate {
	if s != nil {
		ucvu.SetDescription(*s)
	}
	return ucvu
}

// ClearDescription clears the value of the "description" field.
func (ucvu *UpgradeConfigurationVersionUpdate) ClearDescription() *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ClearDescription()
	return ucvu
}

// SetIsDel sets the "is_del" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetIsDel(i int32) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ResetIsDel()
	ucvu.mutation.SetIsDel(i)
	return ucvu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableIsDel(i *int32) *UpgradeConfigurationVersionUpdate {
	if i != nil {
		ucvu.SetIsDel(*i)
	}
	return ucvu
}

// AddIsDel adds i to the "is_del" field.
func (ucvu *UpgradeConfigurationVersionUpdate) AddIsDel(i int32) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.AddIsDel(i)
	return ucvu
}

// SetCreateAt sets the "create_at" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetCreateAt(t time.Time) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.SetCreateAt(t)
	return ucvu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationVersionUpdate {
	if t != nil {
		ucvu.SetCreateAt(*t)
	}
	return ucvu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucvu *UpgradeConfigurationVersionUpdate) ClearCreateAt() *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ClearCreateAt()
	return ucvu
}

// SetUpdateAt sets the "update_at" field.
func (ucvu *UpgradeConfigurationVersionUpdate) SetUpdateAt(t time.Time) *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.SetUpdateAt(t)
	return ucvu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucvu *UpgradeConfigurationVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationVersionUpdate {
	if t != nil {
		ucvu.SetUpdateAt(*t)
	}
	return ucvu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucvu *UpgradeConfigurationVersionUpdate) ClearUpdateAt() *UpgradeConfigurationVersionUpdate {
	ucvu.mutation.ClearUpdateAt()
	return ucvu
}

// Mutation returns the UpgradeConfigurationVersionMutation object of the builder.
func (ucvu *UpgradeConfigurationVersionUpdate) Mutation() *UpgradeConfigurationVersionMutation {
	return ucvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucvu *UpgradeConfigurationVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucvu.sqlSave, ucvu.mutation, ucvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucvu *UpgradeConfigurationVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := ucvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucvu *UpgradeConfigurationVersionUpdate) Exec(ctx context.Context) error {
	_, err := ucvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucvu *UpgradeConfigurationVersionUpdate) ExecX(ctx context.Context) {
	if err := ucvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucvu *UpgradeConfigurationVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationversion.Table, upgradeconfigurationversion.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationversion.FieldID, field.TypeInt))
	if ps := ucvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucvu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.ConfigurationID(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.AddedConfigurationID(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.Content(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldContent, field.TypeString, value)
	}
	if value, ok := ucvu.mutation.VersionName(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := ucvu.mutation.VersionCode(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ucvu.mutation.Description(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldDescription, field.TypeString, value)
	}
	if ucvu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldDescription, field.TypeString)
	}
	if value, ok := ucvu.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucvu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucvu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldCreateAt, field.TypeTime, value)
	}
	if ucvu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucvu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldUpdateAt, field.TypeTime, value)
	}
	if ucvu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucvu.mutation.done = true
	return n, nil
}

// UpgradeConfigurationVersionUpdateOne is the builder for updating a single UpgradeConfigurationVersion entity.
type UpgradeConfigurationVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeConfigurationVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetCompanyID(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ResetCompanyID()
	ucvuo.mutation.SetCompanyID(i)
	return ucvuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeConfigurationVersionUpdateOne {
	if i != nil {
		ucvuo.SetCompanyID(*i)
	}
	return ucvuo
}

// AddCompanyID adds i to the "company_id" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) AddCompanyID(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.AddCompanyID(i)
	return ucvuo
}

// SetConfigurationID sets the "configuration_id" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetConfigurationID(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ResetConfigurationID()
	ucvuo.mutation.SetConfigurationID(i)
	return ucvuo
}

// SetNillableConfigurationID sets the "configuration_id" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableConfigurationID(i *int) *UpgradeConfigurationVersionUpdateOne {
	if i != nil {
		ucvuo.SetConfigurationID(*i)
	}
	return ucvuo
}

// AddConfigurationID adds i to the "configuration_id" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) AddConfigurationID(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.AddConfigurationID(i)
	return ucvuo
}

// SetContent sets the "content" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetContent(s string) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.SetContent(s)
	return ucvuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableContent(s *string) *UpgradeConfigurationVersionUpdateOne {
	if s != nil {
		ucvuo.SetContent(*s)
	}
	return ucvuo
}

// SetVersionName sets the "version_name" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetVersionName(s string) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.SetVersionName(s)
	return ucvuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeConfigurationVersionUpdateOne {
	if s != nil {
		ucvuo.SetVersionName(*s)
	}
	return ucvuo
}

// SetVersionCode sets the "version_code" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetVersionCode(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ResetVersionCode()
	ucvuo.mutation.SetVersionCode(i)
	return ucvuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeConfigurationVersionUpdateOne {
	if i != nil {
		ucvuo.SetVersionCode(*i)
	}
	return ucvuo
}

// AddVersionCode adds i to the "version_code" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) AddVersionCode(i int) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.AddVersionCode(i)
	return ucvuo
}

// SetDescription sets the "description" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetDescription(s string) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.SetDescription(s)
	return ucvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableDescription(s *string) *UpgradeConfigurationVersionUpdateOne {
	if s != nil {
		ucvuo.SetDescription(*s)
	}
	return ucvuo
}

// ClearDescription clears the value of the "description" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) ClearDescription() *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ClearDescription()
	return ucvuo
}

// SetIsDel sets the "is_del" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetIsDel(i int32) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ResetIsDel()
	ucvuo.mutation.SetIsDel(i)
	return ucvuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeConfigurationVersionUpdateOne {
	if i != nil {
		ucvuo.SetIsDel(*i)
	}
	return ucvuo
}

// AddIsDel adds i to the "is_del" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) AddIsDel(i int32) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.AddIsDel(i)
	return ucvuo
}

// SetCreateAt sets the "create_at" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.SetCreateAt(t)
	return ucvuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationVersionUpdateOne {
	if t != nil {
		ucvuo.SetCreateAt(*t)
	}
	return ucvuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) ClearCreateAt() *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ClearCreateAt()
	return ucvuo
}

// SetUpdateAt sets the "update_at" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.SetUpdateAt(t)
	return ucvuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationVersionUpdateOne {
	if t != nil {
		ucvuo.SetUpdateAt(*t)
	}
	return ucvuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) ClearUpdateAt() *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.ClearUpdateAt()
	return ucvuo
}

// Mutation returns the UpgradeConfigurationVersionMutation object of the builder.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) Mutation() *UpgradeConfigurationVersionMutation {
	return ucvuo.mutation
}

// Where appends a list predicates to the UpgradeConfigurationVersionUpdate builder.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) Where(ps ...predicate.UpgradeConfigurationVersion) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.mutation.Where(ps...)
	return ucvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) Select(field string, fields ...string) *UpgradeConfigurationVersionUpdateOne {
	ucvuo.fields = append([]string{field}, fields...)
	return ucvuo
}

// Save executes the query and returns the updated UpgradeConfigurationVersion entity.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) Save(ctx context.Context) (*UpgradeConfigurationVersion, error) {
	return withHooks(ctx, ucvuo.sqlSave, ucvuo.mutation, ucvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) SaveX(ctx context.Context) *UpgradeConfigurationVersion {
	node, err := ucvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := ucvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucvuo *UpgradeConfigurationVersionUpdateOne) ExecX(ctx context.Context) {
	if err := ucvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucvuo *UpgradeConfigurationVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeConfigurationVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationversion.Table, upgradeconfigurationversion.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationversion.FieldID, field.TypeInt))
	id, ok := ucvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeConfigurationVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeconfigurationversion.FieldID)
		for _, f := range fields {
			if !upgradeconfigurationversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeconfigurationversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucvuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.ConfigurationID(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.AddedConfigurationID(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldConfigurationID, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.Content(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldContent, field.TypeString, value)
	}
	if value, ok := ucvuo.mutation.VersionName(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := ucvuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := ucvuo.mutation.Description(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldDescription, field.TypeString, value)
	}
	if ucvuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldDescription, field.TypeString)
	}
	if value, ok := ucvuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucvuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucvuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldCreateAt, field.TypeTime, value)
	}
	if ucvuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucvuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationversion.FieldUpdateAt, field.TypeTime, value)
	}
	if ucvuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeConfigurationVersion{config: ucvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucvuo.mutation.done = true
	return _node, nil
}
