// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/fmscloudfile"
	"upgradelink-admin-upgrade/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FmsCloudFileDelete is the builder for deleting a FmsCloudFile entity.
type FmsCloudFileDelete struct {
	config
	hooks    []Hook
	mutation *FmsCloudFileMutation
}

// Where appends a list predicates to the FmsCloudFileDelete builder.
func (fcfd *FmsCloudFileDelete) Where(ps ...predicate.FmsCloudFile) *FmsCloudFileDelete {
	fcfd.mutation.Where(ps...)
	return fcfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fcfd *FmsCloudFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fcfd.sqlExec, fcfd.mutation, fcfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfd *FmsCloudFileDelete) ExecX(ctx context.Context) int {
	n, err := fcfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fcfd *FmsCloudFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(fmscloudfile.Table, sqlgraph.NewFieldSpec(fmscloudfile.FieldID, field.TypeString))
	if ps := fcfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fcfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fcfd.mutation.done = true
	return affected, err
}

// FmsCloudFileDeleteOne is the builder for deleting a single FmsCloudFile entity.
type FmsCloudFileDeleteOne struct {
	fcfd *FmsCloudFileDelete
}

// Where appends a list predicates to the FmsCloudFileDelete builder.
func (fcfdo *FmsCloudFileDeleteOne) Where(ps ...predicate.FmsCloudFile) *FmsCloudFileDeleteOne {
	fcfdo.fcfd.mutation.Where(ps...)
	return fcfdo
}

// Exec executes the deletion query.
func (fcfdo *FmsCloudFileDeleteOne) Exec(ctx context.Context) error {
	n, err := fcfdo.fcfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{fmscloudfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fcfdo *FmsCloudFileDeleteOne) ExecX(ctx context.Context) {
	if err := fcfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
