// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeTauriUpgradeStrategyFlowLimitStrategy entities.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate builder.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.Where(ps...)
	return utusflsu
}

// SetEnable sets the "enable" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ResetEnable()
	utusflsu.mutation.SetEnable(i)
	return utusflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		utusflsu.SetEnable(*i)
	}
	return utusflsu
}

// AddEnable adds i to the "enable" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.AddEnable(i)
	return utusflsu
}

// SetBeginTime sets the "begin_time" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.SetBeginTime(s)
	return utusflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		utusflsu.SetBeginTime(*s)
	}
	return utusflsu
}

// SetEndTime sets the "end_time" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.SetEndTime(s)
	return utusflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		utusflsu.SetEndTime(*s)
	}
	return utusflsu
}

// SetDimension sets the "dimension" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ResetDimension()
	utusflsu.mutation.SetDimension(i)
	return utusflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		utusflsu.SetDimension(*i)
	}
	return utusflsu
}

// AddDimension adds i to the "dimension" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.AddDimension(i)
	return utusflsu
}

// SetLimit sets the "limit" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ResetLimit()
	utusflsu.mutation.SetLimit(i)
	return utusflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		utusflsu.SetLimit(*i)
	}
	return utusflsu
}

// AddLimit adds i to the "limit" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.AddLimit(i)
	return utusflsu
}

// SetIsDel sets the "is_del" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ResetIsDel()
	utusflsu.mutation.SetIsDel(i)
	return utusflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		utusflsu.SetIsDel(*i)
	}
	return utusflsu
}

// AddIsDel adds i to the "is_del" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.AddIsDel(i)
	return utusflsu
}

// SetCreateAt sets the "create_at" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.SetCreateAt(t)
	return utusflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		utusflsu.SetCreateAt(*t)
	}
	return utusflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ClearCreateAt()
	return utusflsu
}

// SetUpdateAt sets the "update_at" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.SetUpdateAt(t)
	return utusflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		utusflsu.SetUpdateAt(*t)
	}
	return utusflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate {
	utusflsu.mutation.ClearUpdateAt()
	return utusflsu
}

// Mutation returns the UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation {
	return utusflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utusflsu.sqlSave, utusflsu.mutation, utusflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := utusflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := utusflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := utusflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusflsu *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategyflowlimitstrategy.Table, upgradetauriupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := utusflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusflsu.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := utusflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := utusflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.Limit(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utusflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utusflsu.mutation.done = true
	return n, nil
}

// UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeTauriUpgradeStrategyFlowLimitStrategy entity.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ResetEnable()
	utusflsuo.mutation.SetEnable(i)
	return utusflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		utusflsuo.SetEnable(*i)
	}
	return utusflsuo
}

// AddEnable adds i to the "enable" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.AddEnable(i)
	return utusflsuo
}

// SetBeginTime sets the "begin_time" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.SetBeginTime(s)
	return utusflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		utusflsuo.SetBeginTime(*s)
	}
	return utusflsuo
}

// SetEndTime sets the "end_time" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.SetEndTime(s)
	return utusflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		utusflsuo.SetEndTime(*s)
	}
	return utusflsuo
}

// SetDimension sets the "dimension" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ResetDimension()
	utusflsuo.mutation.SetDimension(i)
	return utusflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		utusflsuo.SetDimension(*i)
	}
	return utusflsuo
}

// AddDimension adds i to the "dimension" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.AddDimension(i)
	return utusflsuo
}

// SetLimit sets the "limit" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ResetLimit()
	utusflsuo.mutation.SetLimit(i)
	return utusflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		utusflsuo.SetLimit(*i)
	}
	return utusflsuo
}

// AddLimit adds i to the "limit" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.AddLimit(i)
	return utusflsuo
}

// SetIsDel sets the "is_del" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ResetIsDel()
	utusflsuo.mutation.SetIsDel(i)
	return utusflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		utusflsuo.SetIsDel(*i)
	}
	return utusflsuo
}

// AddIsDel adds i to the "is_del" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.AddIsDel(i)
	return utusflsuo
}

// SetCreateAt sets the "create_at" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.SetCreateAt(t)
	return utusflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		utusflsuo.SetCreateAt(*t)
	}
	return utusflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ClearCreateAt()
	return utusflsuo
}

// SetUpdateAt sets the "update_at" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.SetUpdateAt(t)
	return utusflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		utusflsuo.SetUpdateAt(*t)
	}
	return utusflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.ClearUpdateAt()
	return utusflsuo
}

// Mutation returns the UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation {
	return utusflsuo.mutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdate builder.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.mutation.Where(ps...)
	return utusflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne {
	utusflsuo.fields = append([]string{field}, fields...)
	return utusflsuo
}

// Save executes the query and returns the updated UpgradeTauriUpgradeStrategyFlowLimitStrategy entity.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeTauriUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, utusflsuo.sqlSave, utusflsuo.mutation, utusflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeTauriUpgradeStrategyFlowLimitStrategy {
	node, err := utusflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := utusflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := utusflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusflsuo *UpgradeTauriUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTauriUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategyflowlimitstrategy.Table, upgradetauriupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := utusflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTauriUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utusflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauriupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradetauriupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetauriupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utusflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := utusflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := utusflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTauriUpgradeStrategyFlowLimitStrategy{config: utusflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utusflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utusflsuo.mutation.done = true
	return _node, nil
}
