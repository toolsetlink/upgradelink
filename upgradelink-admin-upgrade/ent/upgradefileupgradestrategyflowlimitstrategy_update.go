// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradefileupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeFileUpgradeStrategyFlowLimitStrategy entities.
type UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.Where(ps...)
	return ufusflsu
}

// SetEnable sets the "enable" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ResetEnable()
	ufusflsu.mutation.SetEnable(i)
	return ufusflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ufusflsu.SetEnable(*i)
	}
	return ufusflsu
}

// AddEnable adds i to the "enable" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.AddEnable(i)
	return ufusflsu
}

// SetBeginTime sets the "begin_time" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.SetBeginTime(s)
	return ufusflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ufusflsu.SetBeginTime(*s)
	}
	return ufusflsu
}

// SetEndTime sets the "end_time" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.SetEndTime(s)
	return ufusflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ufusflsu.SetEndTime(*s)
	}
	return ufusflsu
}

// SetDimension sets the "dimension" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ResetDimension()
	ufusflsu.mutation.SetDimension(i)
	return ufusflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ufusflsu.SetDimension(*i)
	}
	return ufusflsu
}

// AddDimension adds i to the "dimension" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.AddDimension(i)
	return ufusflsu
}

// SetLimit sets the "limit" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ResetLimit()
	ufusflsu.mutation.SetLimit(i)
	return ufusflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ufusflsu.SetLimit(*i)
	}
	return ufusflsu
}

// AddLimit adds i to the "limit" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.AddLimit(i)
	return ufusflsu
}

// SetIsDel sets the "is_del" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ResetIsDel()
	ufusflsu.mutation.SetIsDel(i)
	return ufusflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ufusflsu.SetIsDel(*i)
	}
	return ufusflsu
}

// AddIsDel adds i to the "is_del" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.AddIsDel(i)
	return ufusflsu
}

// SetCreateAt sets the "create_at" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.SetCreateAt(t)
	return ufusflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ufusflsu.SetCreateAt(*t)
	}
	return ufusflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ClearCreateAt()
	return ufusflsu
}

// SetUpdateAt sets the "update_at" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.SetUpdateAt(t)
	return ufusflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ufusflsu.SetUpdateAt(*t)
	}
	return ufusflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate {
	ufusflsu.mutation.ClearUpdateAt()
	return ufusflsu
}

// Mutation returns the UpgradeFileUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation {
	return ufusflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufusflsu.sqlSave, ufusflsu.mutation, ufusflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ufusflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ufusflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := ufusflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusflsu *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategyflowlimitstrategy.Table, upgradefileupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ufusflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusflsu.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ufusflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ufusflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.Limit(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufusflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufusflsu.mutation.done = true
	return n, nil
}

// UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeFileUpgradeStrategyFlowLimitStrategy entity.
type UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ResetEnable()
	ufusflsuo.mutation.SetEnable(i)
	return ufusflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ufusflsuo.SetEnable(*i)
	}
	return ufusflsuo
}

// AddEnable adds i to the "enable" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.AddEnable(i)
	return ufusflsuo
}

// SetBeginTime sets the "begin_time" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.SetBeginTime(s)
	return ufusflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ufusflsuo.SetBeginTime(*s)
	}
	return ufusflsuo
}

// SetEndTime sets the "end_time" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.SetEndTime(s)
	return ufusflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ufusflsuo.SetEndTime(*s)
	}
	return ufusflsuo
}

// SetDimension sets the "dimension" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ResetDimension()
	ufusflsuo.mutation.SetDimension(i)
	return ufusflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ufusflsuo.SetDimension(*i)
	}
	return ufusflsuo
}

// AddDimension adds i to the "dimension" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.AddDimension(i)
	return ufusflsuo
}

// SetLimit sets the "limit" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ResetLimit()
	ufusflsuo.mutation.SetLimit(i)
	return ufusflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ufusflsuo.SetLimit(*i)
	}
	return ufusflsuo
}

// AddLimit adds i to the "limit" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.AddLimit(i)
	return ufusflsuo
}

// SetIsDel sets the "is_del" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ResetIsDel()
	ufusflsuo.mutation.SetIsDel(i)
	return ufusflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ufusflsuo.SetIsDel(*i)
	}
	return ufusflsuo
}

// AddIsDel adds i to the "is_del" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.AddIsDel(i)
	return ufusflsuo
}

// SetCreateAt sets the "create_at" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.SetCreateAt(t)
	return ufusflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ufusflsuo.SetCreateAt(*t)
	}
	return ufusflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ClearCreateAt()
	return ufusflsuo
}

// SetUpdateAt sets the "update_at" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.SetUpdateAt(t)
	return ufusflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ufusflsuo.SetUpdateAt(*t)
	}
	return ufusflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.ClearUpdateAt()
	return ufusflsuo
}

// Mutation returns the UpgradeFileUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation {
	return ufusflsuo.mutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.mutation.Where(ps...)
	return ufusflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne {
	ufusflsuo.fields = append([]string{field}, fields...)
	return ufusflsuo
}

// Save executes the query and returns the updated UpgradeFileUpgradeStrategyFlowLimitStrategy entity.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeFileUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, ufusflsuo.sqlSave, ufusflsuo.mutation, ufusflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeFileUpgradeStrategyFlowLimitStrategy {
	node, err := ufusflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ufusflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ufusflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusflsuo *UpgradeFileUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeFileUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategyflowlimitstrategy.Table, upgradefileupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := ufusflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeFileUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufusflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradefileupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradefileupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradefileupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufusflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ufusflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ufusflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ufusflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeFileUpgradeStrategyFlowLimitStrategy{config: ufusflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufusflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufusflsuo.mutation.done = true
	return _node, nil
}
