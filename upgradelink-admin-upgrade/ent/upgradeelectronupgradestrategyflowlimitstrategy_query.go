// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeelectronupgradestrategyflowlimitstrategy"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery is the builder for querying UpgradeElectronUpgradeStrategyFlowLimitStrategy entities.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery struct {
	config
	ctx        *QueryContext
	order      []upgradeelectronupgradestrategyflowlimitstrategy.OrderOption
	inters     []Interceptor
	predicates []predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery builder.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Where(ps ...predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy) *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	ueusflsq.predicates = append(ueusflsq.predicates, ps...)
	return ueusflsq
}

// Limit the number of records to be returned by this query.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Limit(limit int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	ueusflsq.ctx.Limit = &limit
	return ueusflsq
}

// Offset to start from.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Offset(offset int) *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	ueusflsq.ctx.Offset = &offset
	return ueusflsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Unique(unique bool) *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	ueusflsq.ctx.Unique = &unique
	return ueusflsq
}

// Order specifies how the records should be ordered.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Order(o ...upgradeelectronupgradestrategyflowlimitstrategy.OrderOption) *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	ueusflsq.order = append(ueusflsq.order, o...)
	return ueusflsq
}

// First returns the first UpgradeElectronUpgradeStrategyFlowLimitStrategy entity from the query.
// Returns a *NotFoundError when no UpgradeElectronUpgradeStrategyFlowLimitStrategy was found.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) First(ctx context.Context) (*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	nodes, err := ueusflsq.Limit(1).All(setContextOp(ctx, ueusflsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) FirstX(ctx context.Context) *UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	node, err := ueusflsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpgradeElectronUpgradeStrategyFlowLimitStrategy ID from the query.
// Returns a *NotFoundError when no UpgradeElectronUpgradeStrategyFlowLimitStrategy ID was found.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ueusflsq.Limit(1).IDs(setContextOp(ctx, ueusflsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) FirstIDX(ctx context.Context) int {
	id, err := ueusflsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpgradeElectronUpgradeStrategyFlowLimitStrategy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpgradeElectronUpgradeStrategyFlowLimitStrategy entity is found.
// Returns a *NotFoundError when no UpgradeElectronUpgradeStrategyFlowLimitStrategy entities are found.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Only(ctx context.Context) (*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	nodes, err := ueusflsq.Limit(2).All(setContextOp(ctx, ueusflsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	default:
		return nil, &NotSingularError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) OnlyX(ctx context.Context) *UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	node, err := ueusflsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpgradeElectronUpgradeStrategyFlowLimitStrategy ID in the query.
// Returns a *NotSingularError when more than one UpgradeElectronUpgradeStrategyFlowLimitStrategy ID is found.
// Returns a *NotFoundError when no entities are found.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ueusflsq.Limit(2).IDs(setContextOp(ctx, ueusflsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	default:
		err = &NotSingularError{upgradeelectronupgradestrategyflowlimitstrategy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) OnlyIDX(ctx context.Context) int {
	id, err := ueusflsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpgradeElectronUpgradeStrategyFlowLimitStrategies.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) All(ctx context.Context) ([]*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	ctx = setContextOp(ctx, ueusflsq.ctx, ent.OpQueryAll)
	if err := ueusflsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpgradeElectronUpgradeStrategyFlowLimitStrategy, *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery]()
	return withInterceptors[[]*UpgradeElectronUpgradeStrategyFlowLimitStrategy](ctx, ueusflsq, qr, ueusflsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) AllX(ctx context.Context) []*UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	nodes, err := ueusflsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpgradeElectronUpgradeStrategyFlowLimitStrategy IDs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ueusflsq.ctx.Unique == nil && ueusflsq.path != nil {
		ueusflsq.Unique(true)
	}
	ctx = setContextOp(ctx, ueusflsq.ctx, ent.OpQueryIDs)
	if err = ueusflsq.Select(upgradeelectronupgradestrategyflowlimitstrategy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) IDsX(ctx context.Context) []int {
	ids, err := ueusflsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ueusflsq.ctx, ent.OpQueryCount)
	if err := ueusflsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ueusflsq, querierCount[*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery](), ueusflsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) CountX(ctx context.Context) int {
	count, err := ueusflsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ueusflsq.ctx, ent.OpQueryExist)
	switch _, err := ueusflsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) ExistX(ctx context.Context) bool {
	exist, err := ueusflsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Clone() *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery {
	if ueusflsq == nil {
		return nil
	}
	return &UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery{
		config:     ueusflsq.config,
		ctx:        ueusflsq.ctx.Clone(),
		order:      append([]upgradeelectronupgradestrategyflowlimitstrategy.OrderOption{}, ueusflsq.order...),
		inters:     append([]Interceptor{}, ueusflsq.inters...),
		predicates: append([]predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy{}, ueusflsq.predicates...),
		// clone intermediate query.
		sql:  ueusflsq.sql.Clone(),
		path: ueusflsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Enable int32 `json:"enable,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UpgradeElectronUpgradeStrategyFlowLimitStrategy.Query().
//		GroupBy(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) GroupBy(field string, fields ...string) *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy {
	ueusflsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy{build: ueusflsq}
	grbuild.flds = &ueusflsq.ctx.Fields
	grbuild.label = upgradeelectronupgradestrategyflowlimitstrategy.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Enable int32 `json:"enable,omitempty"`
//	}
//
//	client.UpgradeElectronUpgradeStrategyFlowLimitStrategy.Query().
//		Select(upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable).
//		Scan(ctx, &v)
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Select(fields ...string) *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect {
	ueusflsq.ctx.Fields = append(ueusflsq.ctx.Fields, fields...)
	sbuild := &UpgradeElectronUpgradeStrategyFlowLimitStrategySelect{UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery: ueusflsq}
	sbuild.label = upgradeelectronupgradestrategyflowlimitstrategy.Label
	sbuild.flds, sbuild.scan = &ueusflsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpgradeElectronUpgradeStrategyFlowLimitStrategySelect configured with the given aggregations.
func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Aggregate(fns ...AggregateFunc) *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect {
	return ueusflsq.Select().Aggregate(fns...)
}

func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ueusflsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ueusflsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ueusflsq.ctx.Fields {
		if !upgradeelectronupgradestrategyflowlimitstrategy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ueusflsq.path != nil {
		prev, err := ueusflsq.path(ctx)
		if err != nil {
			return err
		}
		ueusflsq.sql = prev
	}
	return nil
}

func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpgradeElectronUpgradeStrategyFlowLimitStrategy, error) {
	var (
		nodes = []*UpgradeElectronUpgradeStrategyFlowLimitStrategy{}
		_spec = ueusflsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpgradeElectronUpgradeStrategyFlowLimitStrategy).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpgradeElectronUpgradeStrategyFlowLimitStrategy{config: ueusflsq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ueusflsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ueusflsq.querySpec()
	_spec.Node.Columns = ueusflsq.ctx.Fields
	if len(ueusflsq.ctx.Fields) > 0 {
		_spec.Unique = ueusflsq.ctx.Unique != nil && *ueusflsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ueusflsq.driver, _spec)
}

func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(upgradeelectronupgradestrategyflowlimitstrategy.Table, upgradeelectronupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	_spec.From = ueusflsq.sql
	if unique := ueusflsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ueusflsq.path != nil {
		_spec.Unique = true
	}
	if fields := ueusflsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectronupgradestrategyflowlimitstrategy.FieldID)
		for i := range fields {
			if fields[i] != upgradeelectronupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ueusflsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ueusflsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ueusflsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ueusflsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ueusflsq *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ueusflsq.driver.Dialect())
	t1 := builder.Table(upgradeelectronupgradestrategyflowlimitstrategy.Table)
	columns := ueusflsq.ctx.Fields
	if len(columns) == 0 {
		columns = upgradeelectronupgradestrategyflowlimitstrategy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ueusflsq.sql != nil {
		selector = ueusflsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ueusflsq.ctx.Unique != nil && *ueusflsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ueusflsq.predicates {
		p(selector)
	}
	for _, p := range ueusflsq.order {
		p(selector)
	}
	if offset := ueusflsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ueusflsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy is the group-by builder for UpgradeElectronUpgradeStrategyFlowLimitStrategy entities.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy struct {
	selector
	build *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ueusflsgb *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy) Aggregate(fns ...AggregateFunc) *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy {
	ueusflsgb.fns = append(ueusflsgb.fns, fns...)
	return ueusflsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ueusflsgb *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ueusflsgb.build.ctx, ent.OpQueryGroupBy)
	if err := ueusflsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy](ctx, ueusflsgb.build, ueusflsgb, ueusflsgb.build.inters, v)
}

func (ueusflsgb *UpgradeElectronUpgradeStrategyFlowLimitStrategyGroupBy) sqlScan(ctx context.Context, root *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ueusflsgb.fns))
	for _, fn := range ueusflsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ueusflsgb.flds)+len(ueusflsgb.fns))
		for _, f := range *ueusflsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ueusflsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ueusflsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategySelect is the builder for selecting fields of UpgradeElectronUpgradeStrategyFlowLimitStrategy entities.
type UpgradeElectronUpgradeStrategyFlowLimitStrategySelect struct {
	*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ueusflss *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect) Aggregate(fns ...AggregateFunc) *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect {
	ueusflss.fns = append(ueusflss.fns, fns...)
	return ueusflss
}

// Scan applies the selector query and scans the result into the given value.
func (ueusflss *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ueusflss.ctx, ent.OpQuerySelect)
	if err := ueusflss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect](ctx, ueusflss.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, ueusflss, ueusflss.inters, v)
}

func (ueusflss *UpgradeElectronUpgradeStrategyFlowLimitStrategySelect) sqlScan(ctx context.Context, root *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ueusflss.fns))
	for _, fn := range ueusflss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ueusflss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ueusflss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
