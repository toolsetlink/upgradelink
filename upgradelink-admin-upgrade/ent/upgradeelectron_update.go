// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradeelectron"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpdate is the builder for updating UpgradeElectron entities.
type UpgradeElectronUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronMutation
}

// Where appends a list predicates to the UpgradeElectronUpdate builder.
func (ueu *UpgradeElectronUpdate) Where(ps ...predicate.UpgradeElectron) *UpgradeElectronUpdate {
	ueu.mutation.Where(ps...)
	return ueu
}

// SetCompanyID sets the "company_id" field.
func (ueu *UpgradeElectronUpdate) SetCompanyID(i int) *UpgradeElectronUpdate {
	ueu.mutation.ResetCompanyID()
	ueu.mutation.SetCompanyID(i)
	return ueu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableCompanyID(i *int) *UpgradeElectronUpdate {
	if i != nil {
		ueu.SetCompanyID(*i)
	}
	return ueu
}

// AddCompanyID adds i to the "company_id" field.
func (ueu *UpgradeElectronUpdate) AddCompanyID(i int) *UpgradeElectronUpdate {
	ueu.mutation.AddCompanyID(i)
	return ueu
}

// SetKey sets the "key" field.
func (ueu *UpgradeElectronUpdate) SetKey(s string) *UpgradeElectronUpdate {
	ueu.mutation.SetKey(s)
	return ueu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableKey(s *string) *UpgradeElectronUpdate {
	if s != nil {
		ueu.SetKey(*s)
	}
	return ueu
}

// SetName sets the "name" field.
func (ueu *UpgradeElectronUpdate) SetName(s string) *UpgradeElectronUpdate {
	ueu.mutation.SetName(s)
	return ueu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableName(s *string) *UpgradeElectronUpdate {
	if s != nil {
		ueu.SetName(*s)
	}
	return ueu
}

// SetDescription sets the "description" field.
func (ueu *UpgradeElectronUpdate) SetDescription(s string) *UpgradeElectronUpdate {
	ueu.mutation.SetDescription(s)
	return ueu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableDescription(s *string) *UpgradeElectronUpdate {
	if s != nil {
		ueu.SetDescription(*s)
	}
	return ueu
}

// ClearDescription clears the value of the "description" field.
func (ueu *UpgradeElectronUpdate) ClearDescription() *UpgradeElectronUpdate {
	ueu.mutation.ClearDescription()
	return ueu
}

// SetGithubURL sets the "github_url" field.
func (ueu *UpgradeElectronUpdate) SetGithubURL(s string) *UpgradeElectronUpdate {
	ueu.mutation.SetGithubURL(s)
	return ueu
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableGithubURL(s *string) *UpgradeElectronUpdate {
	if s != nil {
		ueu.SetGithubURL(*s)
	}
	return ueu
}

// ClearGithubURL clears the value of the "github_url" field.
func (ueu *UpgradeElectronUpdate) ClearGithubURL() *UpgradeElectronUpdate {
	ueu.mutation.ClearGithubURL()
	return ueu
}

// SetIsDel sets the "is_del" field.
func (ueu *UpgradeElectronUpdate) SetIsDel(i int32) *UpgradeElectronUpdate {
	ueu.mutation.ResetIsDel()
	ueu.mutation.SetIsDel(i)
	return ueu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableIsDel(i *int32) *UpgradeElectronUpdate {
	if i != nil {
		ueu.SetIsDel(*i)
	}
	return ueu
}

// AddIsDel adds i to the "is_del" field.
func (ueu *UpgradeElectronUpdate) AddIsDel(i int32) *UpgradeElectronUpdate {
	ueu.mutation.AddIsDel(i)
	return ueu
}

// SetCreateAt sets the "create_at" field.
func (ueu *UpgradeElectronUpdate) SetCreateAt(t time.Time) *UpgradeElectronUpdate {
	ueu.mutation.SetCreateAt(t)
	return ueu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpdate {
	if t != nil {
		ueu.SetCreateAt(*t)
	}
	return ueu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueu *UpgradeElectronUpdate) ClearCreateAt() *UpgradeElectronUpdate {
	ueu.mutation.ClearCreateAt()
	return ueu
}

// SetUpdateAt sets the "update_at" field.
func (ueu *UpgradeElectronUpdate) SetUpdateAt(t time.Time) *UpgradeElectronUpdate {
	ueu.mutation.SetUpdateAt(t)
	return ueu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueu *UpgradeElectronUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpdate {
	if t != nil {
		ueu.SetUpdateAt(*t)
	}
	return ueu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueu *UpgradeElectronUpdate) ClearUpdateAt() *UpgradeElectronUpdate {
	ueu.mutation.ClearUpdateAt()
	return ueu
}

// Mutation returns the UpgradeElectronMutation object of the builder.
func (ueu *UpgradeElectronUpdate) Mutation() *UpgradeElectronMutation {
	return ueu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueu *UpgradeElectronUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ueu.sqlSave, ueu.mutation, ueu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueu *UpgradeElectronUpdate) SaveX(ctx context.Context) int {
	affected, err := ueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueu *UpgradeElectronUpdate) Exec(ctx context.Context) error {
	_, err := ueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueu *UpgradeElectronUpdate) ExecX(ctx context.Context) {
	if err := ueu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueu *UpgradeElectronUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectron.Table, upgradeelectron.Columns, sqlgraph.NewFieldSpec(upgradeelectron.FieldID, field.TypeInt))
	if ps := ueu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectron.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectron.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueu.mutation.Key(); ok {
		_spec.SetField(upgradeelectron.FieldKey, field.TypeString, value)
	}
	if value, ok := ueu.mutation.Name(); ok {
		_spec.SetField(upgradeelectron.FieldName, field.TypeString, value)
	}
	if value, ok := ueu.mutation.Description(); ok {
		_spec.SetField(upgradeelectron.FieldDescription, field.TypeString, value)
	}
	if ueu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectron.FieldDescription, field.TypeString)
	}
	if value, ok := ueu.mutation.GithubURL(); ok {
		_spec.SetField(upgradeelectron.FieldGithubURL, field.TypeString, value)
	}
	if ueu.mutation.GithubURLCleared() {
		_spec.ClearField(upgradeelectron.FieldGithubURL, field.TypeString)
	}
	if value, ok := ueu.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectron.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectron.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectron.FieldCreateAt, field.TypeTime, value)
	}
	if ueu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectron.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectron.FieldUpdateAt, field.TypeTime, value)
	}
	if ueu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectron.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectron.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ueu.mutation.done = true
	return n, nil
}

// UpgradeElectronUpdateOne is the builder for updating a single UpgradeElectron entity.
type UpgradeElectronUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeElectronMutation
}

// SetCompanyID sets the "company_id" field.
func (ueuo *UpgradeElectronUpdateOne) SetCompanyID(i int) *UpgradeElectronUpdateOne {
	ueuo.mutation.ResetCompanyID()
	ueuo.mutation.SetCompanyID(i)
	return ueuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableCompanyID(i *int) *UpgradeElectronUpdateOne {
	if i != nil {
		ueuo.SetCompanyID(*i)
	}
	return ueuo
}

// AddCompanyID adds i to the "company_id" field.
func (ueuo *UpgradeElectronUpdateOne) AddCompanyID(i int) *UpgradeElectronUpdateOne {
	ueuo.mutation.AddCompanyID(i)
	return ueuo
}

// SetKey sets the "key" field.
func (ueuo *UpgradeElectronUpdateOne) SetKey(s string) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetKey(s)
	return ueuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableKey(s *string) *UpgradeElectronUpdateOne {
	if s != nil {
		ueuo.SetKey(*s)
	}
	return ueuo
}

// SetName sets the "name" field.
func (ueuo *UpgradeElectronUpdateOne) SetName(s string) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetName(s)
	return ueuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableName(s *string) *UpgradeElectronUpdateOne {
	if s != nil {
		ueuo.SetName(*s)
	}
	return ueuo
}

// SetDescription sets the "description" field.
func (ueuo *UpgradeElectronUpdateOne) SetDescription(s string) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetDescription(s)
	return ueuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableDescription(s *string) *UpgradeElectronUpdateOne {
	if s != nil {
		ueuo.SetDescription(*s)
	}
	return ueuo
}

// ClearDescription clears the value of the "description" field.
func (ueuo *UpgradeElectronUpdateOne) ClearDescription() *UpgradeElectronUpdateOne {
	ueuo.mutation.ClearDescription()
	return ueuo
}

// SetGithubURL sets the "github_url" field.
func (ueuo *UpgradeElectronUpdateOne) SetGithubURL(s string) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetGithubURL(s)
	return ueuo
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableGithubURL(s *string) *UpgradeElectronUpdateOne {
	if s != nil {
		ueuo.SetGithubURL(*s)
	}
	return ueuo
}

// ClearGithubURL clears the value of the "github_url" field.
func (ueuo *UpgradeElectronUpdateOne) ClearGithubURL() *UpgradeElectronUpdateOne {
	ueuo.mutation.ClearGithubURL()
	return ueuo
}

// SetIsDel sets the "is_del" field.
func (ueuo *UpgradeElectronUpdateOne) SetIsDel(i int32) *UpgradeElectronUpdateOne {
	ueuo.mutation.ResetIsDel()
	ueuo.mutation.SetIsDel(i)
	return ueuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableIsDel(i *int32) *UpgradeElectronUpdateOne {
	if i != nil {
		ueuo.SetIsDel(*i)
	}
	return ueuo
}

// AddIsDel adds i to the "is_del" field.
func (ueuo *UpgradeElectronUpdateOne) AddIsDel(i int32) *UpgradeElectronUpdateOne {
	ueuo.mutation.AddIsDel(i)
	return ueuo
}

// SetCreateAt sets the "create_at" field.
func (ueuo *UpgradeElectronUpdateOne) SetCreateAt(t time.Time) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetCreateAt(t)
	return ueuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpdateOne {
	if t != nil {
		ueuo.SetCreateAt(*t)
	}
	return ueuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueuo *UpgradeElectronUpdateOne) ClearCreateAt() *UpgradeElectronUpdateOne {
	ueuo.mutation.ClearCreateAt()
	return ueuo
}

// SetUpdateAt sets the "update_at" field.
func (ueuo *UpgradeElectronUpdateOne) SetUpdateAt(t time.Time) *UpgradeElectronUpdateOne {
	ueuo.mutation.SetUpdateAt(t)
	return ueuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueuo *UpgradeElectronUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpdateOne {
	if t != nil {
		ueuo.SetUpdateAt(*t)
	}
	return ueuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueuo *UpgradeElectronUpdateOne) ClearUpdateAt() *UpgradeElectronUpdateOne {
	ueuo.mutation.ClearUpdateAt()
	return ueuo
}

// Mutation returns the UpgradeElectronMutation object of the builder.
func (ueuo *UpgradeElectronUpdateOne) Mutation() *UpgradeElectronMutation {
	return ueuo.mutation
}

// Where appends a list predicates to the UpgradeElectronUpdate builder.
func (ueuo *UpgradeElectronUpdateOne) Where(ps ...predicate.UpgradeElectron) *UpgradeElectronUpdateOne {
	ueuo.mutation.Where(ps...)
	return ueuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueuo *UpgradeElectronUpdateOne) Select(field string, fields ...string) *UpgradeElectronUpdateOne {
	ueuo.fields = append([]string{field}, fields...)
	return ueuo
}

// Save executes the query and returns the updated UpgradeElectron entity.
func (ueuo *UpgradeElectronUpdateOne) Save(ctx context.Context) (*UpgradeElectron, error) {
	return withHooks(ctx, ueuo.sqlSave, ueuo.mutation, ueuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueuo *UpgradeElectronUpdateOne) SaveX(ctx context.Context) *UpgradeElectron {
	node, err := ueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueuo *UpgradeElectronUpdateOne) Exec(ctx context.Context) error {
	_, err := ueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueuo *UpgradeElectronUpdateOne) ExecX(ctx context.Context) {
	if err := ueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueuo *UpgradeElectronUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeElectron, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectron.Table, upgradeelectron.Columns, sqlgraph.NewFieldSpec(upgradeelectron.FieldID, field.TypeInt))
	id, ok := ueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeElectron.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ueuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectron.FieldID)
		for _, f := range fields {
			if !upgradeelectron.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeelectron.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectron.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectron.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ueuo.mutation.Key(); ok {
		_spec.SetField(upgradeelectron.FieldKey, field.TypeString, value)
	}
	if value, ok := ueuo.mutation.Name(); ok {
		_spec.SetField(upgradeelectron.FieldName, field.TypeString, value)
	}
	if value, ok := ueuo.mutation.Description(); ok {
		_spec.SetField(upgradeelectron.FieldDescription, field.TypeString, value)
	}
	if ueuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectron.FieldDescription, field.TypeString)
	}
	if value, ok := ueuo.mutation.GithubURL(); ok {
		_spec.SetField(upgradeelectron.FieldGithubURL, field.TypeString, value)
	}
	if ueuo.mutation.GithubURLCleared() {
		_spec.ClearField(upgradeelectron.FieldGithubURL, field.TypeString)
	}
	if value, ok := ueuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectron.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectron.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectron.FieldCreateAt, field.TypeTime, value)
	}
	if ueuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectron.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectron.FieldUpdateAt, field.TypeTime, value)
	}
	if ueuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectron.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeElectron{config: ueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectron.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ueuo.mutation.done = true
	return _node, nil
}
