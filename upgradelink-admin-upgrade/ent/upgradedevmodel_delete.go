// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradedevmodel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevModelDelete is the builder for deleting a UpgradeDevModel entity.
type UpgradeDevModelDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeDevModelMutation
}

// Where appends a list predicates to the UpgradeDevModelDelete builder.
func (udmd *UpgradeDevModelDelete) Where(ps ...predicate.UpgradeDevModel) *UpgradeDevModelDelete {
	udmd.mutation.Where(ps...)
	return udmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (udmd *UpgradeDevModelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, udmd.sqlExec, udmd.mutation, udmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (udmd *UpgradeDevModelDelete) ExecX(ctx context.Context) int {
	n, err := udmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (udmd *UpgradeDevModelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradedevmodel.Table, sqlgraph.NewFieldSpec(upgradedevmodel.FieldID, field.TypeInt))
	if ps := udmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, udmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	udmd.mutation.done = true
	return affected, err
}

// UpgradeDevModelDeleteOne is the builder for deleting a single UpgradeDevModel entity.
type UpgradeDevModelDeleteOne struct {
	udmd *UpgradeDevModelDelete
}

// Where appends a list predicates to the UpgradeDevModelDelete builder.
func (udmdo *UpgradeDevModelDeleteOne) Where(ps ...predicate.UpgradeDevModel) *UpgradeDevModelDeleteOne {
	udmdo.udmd.mutation.Where(ps...)
	return udmdo
}

// Exec executes the deletion query.
func (udmdo *UpgradeDevModelDeleteOne) Exec(ctx context.Context) error {
	n, err := udmdo.udmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradedevmodel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (udmdo *UpgradeDevModelDeleteOne) ExecX(ctx context.Context) {
	if err := udmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
