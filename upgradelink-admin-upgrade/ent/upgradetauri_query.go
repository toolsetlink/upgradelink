// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetauri"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriQuery is the builder for querying UpgradeTauri entities.
type UpgradeTauriQuery struct {
	config
	ctx        *QueryContext
	order      []upgradetauri.OrderOption
	inters     []Interceptor
	predicates []predicate.UpgradeTauri
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpgradeTauriQuery builder.
func (utq *UpgradeTauriQuery) Where(ps ...predicate.UpgradeTauri) *UpgradeTauriQuery {
	utq.predicates = append(utq.predicates, ps...)
	return utq
}

// Limit the number of records to be returned by this query.
func (utq *UpgradeTauriQuery) Limit(limit int) *UpgradeTauriQuery {
	utq.ctx.Limit = &limit
	return utq
}

// Offset to start from.
func (utq *UpgradeTauriQuery) Offset(offset int) *UpgradeTauriQuery {
	utq.ctx.Offset = &offset
	return utq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (utq *UpgradeTauriQuery) Unique(unique bool) *UpgradeTauriQuery {
	utq.ctx.Unique = &unique
	return utq
}

// Order specifies how the records should be ordered.
func (utq *UpgradeTauriQuery) Order(o ...upgradetauri.OrderOption) *UpgradeTauriQuery {
	utq.order = append(utq.order, o...)
	return utq
}

// First returns the first UpgradeTauri entity from the query.
// Returns a *NotFoundError when no UpgradeTauri was found.
func (utq *UpgradeTauriQuery) First(ctx context.Context) (*UpgradeTauri, error) {
	nodes, err := utq.Limit(1).All(setContextOp(ctx, utq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upgradetauri.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (utq *UpgradeTauriQuery) FirstX(ctx context.Context) *UpgradeTauri {
	node, err := utq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpgradeTauri ID from the query.
// Returns a *NotFoundError when no UpgradeTauri ID was found.
func (utq *UpgradeTauriQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = utq.Limit(1).IDs(setContextOp(ctx, utq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upgradetauri.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (utq *UpgradeTauriQuery) FirstIDX(ctx context.Context) int {
	id, err := utq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpgradeTauri entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpgradeTauri entity is found.
// Returns a *NotFoundError when no UpgradeTauri entities are found.
func (utq *UpgradeTauriQuery) Only(ctx context.Context) (*UpgradeTauri, error) {
	nodes, err := utq.Limit(2).All(setContextOp(ctx, utq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upgradetauri.Label}
	default:
		return nil, &NotSingularError{upgradetauri.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (utq *UpgradeTauriQuery) OnlyX(ctx context.Context) *UpgradeTauri {
	node, err := utq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpgradeTauri ID in the query.
// Returns a *NotSingularError when more than one UpgradeTauri ID is found.
// Returns a *NotFoundError when no entities are found.
func (utq *UpgradeTauriQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = utq.Limit(2).IDs(setContextOp(ctx, utq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upgradetauri.Label}
	default:
		err = &NotSingularError{upgradetauri.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (utq *UpgradeTauriQuery) OnlyIDX(ctx context.Context) int {
	id, err := utq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpgradeTauris.
func (utq *UpgradeTauriQuery) All(ctx context.Context) ([]*UpgradeTauri, error) {
	ctx = setContextOp(ctx, utq.ctx, ent.OpQueryAll)
	if err := utq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpgradeTauri, *UpgradeTauriQuery]()
	return withInterceptors[[]*UpgradeTauri](ctx, utq, qr, utq.inters)
}

// AllX is like All, but panics if an error occurs.
func (utq *UpgradeTauriQuery) AllX(ctx context.Context) []*UpgradeTauri {
	nodes, err := utq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpgradeTauri IDs.
func (utq *UpgradeTauriQuery) IDs(ctx context.Context) (ids []int, err error) {
	if utq.ctx.Unique == nil && utq.path != nil {
		utq.Unique(true)
	}
	ctx = setContextOp(ctx, utq.ctx, ent.OpQueryIDs)
	if err = utq.Select(upgradetauri.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (utq *UpgradeTauriQuery) IDsX(ctx context.Context) []int {
	ids, err := utq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (utq *UpgradeTauriQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, utq.ctx, ent.OpQueryCount)
	if err := utq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, utq, querierCount[*UpgradeTauriQuery](), utq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (utq *UpgradeTauriQuery) CountX(ctx context.Context) int {
	count, err := utq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (utq *UpgradeTauriQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, utq.ctx, ent.OpQueryExist)
	switch _, err := utq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (utq *UpgradeTauriQuery) ExistX(ctx context.Context) bool {
	exist, err := utq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpgradeTauriQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (utq *UpgradeTauriQuery) Clone() *UpgradeTauriQuery {
	if utq == nil {
		return nil
	}
	return &UpgradeTauriQuery{
		config:     utq.config,
		ctx:        utq.ctx.Clone(),
		order:      append([]upgradetauri.OrderOption{}, utq.order...),
		inters:     append([]Interceptor{}, utq.inters...),
		predicates: append([]predicate.UpgradeTauri{}, utq.predicates...),
		// clone intermediate query.
		sql:  utq.sql.Clone(),
		path: utq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UpgradeTauri.Query().
//		GroupBy(upgradetauri.FieldCompanyID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (utq *UpgradeTauriQuery) GroupBy(field string, fields ...string) *UpgradeTauriGroupBy {
	utq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UpgradeTauriGroupBy{build: utq}
	grbuild.flds = &utq.ctx.Fields
	grbuild.label = upgradetauri.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//	}
//
//	client.UpgradeTauri.Query().
//		Select(upgradetauri.FieldCompanyID).
//		Scan(ctx, &v)
func (utq *UpgradeTauriQuery) Select(fields ...string) *UpgradeTauriSelect {
	utq.ctx.Fields = append(utq.ctx.Fields, fields...)
	sbuild := &UpgradeTauriSelect{UpgradeTauriQuery: utq}
	sbuild.label = upgradetauri.Label
	sbuild.flds, sbuild.scan = &utq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpgradeTauriSelect configured with the given aggregations.
func (utq *UpgradeTauriQuery) Aggregate(fns ...AggregateFunc) *UpgradeTauriSelect {
	return utq.Select().Aggregate(fns...)
}

func (utq *UpgradeTauriQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range utq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, utq); err != nil {
				return err
			}
		}
	}
	for _, f := range utq.ctx.Fields {
		if !upgradetauri.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if utq.path != nil {
		prev, err := utq.path(ctx)
		if err != nil {
			return err
		}
		utq.sql = prev
	}
	return nil
}

func (utq *UpgradeTauriQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpgradeTauri, error) {
	var (
		nodes = []*UpgradeTauri{}
		_spec = utq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpgradeTauri).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpgradeTauri{config: utq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, utq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (utq *UpgradeTauriQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := utq.querySpec()
	_spec.Node.Columns = utq.ctx.Fields
	if len(utq.ctx.Fields) > 0 {
		_spec.Unique = utq.ctx.Unique != nil && *utq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, utq.driver, _spec)
}

func (utq *UpgradeTauriQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(upgradetauri.Table, upgradetauri.Columns, sqlgraph.NewFieldSpec(upgradetauri.FieldID, field.TypeInt))
	_spec.From = utq.sql
	if unique := utq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if utq.path != nil {
		_spec.Unique = true
	}
	if fields := utq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauri.FieldID)
		for i := range fields {
			if fields[i] != upgradetauri.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := utq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := utq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := utq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := utq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (utq *UpgradeTauriQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(utq.driver.Dialect())
	t1 := builder.Table(upgradetauri.Table)
	columns := utq.ctx.Fields
	if len(columns) == 0 {
		columns = upgradetauri.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if utq.sql != nil {
		selector = utq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if utq.ctx.Unique != nil && *utq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range utq.predicates {
		p(selector)
	}
	for _, p := range utq.order {
		p(selector)
	}
	if offset := utq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := utq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpgradeTauriGroupBy is the group-by builder for UpgradeTauri entities.
type UpgradeTauriGroupBy struct {
	selector
	build *UpgradeTauriQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (utgb *UpgradeTauriGroupBy) Aggregate(fns ...AggregateFunc) *UpgradeTauriGroupBy {
	utgb.fns = append(utgb.fns, fns...)
	return utgb
}

// Scan applies the selector query and scans the result into the given value.
func (utgb *UpgradeTauriGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, utgb.build.ctx, ent.OpQueryGroupBy)
	if err := utgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeTauriQuery, *UpgradeTauriGroupBy](ctx, utgb.build, utgb, utgb.build.inters, v)
}

func (utgb *UpgradeTauriGroupBy) sqlScan(ctx context.Context, root *UpgradeTauriQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(utgb.fns))
	for _, fn := range utgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*utgb.flds)+len(utgb.fns))
		for _, f := range *utgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*utgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := utgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpgradeTauriSelect is the builder for selecting fields of UpgradeTauri entities.
type UpgradeTauriSelect struct {
	*UpgradeTauriQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uts *UpgradeTauriSelect) Aggregate(fns ...AggregateFunc) *UpgradeTauriSelect {
	uts.fns = append(uts.fns, fns...)
	return uts
}

// Scan applies the selector query and scans the result into the given value.
func (uts *UpgradeTauriSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uts.ctx, ent.OpQuerySelect)
	if err := uts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeTauriQuery, *UpgradeTauriSelect](ctx, uts.UpgradeTauriQuery, uts, uts.inters, v)
}

func (uts *UpgradeTauriSelect) sqlScan(ctx context.Context, root *UpgradeTauriQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uts.fns))
	for _, fn := range uts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
