// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/ent/predicate"
	"upgradelink-admin-upgrade/ent/upgradetrafficpacket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTrafficPacketUpdate is the builder for updating UpgradeTrafficPacket entities.
type UpgradeTrafficPacketUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTrafficPacketMutation
}

// Where appends a list predicates to the UpgradeTrafficPacketUpdate builder.
func (utpu *UpgradeTrafficPacketUpdate) Where(ps ...predicate.UpgradeTrafficPacket) *UpgradeTrafficPacketUpdate {
	utpu.mutation.Where(ps...)
	return utpu
}

// SetName sets the "name" field.
func (utpu *UpgradeTrafficPacketUpdate) SetName(s string) *UpgradeTrafficPacketUpdate {
	utpu.mutation.SetName(s)
	return utpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableName(s *string) *UpgradeTrafficPacketUpdate {
	if s != nil {
		utpu.SetName(*s)
	}
	return utpu
}

// SetKey sets the "key" field.
func (utpu *UpgradeTrafficPacketUpdate) SetKey(s string) *UpgradeTrafficPacketUpdate {
	utpu.mutation.SetKey(s)
	return utpu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableKey(s *string) *UpgradeTrafficPacketUpdate {
	if s != nil {
		utpu.SetKey(*s)
	}
	return utpu
}

// SetSize sets the "size" field.
func (utpu *UpgradeTrafficPacketUpdate) SetSize(i int) *UpgradeTrafficPacketUpdate {
	utpu.mutation.ResetSize()
	utpu.mutation.SetSize(i)
	return utpu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableSize(i *int) *UpgradeTrafficPacketUpdate {
	if i != nil {
		utpu.SetSize(*i)
	}
	return utpu
}

// AddSize adds i to the "size" field.
func (utpu *UpgradeTrafficPacketUpdate) AddSize(i int) *UpgradeTrafficPacketUpdate {
	utpu.mutation.AddSize(i)
	return utpu
}

// SetPrice sets the "price" field.
func (utpu *UpgradeTrafficPacketUpdate) SetPrice(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.ResetPrice()
	utpu.mutation.SetPrice(i)
	return utpu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillablePrice(i *int32) *UpgradeTrafficPacketUpdate {
	if i != nil {
		utpu.SetPrice(*i)
	}
	return utpu
}

// AddPrice adds i to the "price" field.
func (utpu *UpgradeTrafficPacketUpdate) AddPrice(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.AddPrice(i)
	return utpu
}

// SetValidDays sets the "valid_days" field.
func (utpu *UpgradeTrafficPacketUpdate) SetValidDays(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.ResetValidDays()
	utpu.mutation.SetValidDays(i)
	return utpu
}

// SetNillableValidDays sets the "valid_days" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableValidDays(i *int32) *UpgradeTrafficPacketUpdate {
	if i != nil {
		utpu.SetValidDays(*i)
	}
	return utpu
}

// AddValidDays adds i to the "valid_days" field.
func (utpu *UpgradeTrafficPacketUpdate) AddValidDays(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.AddValidDays(i)
	return utpu
}

// SetStatus sets the "status" field.
func (utpu *UpgradeTrafficPacketUpdate) SetStatus(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.ResetStatus()
	utpu.mutation.SetStatus(i)
	return utpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableStatus(i *int32) *UpgradeTrafficPacketUpdate {
	if i != nil {
		utpu.SetStatus(*i)
	}
	return utpu
}

// AddStatus adds i to the "status" field.
func (utpu *UpgradeTrafficPacketUpdate) AddStatus(i int32) *UpgradeTrafficPacketUpdate {
	utpu.mutation.AddStatus(i)
	return utpu
}

// SetDescription sets the "description" field.
func (utpu *UpgradeTrafficPacketUpdate) SetDescription(s string) *UpgradeTrafficPacketUpdate {
	utpu.mutation.SetDescription(s)
	return utpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableDescription(s *string) *UpgradeTrafficPacketUpdate {
	if s != nil {
		utpu.SetDescription(*s)
	}
	return utpu
}

// ClearDescription clears the value of the "description" field.
func (utpu *UpgradeTrafficPacketUpdate) ClearDescription() *UpgradeTrafficPacketUpdate {
	utpu.mutation.ClearDescription()
	return utpu
}

// SetCreateAt sets the "create_at" field.
func (utpu *UpgradeTrafficPacketUpdate) SetCreateAt(t time.Time) *UpgradeTrafficPacketUpdate {
	utpu.mutation.SetCreateAt(t)
	return utpu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTrafficPacketUpdate {
	if t != nil {
		utpu.SetCreateAt(*t)
	}
	return utpu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utpu *UpgradeTrafficPacketUpdate) ClearCreateAt() *UpgradeTrafficPacketUpdate {
	utpu.mutation.ClearCreateAt()
	return utpu
}

// SetUpdateAt sets the "update_at" field.
func (utpu *UpgradeTrafficPacketUpdate) SetUpdateAt(t time.Time) *UpgradeTrafficPacketUpdate {
	utpu.mutation.SetUpdateAt(t)
	return utpu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utpu *UpgradeTrafficPacketUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTrafficPacketUpdate {
	if t != nil {
		utpu.SetUpdateAt(*t)
	}
	return utpu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utpu *UpgradeTrafficPacketUpdate) ClearUpdateAt() *UpgradeTrafficPacketUpdate {
	utpu.mutation.ClearUpdateAt()
	return utpu
}

// Mutation returns the UpgradeTrafficPacketMutation object of the builder.
func (utpu *UpgradeTrafficPacketUpdate) Mutation() *UpgradeTrafficPacketMutation {
	return utpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utpu *UpgradeTrafficPacketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utpu.sqlSave, utpu.mutation, utpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utpu *UpgradeTrafficPacketUpdate) SaveX(ctx context.Context) int {
	affected, err := utpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utpu *UpgradeTrafficPacketUpdate) Exec(ctx context.Context) error {
	_, err := utpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpu *UpgradeTrafficPacketUpdate) ExecX(ctx context.Context) {
	if err := utpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utpu *UpgradeTrafficPacketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetrafficpacket.Table, upgradetrafficpacket.Columns, sqlgraph.NewFieldSpec(upgradetrafficpacket.FieldID, field.TypeUint64))
	if ps := utpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utpu.mutation.Name(); ok {
		_spec.SetField(upgradetrafficpacket.FieldName, field.TypeString, value)
	}
	if value, ok := utpu.mutation.Key(); ok {
		_spec.SetField(upgradetrafficpacket.FieldKey, field.TypeString, value)
	}
	if value, ok := utpu.mutation.Size(); ok {
		_spec.SetField(upgradetrafficpacket.FieldSize, field.TypeInt, value)
	}
	if value, ok := utpu.mutation.AddedSize(); ok {
		_spec.AddField(upgradetrafficpacket.FieldSize, field.TypeInt, value)
	}
	if value, ok := utpu.mutation.Price(); ok {
		_spec.SetField(upgradetrafficpacket.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.AddedPrice(); ok {
		_spec.AddField(upgradetrafficpacket.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.ValidDays(); ok {
		_spec.SetField(upgradetrafficpacket.FieldValidDays, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.AddedValidDays(); ok {
		_spec.AddField(upgradetrafficpacket.FieldValidDays, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.Status(); ok {
		_spec.SetField(upgradetrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.AddedStatus(); ok {
		_spec.AddField(upgradetrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := utpu.mutation.Description(); ok {
		_spec.SetField(upgradetrafficpacket.FieldDescription, field.TypeString, value)
	}
	if utpu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldDescription, field.TypeString)
	}
	if value, ok := utpu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetrafficpacket.FieldCreateAt, field.TypeTime, value)
	}
	if utpu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utpu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetrafficpacket.FieldUpdateAt, field.TypeTime, value)
	}
	if utpu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetrafficpacket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utpu.mutation.done = true
	return n, nil
}

// UpgradeTrafficPacketUpdateOne is the builder for updating a single UpgradeTrafficPacket entity.
type UpgradeTrafficPacketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTrafficPacketMutation
}

// SetName sets the "name" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetName(s string) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.SetName(s)
	return utpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableName(s *string) *UpgradeTrafficPacketUpdateOne {
	if s != nil {
		utpuo.SetName(*s)
	}
	return utpuo
}

// SetKey sets the "key" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetKey(s string) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.SetKey(s)
	return utpuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableKey(s *string) *UpgradeTrafficPacketUpdateOne {
	if s != nil {
		utpuo.SetKey(*s)
	}
	return utpuo
}

// SetSize sets the "size" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetSize(i int) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ResetSize()
	utpuo.mutation.SetSize(i)
	return utpuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableSize(i *int) *UpgradeTrafficPacketUpdateOne {
	if i != nil {
		utpuo.SetSize(*i)
	}
	return utpuo
}

// AddSize adds i to the "size" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) AddSize(i int) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.AddSize(i)
	return utpuo
}

// SetPrice sets the "price" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetPrice(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ResetPrice()
	utpuo.mutation.SetPrice(i)
	return utpuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillablePrice(i *int32) *UpgradeTrafficPacketUpdateOne {
	if i != nil {
		utpuo.SetPrice(*i)
	}
	return utpuo
}

// AddPrice adds i to the "price" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) AddPrice(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.AddPrice(i)
	return utpuo
}

// SetValidDays sets the "valid_days" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetValidDays(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ResetValidDays()
	utpuo.mutation.SetValidDays(i)
	return utpuo
}

// SetNillableValidDays sets the "valid_days" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableValidDays(i *int32) *UpgradeTrafficPacketUpdateOne {
	if i != nil {
		utpuo.SetValidDays(*i)
	}
	return utpuo
}

// AddValidDays adds i to the "valid_days" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) AddValidDays(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.AddValidDays(i)
	return utpuo
}

// SetStatus sets the "status" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetStatus(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ResetStatus()
	utpuo.mutation.SetStatus(i)
	return utpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableStatus(i *int32) *UpgradeTrafficPacketUpdateOne {
	if i != nil {
		utpuo.SetStatus(*i)
	}
	return utpuo
}

// AddStatus adds i to the "status" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) AddStatus(i int32) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.AddStatus(i)
	return utpuo
}

// SetDescription sets the "description" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetDescription(s string) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.SetDescription(s)
	return utpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableDescription(s *string) *UpgradeTrafficPacketUpdateOne {
	if s != nil {
		utpuo.SetDescription(*s)
	}
	return utpuo
}

// ClearDescription clears the value of the "description" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) ClearDescription() *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ClearDescription()
	return utpuo
}

// SetCreateAt sets the "create_at" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetCreateAt(t time.Time) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.SetCreateAt(t)
	return utpuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTrafficPacketUpdateOne {
	if t != nil {
		utpuo.SetCreateAt(*t)
	}
	return utpuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) ClearCreateAt() *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ClearCreateAt()
	return utpuo
}

// SetUpdateAt sets the "update_at" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetUpdateAt(t time.Time) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.SetUpdateAt(t)
	return utpuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utpuo *UpgradeTrafficPacketUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTrafficPacketUpdateOne {
	if t != nil {
		utpuo.SetUpdateAt(*t)
	}
	return utpuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utpuo *UpgradeTrafficPacketUpdateOne) ClearUpdateAt() *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.ClearUpdateAt()
	return utpuo
}

// Mutation returns the UpgradeTrafficPacketMutation object of the builder.
func (utpuo *UpgradeTrafficPacketUpdateOne) Mutation() *UpgradeTrafficPacketMutation {
	return utpuo.mutation
}

// Where appends a list predicates to the UpgradeTrafficPacketUpdate builder.
func (utpuo *UpgradeTrafficPacketUpdateOne) Where(ps ...predicate.UpgradeTrafficPacket) *UpgradeTrafficPacketUpdateOne {
	utpuo.mutation.Where(ps...)
	return utpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utpuo *UpgradeTrafficPacketUpdateOne) Select(field string, fields ...string) *UpgradeTrafficPacketUpdateOne {
	utpuo.fields = append([]string{field}, fields...)
	return utpuo
}

// Save executes the query and returns the updated UpgradeTrafficPacket entity.
func (utpuo *UpgradeTrafficPacketUpdateOne) Save(ctx context.Context) (*UpgradeTrafficPacket, error) {
	return withHooks(ctx, utpuo.sqlSave, utpuo.mutation, utpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utpuo *UpgradeTrafficPacketUpdateOne) SaveX(ctx context.Context) *UpgradeTrafficPacket {
	node, err := utpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utpuo *UpgradeTrafficPacketUpdateOne) Exec(ctx context.Context) error {
	_, err := utpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utpuo *UpgradeTrafficPacketUpdateOne) ExecX(ctx context.Context) {
	if err := utpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utpuo *UpgradeTrafficPacketUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTrafficPacket, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetrafficpacket.Table, upgradetrafficpacket.Columns, sqlgraph.NewFieldSpec(upgradetrafficpacket.FieldID, field.TypeUint64))
	id, ok := utpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTrafficPacket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetrafficpacket.FieldID)
		for _, f := range fields {
			if !upgradetrafficpacket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetrafficpacket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utpuo.mutation.Name(); ok {
		_spec.SetField(upgradetrafficpacket.FieldName, field.TypeString, value)
	}
	if value, ok := utpuo.mutation.Key(); ok {
		_spec.SetField(upgradetrafficpacket.FieldKey, field.TypeString, value)
	}
	if value, ok := utpuo.mutation.Size(); ok {
		_spec.SetField(upgradetrafficpacket.FieldSize, field.TypeInt, value)
	}
	if value, ok := utpuo.mutation.AddedSize(); ok {
		_spec.AddField(upgradetrafficpacket.FieldSize, field.TypeInt, value)
	}
	if value, ok := utpuo.mutation.Price(); ok {
		_spec.SetField(upgradetrafficpacket.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.AddedPrice(); ok {
		_spec.AddField(upgradetrafficpacket.FieldPrice, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.ValidDays(); ok {
		_spec.SetField(upgradetrafficpacket.FieldValidDays, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.AddedValidDays(); ok {
		_spec.AddField(upgradetrafficpacket.FieldValidDays, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.Status(); ok {
		_spec.SetField(upgradetrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.AddedStatus(); ok {
		_spec.AddField(upgradetrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := utpuo.mutation.Description(); ok {
		_spec.SetField(upgradetrafficpacket.FieldDescription, field.TypeString, value)
	}
	if utpuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldDescription, field.TypeString)
	}
	if value, ok := utpuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetrafficpacket.FieldCreateAt, field.TypeTime, value)
	}
	if utpuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utpuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetrafficpacket.FieldUpdateAt, field.TypeTime, value)
	}
	if utpuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetrafficpacket.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTrafficPacket{config: utpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetrafficpacket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utpuo.mutation.done = true
	return _node, nil
}
