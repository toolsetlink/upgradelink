// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradedevmodel"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeDevModel is the model entity for the UpgradeDevModel schema.
type UpgradeDevModel struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID: 所属公司id
	CompanyID int `json:"company_id,omitempty"`
	// 设备机型唯一标识
	Key string `json:"key,omitempty"`
	// 设备机型名称
	Name string `json:"name,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeDevModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradedevmodel.FieldID, upgradedevmodel.FieldCompanyID, upgradedevmodel.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradedevmodel.FieldKey, upgradedevmodel.FieldName:
			values[i] = new(sql.NullString)
		case upgradedevmodel.FieldCreateAt, upgradedevmodel.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeDevModel fields.
func (udm *UpgradeDevModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradedevmodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			udm.ID = int(value.Int64)
		case upgradedevmodel.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				udm.CompanyID = int(value.Int64)
			}
		case upgradedevmodel.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				udm.Key = value.String
			}
		case upgradedevmodel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				udm.Name = value.String
			}
		case upgradedevmodel.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				udm.IsDel = int32(value.Int64)
			}
		case upgradedevmodel.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				udm.CreateAt = value.Time
			}
		case upgradedevmodel.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				udm.UpdateAt = value.Time
			}
		default:
			udm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeDevModel.
// This includes values selected through modifiers, order, etc.
func (udm *UpgradeDevModel) Value(name string) (ent.Value, error) {
	return udm.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeDevModel.
// Note that you need to call UpgradeDevModel.Unwrap() before calling this method if this UpgradeDevModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (udm *UpgradeDevModel) Update() *UpgradeDevModelUpdateOne {
	return NewUpgradeDevModelClient(udm.config).UpdateOne(udm)
}

// Unwrap unwraps the UpgradeDevModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (udm *UpgradeDevModel) Unwrap() *UpgradeDevModel {
	_tx, ok := udm.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeDevModel is not a transactional entity")
	}
	udm.config.driver = _tx.drv
	return udm
}

// String implements the fmt.Stringer.
func (udm *UpgradeDevModel) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeDevModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", udm.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", udm.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(udm.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(udm.Name)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", udm.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(udm.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(udm.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeDevModels is a parsable slice of UpgradeDevModel.
type UpgradeDevModels []*UpgradeDevModel
