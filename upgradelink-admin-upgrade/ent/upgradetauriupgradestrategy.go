// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/ent/upgradetauriupgradestrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeTauriUpgradeStrategy is the model entity for the UpgradeTauriUpgradeStrategy schema.
type UpgradeTauriUpgradeStrategy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 是否生效；可通过此控制策略是否生效0：失效；1：生效
	Enable int32 `json:"enable,omitempty"`
	// 任务名称
	Name string `json:"name,omitempty"`
	// 任务描述信息
	Description string `json:"description,omitempty"`
	// Tauri应用ID
	TauriID int `json:"tauri_id,omitempty"`
	// tauri_version_id; 外键tauri_version.id
	TauriVersionID int `json:"tauri_version_id,omitempty"`
	// 升级任务开始时间
	BeginDatetime time.Time `json:"begin_datetime,omitempty"`
	// 升级任务结束时间
	EndDatetime time.Time `json:"end_datetime,omitempty"`
	// 升级方式：0：未知方式；1：提示升级；2：静默升级；3: 强制升级
	UpgradeType int32 `json:"upgrade_type,omitempty"`
	// 提示升级描述内容
	PromptUpgradeContent string `json:"prompt_upgrade_content,omitempty"`
	// 指定升级的设备范围：0：全部设备；1：指定设备分组；2：指定机型
	UpgradeDevType int32 `json:"upgrade_dev_type,omitempty"`
	// 升级设备数据：0.当为全部设备时，此字段为空；；1.当指定设备分组时，此字段存储设备分组id；2.当指定设备机型时，此字段存储选中的设备机型id;
	UpgradeDevData string `json:"upgrade_dev_data,omitempty"`
	// 指定升级的应用版本：0：全部版本；1：指定版本
	UpgradeVersionType int32 `json:"upgrade_version_type,omitempty"`
	// 升级设备数据：0.当为全部版本时，此字段为空；；1.当指定应用版本时，此字段存储应用版本id;
	UpgradeVersionData string `json:"upgrade_version_data,omitempty"`
	// 是否开启灰度 0：不开启；1：开启
	IsGray int32 `json:"is_gray,omitempty"`
	// 灰度策略id数据
	GrayData string `json:"gray_data,omitempty"`
	// 是否开启频控 0：不开启；1：开启
	IsFlowLimit int32 `json:"is_flow_limit,omitempty"`
	// 频控策略id数据
	FlowLimitData string `json:"flow_limit_data,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeTauriUpgradeStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradetauriupgradestrategy.FieldID, upgradetauriupgradestrategy.FieldCompanyID, upgradetauriupgradestrategy.FieldEnable, upgradetauriupgradestrategy.FieldTauriID, upgradetauriupgradestrategy.FieldTauriVersionID, upgradetauriupgradestrategy.FieldUpgradeType, upgradetauriupgradestrategy.FieldUpgradeDevType, upgradetauriupgradestrategy.FieldUpgradeVersionType, upgradetauriupgradestrategy.FieldIsGray, upgradetauriupgradestrategy.FieldIsFlowLimit, upgradetauriupgradestrategy.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradetauriupgradestrategy.FieldName, upgradetauriupgradestrategy.FieldDescription, upgradetauriupgradestrategy.FieldPromptUpgradeContent, upgradetauriupgradestrategy.FieldUpgradeDevData, upgradetauriupgradestrategy.FieldUpgradeVersionData, upgradetauriupgradestrategy.FieldGrayData, upgradetauriupgradestrategy.FieldFlowLimitData:
			values[i] = new(sql.NullString)
		case upgradetauriupgradestrategy.FieldBeginDatetime, upgradetauriupgradestrategy.FieldEndDatetime, upgradetauriupgradestrategy.FieldCreateAt, upgradetauriupgradestrategy.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeTauriUpgradeStrategy fields.
func (utus *UpgradeTauriUpgradeStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradetauriupgradestrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			utus.ID = int(value.Int64)
		case upgradetauriupgradestrategy.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				utus.CompanyID = int(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldEnable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				utus.Enable = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				utus.Name = value.String
			}
		case upgradetauriupgradestrategy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				utus.Description = value.String
			}
		case upgradetauriupgradestrategy.FieldTauriID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tauri_id", values[i])
			} else if value.Valid {
				utus.TauriID = int(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldTauriVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tauri_version_id", values[i])
			} else if value.Valid {
				utus.TauriVersionID = int(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldBeginDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_datetime", values[i])
			} else if value.Valid {
				utus.BeginDatetime = value.Time
			}
		case upgradetauriupgradestrategy.FieldEndDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_datetime", values[i])
			} else if value.Valid {
				utus.EndDatetime = value.Time
			}
		case upgradetauriupgradestrategy.FieldUpgradeType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upgrade_type", values[i])
			} else if value.Valid {
				utus.UpgradeType = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldPromptUpgradeContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_upgrade_content", values[i])
			} else if value.Valid {
				utus.PromptUpgradeContent = value.String
			}
		case upgradetauriupgradestrategy.FieldUpgradeDevType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upgrade_dev_type", values[i])
			} else if value.Valid {
				utus.UpgradeDevType = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldUpgradeDevData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upgrade_dev_data", values[i])
			} else if value.Valid {
				utus.UpgradeDevData = value.String
			}
		case upgradetauriupgradestrategy.FieldUpgradeVersionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upgrade_version_type", values[i])
			} else if value.Valid {
				utus.UpgradeVersionType = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldUpgradeVersionData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upgrade_version_data", values[i])
			} else if value.Valid {
				utus.UpgradeVersionData = value.String
			}
		case upgradetauriupgradestrategy.FieldIsGray:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_gray", values[i])
			} else if value.Valid {
				utus.IsGray = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldGrayData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gray_data", values[i])
			} else if value.Valid {
				utus.GrayData = value.String
			}
		case upgradetauriupgradestrategy.FieldIsFlowLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_flow_limit", values[i])
			} else if value.Valid {
				utus.IsFlowLimit = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldFlowLimitData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_limit_data", values[i])
			} else if value.Valid {
				utus.FlowLimitData = value.String
			}
		case upgradetauriupgradestrategy.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				utus.IsDel = int32(value.Int64)
			}
		case upgradetauriupgradestrategy.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				utus.CreateAt = value.Time
			}
		case upgradetauriupgradestrategy.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				utus.UpdateAt = value.Time
			}
		default:
			utus.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeTauriUpgradeStrategy.
// This includes values selected through modifiers, order, etc.
func (utus *UpgradeTauriUpgradeStrategy) Value(name string) (ent.Value, error) {
	return utus.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeTauriUpgradeStrategy.
// Note that you need to call UpgradeTauriUpgradeStrategy.Unwrap() before calling this method if this UpgradeTauriUpgradeStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (utus *UpgradeTauriUpgradeStrategy) Update() *UpgradeTauriUpgradeStrategyUpdateOne {
	return NewUpgradeTauriUpgradeStrategyClient(utus.config).UpdateOne(utus)
}

// Unwrap unwraps the UpgradeTauriUpgradeStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utus *UpgradeTauriUpgradeStrategy) Unwrap() *UpgradeTauriUpgradeStrategy {
	_tx, ok := utus.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeTauriUpgradeStrategy is not a transactional entity")
	}
	utus.config.driver = _tx.drv
	return utus
}

// String implements the fmt.Stringer.
func (utus *UpgradeTauriUpgradeStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeTauriUpgradeStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utus.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", utus.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", utus.Enable))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(utus.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(utus.Description)
	builder.WriteString(", ")
	builder.WriteString("tauri_id=")
	builder.WriteString(fmt.Sprintf("%v", utus.TauriID))
	builder.WriteString(", ")
	builder.WriteString("tauri_version_id=")
	builder.WriteString(fmt.Sprintf("%v", utus.TauriVersionID))
	builder.WriteString(", ")
	builder.WriteString("begin_datetime=")
	builder.WriteString(utus.BeginDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_datetime=")
	builder.WriteString(utus.EndDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("upgrade_type=")
	builder.WriteString(fmt.Sprintf("%v", utus.UpgradeType))
	builder.WriteString(", ")
	builder.WriteString("prompt_upgrade_content=")
	builder.WriteString(utus.PromptUpgradeContent)
	builder.WriteString(", ")
	builder.WriteString("upgrade_dev_type=")
	builder.WriteString(fmt.Sprintf("%v", utus.UpgradeDevType))
	builder.WriteString(", ")
	builder.WriteString("upgrade_dev_data=")
	builder.WriteString(utus.UpgradeDevData)
	builder.WriteString(", ")
	builder.WriteString("upgrade_version_type=")
	builder.WriteString(fmt.Sprintf("%v", utus.UpgradeVersionType))
	builder.WriteString(", ")
	builder.WriteString("upgrade_version_data=")
	builder.WriteString(utus.UpgradeVersionData)
	builder.WriteString(", ")
	builder.WriteString("is_gray=")
	builder.WriteString(fmt.Sprintf("%v", utus.IsGray))
	builder.WriteString(", ")
	builder.WriteString("gray_data=")
	builder.WriteString(utus.GrayData)
	builder.WriteString(", ")
	builder.WriteString("is_flow_limit=")
	builder.WriteString(fmt.Sprintf("%v", utus.IsFlowLimit))
	builder.WriteString(", ")
	builder.WriteString("flow_limit_data=")
	builder.WriteString(utus.FlowLimitData)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", utus.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(utus.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(utus.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeTauriUpgradeStrategies is a parsable slice of UpgradeTauriUpgradeStrategy.
type UpgradeTauriUpgradeStrategies []*UpgradeTauriUpgradeStrategy
