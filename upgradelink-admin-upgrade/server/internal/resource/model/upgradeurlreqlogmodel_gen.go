// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeUrlReqLogFieldNames          = builder.RawFieldNames(&UpgradeUrlReqLog{})
	upgradeUrlReqLogRows                = strings.Join(upgradeUrlReqLogFieldNames, ",")
	upgradeUrlReqLogRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeUrlReqLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeUrlReqLogRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeUrlReqLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeUrlReqLogModel interface {
		Insert(ctx context.Context, data *UpgradeUrlReqLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeUrlReqLog, error)
		Update(ctx context.Context, data *UpgradeUrlReqLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeUrlReqLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeUrlReqLog struct {
		Id          int64     `db:"id"`            // ID
		CompanyId   int64     `db:"company_id"`    // 公司ID
		UrlId       int64     `db:"url_id"`        // url应用ID
		VersionCode int64     `db:"version_code"`  // 应用版本号
		DevModelKey string    `db:"dev_model_key"` // 设备机型唯一标识
		DevKey      string    `db:"dev_key"`       // 设备唯一标识
		CreateAt    time.Time `db:"create_at"`     // 创建时间
	}
)

func newUpgradeUrlReqLogModel(conn sqlx.SqlConn) *defaultUpgradeUrlReqLogModel {
	return &defaultUpgradeUrlReqLogModel{
		conn:  conn,
		table: "`upgrade_url_req_log`",
	}
}

func (m *defaultUpgradeUrlReqLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeUrlReqLogModel) FindOne(ctx context.Context, id int64) (*UpgradeUrlReqLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeUrlReqLogRows, m.table)
	var resp UpgradeUrlReqLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeUrlReqLogModel) Insert(ctx context.Context, data *UpgradeUrlReqLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, upgradeUrlReqLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.UrlId, data.VersionCode, data.DevModelKey, data.DevKey)
	return ret, err
}

func (m *defaultUpgradeUrlReqLogModel) Update(ctx context.Context, data *UpgradeUrlReqLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeUrlReqLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.UrlId, data.VersionCode, data.DevModelKey, data.DevKey, data.Id)
	return err
}

func (m *defaultUpgradeUrlReqLogModel) tableName() string {
	return m.table
}
