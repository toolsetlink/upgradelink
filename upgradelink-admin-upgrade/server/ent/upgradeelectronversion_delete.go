// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronVersionDelete is the builder for deleting a UpgradeElectronVersion entity.
type UpgradeElectronVersionDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronVersionMutation
}

// Where appends a list predicates to the UpgradeElectronVersionDelete builder.
func (uevd *UpgradeElectronVersionDelete) Where(ps ...predicate.UpgradeElectronVersion) *UpgradeElectronVersionDelete {
	uevd.mutation.Where(ps...)
	return uevd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uevd *UpgradeElectronVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uevd.sqlExec, uevd.mutation, uevd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uevd *UpgradeElectronVersionDelete) ExecX(ctx context.Context) int {
	n, err := uevd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uevd *UpgradeElectronVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeelectronversion.Table, sqlgraph.NewFieldSpec(upgradeelectronversion.FieldID, field.TypeInt))
	if ps := uevd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uevd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uevd.mutation.done = true
	return affected, err
}

// UpgradeElectronVersionDeleteOne is the builder for deleting a single UpgradeElectronVersion entity.
type UpgradeElectronVersionDeleteOne struct {
	uevd *UpgradeElectronVersionDelete
}

// Where appends a list predicates to the UpgradeElectronVersionDelete builder.
func (uevdo *UpgradeElectronVersionDeleteOne) Where(ps ...predicate.UpgradeElectronVersion) *UpgradeElectronVersionDeleteOne {
	uevdo.uevd.mutation.Where(ps...)
	return uevdo
}

// Exec executes the deletion query.
func (uevdo *UpgradeElectronVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := uevdo.uevd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeelectronversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uevdo *UpgradeElectronVersionDeleteOne) ExecX(ctx context.Context) {
	if err := uevdo.Exec(ctx); err != nil {
		panic(err)
	}
}
