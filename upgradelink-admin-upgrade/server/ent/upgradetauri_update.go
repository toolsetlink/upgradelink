// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradetauri"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpdate is the builder for updating UpgradeTauri entities.
type UpgradeTauriUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriMutation
}

// Where appends a list predicates to the UpgradeTauriUpdate builder.
func (utu *UpgradeTauriUpdate) Where(ps ...predicate.UpgradeTauri) *UpgradeTauriUpdate {
	utu.mutation.Where(ps...)
	return utu
}

// SetCompanyID sets the "company_id" field.
func (utu *UpgradeTauriUpdate) SetCompanyID(i int) *UpgradeTauriUpdate {
	utu.mutation.ResetCompanyID()
	utu.mutation.SetCompanyID(i)
	return utu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableCompanyID(i *int) *UpgradeTauriUpdate {
	if i != nil {
		utu.SetCompanyID(*i)
	}
	return utu
}

// AddCompanyID adds i to the "company_id" field.
func (utu *UpgradeTauriUpdate) AddCompanyID(i int) *UpgradeTauriUpdate {
	utu.mutation.AddCompanyID(i)
	return utu
}

// SetKey sets the "key" field.
func (utu *UpgradeTauriUpdate) SetKey(s string) *UpgradeTauriUpdate {
	utu.mutation.SetKey(s)
	return utu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableKey(s *string) *UpgradeTauriUpdate {
	if s != nil {
		utu.SetKey(*s)
	}
	return utu
}

// SetName sets the "name" field.
func (utu *UpgradeTauriUpdate) SetName(s string) *UpgradeTauriUpdate {
	utu.mutation.SetName(s)
	return utu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableName(s *string) *UpgradeTauriUpdate {
	if s != nil {
		utu.SetName(*s)
	}
	return utu
}

// SetDescription sets the "description" field.
func (utu *UpgradeTauriUpdate) SetDescription(s string) *UpgradeTauriUpdate {
	utu.mutation.SetDescription(s)
	return utu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableDescription(s *string) *UpgradeTauriUpdate {
	if s != nil {
		utu.SetDescription(*s)
	}
	return utu
}

// ClearDescription clears the value of the "description" field.
func (utu *UpgradeTauriUpdate) ClearDescription() *UpgradeTauriUpdate {
	utu.mutation.ClearDescription()
	return utu
}

// SetGithubURL sets the "github_url" field.
func (utu *UpgradeTauriUpdate) SetGithubURL(s string) *UpgradeTauriUpdate {
	utu.mutation.SetGithubURL(s)
	return utu
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableGithubURL(s *string) *UpgradeTauriUpdate {
	if s != nil {
		utu.SetGithubURL(*s)
	}
	return utu
}

// ClearGithubURL clears the value of the "github_url" field.
func (utu *UpgradeTauriUpdate) ClearGithubURL() *UpgradeTauriUpdate {
	utu.mutation.ClearGithubURL()
	return utu
}

// SetIsDel sets the "is_del" field.
func (utu *UpgradeTauriUpdate) SetIsDel(i int32) *UpgradeTauriUpdate {
	utu.mutation.ResetIsDel()
	utu.mutation.SetIsDel(i)
	return utu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableIsDel(i *int32) *UpgradeTauriUpdate {
	if i != nil {
		utu.SetIsDel(*i)
	}
	return utu
}

// AddIsDel adds i to the "is_del" field.
func (utu *UpgradeTauriUpdate) AddIsDel(i int32) *UpgradeTauriUpdate {
	utu.mutation.AddIsDel(i)
	return utu
}

// SetCreateAt sets the "create_at" field.
func (utu *UpgradeTauriUpdate) SetCreateAt(t time.Time) *UpgradeTauriUpdate {
	utu.mutation.SetCreateAt(t)
	return utu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpdate {
	if t != nil {
		utu.SetCreateAt(*t)
	}
	return utu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utu *UpgradeTauriUpdate) ClearCreateAt() *UpgradeTauriUpdate {
	utu.mutation.ClearCreateAt()
	return utu
}

// SetUpdateAt sets the "update_at" field.
func (utu *UpgradeTauriUpdate) SetUpdateAt(t time.Time) *UpgradeTauriUpdate {
	utu.mutation.SetUpdateAt(t)
	return utu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utu *UpgradeTauriUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpdate {
	if t != nil {
		utu.SetUpdateAt(*t)
	}
	return utu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utu *UpgradeTauriUpdate) ClearUpdateAt() *UpgradeTauriUpdate {
	utu.mutation.ClearUpdateAt()
	return utu
}

// Mutation returns the UpgradeTauriMutation object of the builder.
func (utu *UpgradeTauriUpdate) Mutation() *UpgradeTauriMutation {
	return utu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utu *UpgradeTauriUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utu.sqlSave, utu.mutation, utu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UpgradeTauriUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UpgradeTauriUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UpgradeTauriUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utu *UpgradeTauriUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauri.Table, upgradetauri.Columns, sqlgraph.NewFieldSpec(upgradetauri.FieldID, field.TypeInt))
	if ps := utu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utu.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauri.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauri.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utu.mutation.Key(); ok {
		_spec.SetField(upgradetauri.FieldKey, field.TypeString, value)
	}
	if value, ok := utu.mutation.Name(); ok {
		_spec.SetField(upgradetauri.FieldName, field.TypeString, value)
	}
	if value, ok := utu.mutation.Description(); ok {
		_spec.SetField(upgradetauri.FieldDescription, field.TypeString, value)
	}
	if utu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauri.FieldDescription, field.TypeString)
	}
	if value, ok := utu.mutation.GithubURL(); ok {
		_spec.SetField(upgradetauri.FieldGithubURL, field.TypeString, value)
	}
	if utu.mutation.GithubURLCleared() {
		_spec.ClearField(upgradetauri.FieldGithubURL, field.TypeString)
	}
	if value, ok := utu.mutation.IsDel(); ok {
		_spec.SetField(upgradetauri.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauri.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauri.FieldCreateAt, field.TypeTime, value)
	}
	if utu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauri.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauri.FieldUpdateAt, field.TypeTime, value)
	}
	if utu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauri.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauri.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utu.mutation.done = true
	return n, nil
}

// UpgradeTauriUpdateOne is the builder for updating a single UpgradeTauri entity.
type UpgradeTauriUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTauriMutation
}

// SetCompanyID sets the "company_id" field.
func (utuo *UpgradeTauriUpdateOne) SetCompanyID(i int) *UpgradeTauriUpdateOne {
	utuo.mutation.ResetCompanyID()
	utuo.mutation.SetCompanyID(i)
	return utuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableCompanyID(i *int) *UpgradeTauriUpdateOne {
	if i != nil {
		utuo.SetCompanyID(*i)
	}
	return utuo
}

// AddCompanyID adds i to the "company_id" field.
func (utuo *UpgradeTauriUpdateOne) AddCompanyID(i int) *UpgradeTauriUpdateOne {
	utuo.mutation.AddCompanyID(i)
	return utuo
}

// SetKey sets the "key" field.
func (utuo *UpgradeTauriUpdateOne) SetKey(s string) *UpgradeTauriUpdateOne {
	utuo.mutation.SetKey(s)
	return utuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableKey(s *string) *UpgradeTauriUpdateOne {
	if s != nil {
		utuo.SetKey(*s)
	}
	return utuo
}

// SetName sets the "name" field.
func (utuo *UpgradeTauriUpdateOne) SetName(s string) *UpgradeTauriUpdateOne {
	utuo.mutation.SetName(s)
	return utuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableName(s *string) *UpgradeTauriUpdateOne {
	if s != nil {
		utuo.SetName(*s)
	}
	return utuo
}

// SetDescription sets the "description" field.
func (utuo *UpgradeTauriUpdateOne) SetDescription(s string) *UpgradeTauriUpdateOne {
	utuo.mutation.SetDescription(s)
	return utuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableDescription(s *string) *UpgradeTauriUpdateOne {
	if s != nil {
		utuo.SetDescription(*s)
	}
	return utuo
}

// ClearDescription clears the value of the "description" field.
func (utuo *UpgradeTauriUpdateOne) ClearDescription() *UpgradeTauriUpdateOne {
	utuo.mutation.ClearDescription()
	return utuo
}

// SetGithubURL sets the "github_url" field.
func (utuo *UpgradeTauriUpdateOne) SetGithubURL(s string) *UpgradeTauriUpdateOne {
	utuo.mutation.SetGithubURL(s)
	return utuo
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableGithubURL(s *string) *UpgradeTauriUpdateOne {
	if s != nil {
		utuo.SetGithubURL(*s)
	}
	return utuo
}

// ClearGithubURL clears the value of the "github_url" field.
func (utuo *UpgradeTauriUpdateOne) ClearGithubURL() *UpgradeTauriUpdateOne {
	utuo.mutation.ClearGithubURL()
	return utuo
}

// SetIsDel sets the "is_del" field.
func (utuo *UpgradeTauriUpdateOne) SetIsDel(i int32) *UpgradeTauriUpdateOne {
	utuo.mutation.ResetIsDel()
	utuo.mutation.SetIsDel(i)
	return utuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableIsDel(i *int32) *UpgradeTauriUpdateOne {
	if i != nil {
		utuo.SetIsDel(*i)
	}
	return utuo
}

// AddIsDel adds i to the "is_del" field.
func (utuo *UpgradeTauriUpdateOne) AddIsDel(i int32) *UpgradeTauriUpdateOne {
	utuo.mutation.AddIsDel(i)
	return utuo
}

// SetCreateAt sets the "create_at" field.
func (utuo *UpgradeTauriUpdateOne) SetCreateAt(t time.Time) *UpgradeTauriUpdateOne {
	utuo.mutation.SetCreateAt(t)
	return utuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpdateOne {
	if t != nil {
		utuo.SetCreateAt(*t)
	}
	return utuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utuo *UpgradeTauriUpdateOne) ClearCreateAt() *UpgradeTauriUpdateOne {
	utuo.mutation.ClearCreateAt()
	return utuo
}

// SetUpdateAt sets the "update_at" field.
func (utuo *UpgradeTauriUpdateOne) SetUpdateAt(t time.Time) *UpgradeTauriUpdateOne {
	utuo.mutation.SetUpdateAt(t)
	return utuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utuo *UpgradeTauriUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpdateOne {
	if t != nil {
		utuo.SetUpdateAt(*t)
	}
	return utuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utuo *UpgradeTauriUpdateOne) ClearUpdateAt() *UpgradeTauriUpdateOne {
	utuo.mutation.ClearUpdateAt()
	return utuo
}

// Mutation returns the UpgradeTauriMutation object of the builder.
func (utuo *UpgradeTauriUpdateOne) Mutation() *UpgradeTauriMutation {
	return utuo.mutation
}

// Where appends a list predicates to the UpgradeTauriUpdate builder.
func (utuo *UpgradeTauriUpdateOne) Where(ps ...predicate.UpgradeTauri) *UpgradeTauriUpdateOne {
	utuo.mutation.Where(ps...)
	return utuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utuo *UpgradeTauriUpdateOne) Select(field string, fields ...string) *UpgradeTauriUpdateOne {
	utuo.fields = append([]string{field}, fields...)
	return utuo
}

// Save executes the query and returns the updated UpgradeTauri entity.
func (utuo *UpgradeTauriUpdateOne) Save(ctx context.Context) (*UpgradeTauri, error) {
	return withHooks(ctx, utuo.sqlSave, utuo.mutation, utuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UpgradeTauriUpdateOne) SaveX(ctx context.Context) *UpgradeTauri {
	node, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utuo *UpgradeTauriUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UpgradeTauriUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utuo *UpgradeTauriUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTauri, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauri.Table, upgradetauri.Columns, sqlgraph.NewFieldSpec(upgradetauri.FieldID, field.TypeInt))
	id, ok := utuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTauri.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauri.FieldID)
		for _, f := range fields {
			if !upgradetauri.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetauri.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauri.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauri.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utuo.mutation.Key(); ok {
		_spec.SetField(upgradetauri.FieldKey, field.TypeString, value)
	}
	if value, ok := utuo.mutation.Name(); ok {
		_spec.SetField(upgradetauri.FieldName, field.TypeString, value)
	}
	if value, ok := utuo.mutation.Description(); ok {
		_spec.SetField(upgradetauri.FieldDescription, field.TypeString, value)
	}
	if utuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauri.FieldDescription, field.TypeString)
	}
	if value, ok := utuo.mutation.GithubURL(); ok {
		_spec.SetField(upgradetauri.FieldGithubURL, field.TypeString, value)
	}
	if utuo.mutation.GithubURLCleared() {
		_spec.ClearField(upgradetauri.FieldGithubURL, field.TypeString)
	}
	if value, ok := utuo.mutation.IsDel(); ok {
		_spec.SetField(upgradetauri.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauri.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauri.FieldCreateAt, field.TypeTime, value)
	}
	if utuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauri.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauri.FieldUpdateAt, field.TypeTime, value)
	}
	if utuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauri.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTauri{config: utuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauri.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utuo.mutation.done = true
	return _node, nil
}
