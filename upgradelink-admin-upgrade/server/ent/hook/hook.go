// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"upgradelink-admin-upgrade/server/ent"
)

// The FmsCloudFileFunc type is an adapter to allow the use of ordinary
// function as FmsCloudFile mutator.
type FmsCloudFileFunc func(context.Context, *ent.FmsCloudFileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FmsCloudFileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FmsCloudFileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FmsCloudFileMutation", m)
}

// The SysUserFunc type is an adapter to allow the use of ordinary
// function as SysUser mutator.
type SysUserFunc func(context.Context, *ent.SysUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SysUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SysUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SysUserMutation", m)
}

// The UpgradeApkFunc type is an adapter to allow the use of ordinary
// function as UpgradeApk mutator.
type UpgradeApkFunc func(context.Context, *ent.UpgradeApkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeApkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeApkMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeApkMutation", m)
}

// The UpgradeApkUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeApkUpgradeStrategy mutator.
type UpgradeApkUpgradeStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeApkUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeApkUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeApkUpgradeStrategyMutation", m)
}

// The UpgradeApkUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeApkUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeApkUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeApkUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeApkUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeApkUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeApkUpgradeStrategyGrayStrategy mutator.
type UpgradeApkUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeApkUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeApkUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeApkUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeApkVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeApkVersion mutator.
type UpgradeApkVersionFunc func(context.Context, *ent.UpgradeApkVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeApkVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeApkVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeApkVersionMutation", m)
}

// The UpgradeAppDownloadReportLogFunc type is an adapter to allow the use of ordinary
// function as UpgradeAppDownloadReportLog mutator.
type UpgradeAppDownloadReportLogFunc func(context.Context, *ent.UpgradeAppDownloadReportLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeAppDownloadReportLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeAppDownloadReportLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeAppDownloadReportLogMutation", m)
}

// The UpgradeCompanyIncomeFunc type is an adapter to allow the use of ordinary
// function as UpgradeCompanyIncome mutator.
type UpgradeCompanyIncomeFunc func(context.Context, *ent.UpgradeCompanyIncomeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeCompanyIncomeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeCompanyIncomeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeCompanyIncomeMutation", m)
}

// The UpgradeCompanyTrafficPacketFunc type is an adapter to allow the use of ordinary
// function as UpgradeCompanyTrafficPacket mutator.
type UpgradeCompanyTrafficPacketFunc func(context.Context, *ent.UpgradeCompanyTrafficPacketMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeCompanyTrafficPacketFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeCompanyTrafficPacketMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeCompanyTrafficPacketMutation", m)
}

// The UpgradeConfigurationFunc type is an adapter to allow the use of ordinary
// function as UpgradeConfiguration mutator.
type UpgradeConfigurationFunc func(context.Context, *ent.UpgradeConfigurationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeConfigurationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeConfigurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeConfigurationMutation", m)
}

// The UpgradeConfigurationUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeConfigurationUpgradeStrategy mutator.
type UpgradeConfigurationUpgradeStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeConfigurationUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeConfigurationUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeConfigurationUpgradeStrategyMutation", m)
}

// The UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeConfigurationUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeConfigurationUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeConfigurationUpgradeStrategyGrayStrategy mutator.
type UpgradeConfigurationUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeConfigurationUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeConfigurationUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeConfigurationVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeConfigurationVersion mutator.
type UpgradeConfigurationVersionFunc func(context.Context, *ent.UpgradeConfigurationVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeConfigurationVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeConfigurationVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeConfigurationVersionMutation", m)
}

// The UpgradeDevFunc type is an adapter to allow the use of ordinary
// function as UpgradeDev mutator.
type UpgradeDevFunc func(context.Context, *ent.UpgradeDevMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeDevFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeDevMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeDevMutation", m)
}

// The UpgradeDevGroupFunc type is an adapter to allow the use of ordinary
// function as UpgradeDevGroup mutator.
type UpgradeDevGroupFunc func(context.Context, *ent.UpgradeDevGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeDevGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeDevGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeDevGroupMutation", m)
}

// The UpgradeDevGroupRelationFunc type is an adapter to allow the use of ordinary
// function as UpgradeDevGroupRelation mutator.
type UpgradeDevGroupRelationFunc func(context.Context, *ent.UpgradeDevGroupRelationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeDevGroupRelationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeDevGroupRelationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeDevGroupRelationMutation", m)
}

// The UpgradeDevModelFunc type is an adapter to allow the use of ordinary
// function as UpgradeDevModel mutator.
type UpgradeDevModelFunc func(context.Context, *ent.UpgradeDevModelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeDevModelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeDevModelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeDevModelMutation", m)
}

// The UpgradeElectronFunc type is an adapter to allow the use of ordinary
// function as UpgradeElectron mutator.
type UpgradeElectronFunc func(context.Context, *ent.UpgradeElectronMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeElectronFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeElectronMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeElectronMutation", m)
}

// The UpgradeElectronUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeElectronUpgradeStrategy mutator.
type UpgradeElectronUpgradeStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeElectronUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeElectronUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeElectronUpgradeStrategyMutation", m)
}

// The UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeElectronUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeElectronUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeElectronUpgradeStrategyGrayStrategy mutator.
type UpgradeElectronUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeElectronUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeElectronUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeElectronUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeElectronVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeElectronVersion mutator.
type UpgradeElectronVersionFunc func(context.Context, *ent.UpgradeElectronVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeElectronVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeElectronVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeElectronVersionMutation", m)
}

// The UpgradeFileFunc type is an adapter to allow the use of ordinary
// function as UpgradeFile mutator.
type UpgradeFileFunc func(context.Context, *ent.UpgradeFileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeFileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeFileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeFileMutation", m)
}

// The UpgradeFileUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeFileUpgradeStrategy mutator.
type UpgradeFileUpgradeStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeFileUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeFileUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeFileUpgradeStrategyMutation", m)
}

// The UpgradeFileUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeFileUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeFileUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeFileUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeFileUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeFileUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeFileUpgradeStrategyGrayStrategy mutator.
type UpgradeFileUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeFileUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeFileUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeFileUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeFileVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeFileVersion mutator.
type UpgradeFileVersionFunc func(context.Context, *ent.UpgradeFileVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeFileVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeFileVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeFileVersionMutation", m)
}

// The UpgradeTauriFunc type is an adapter to allow the use of ordinary
// function as UpgradeTauri mutator.
type UpgradeTauriFunc func(context.Context, *ent.UpgradeTauriMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTauriFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTauriMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTauriMutation", m)
}

// The UpgradeTauriUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeTauriUpgradeStrategy mutator.
type UpgradeTauriUpgradeStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTauriUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTauriUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTauriUpgradeStrategyMutation", m)
}

// The UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeTauriUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeTauriUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeTauriUpgradeStrategyGrayStrategy mutator.
type UpgradeTauriUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTauriUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTauriUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTauriUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeTauriVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeTauriVersion mutator.
type UpgradeTauriVersionFunc func(context.Context, *ent.UpgradeTauriVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTauriVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTauriVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTauriVersionMutation", m)
}

// The UpgradeTrafficPacketFunc type is an adapter to allow the use of ordinary
// function as UpgradeTrafficPacket mutator.
type UpgradeTrafficPacketFunc func(context.Context, *ent.UpgradeTrafficPacketMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeTrafficPacketFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeTrafficPacketMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeTrafficPacketMutation", m)
}

// The UpgradeUrlFunc type is an adapter to allow the use of ordinary
// function as UpgradeUrl mutator.
type UpgradeUrlFunc func(context.Context, *ent.UpgradeUrlMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeUrlFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeUrlMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeUrlMutation", m)
}

// The UpgradeUrlUpgradeStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeUrlUpgradeStrategy mutator.
type UpgradeUrlUpgradeStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeUrlUpgradeStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeUrlUpgradeStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeUrlUpgradeStrategyMutation", m)
}

// The UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeUrlUpgradeStrategyFlowLimitStrategy mutator.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation", m)
}

// The UpgradeUrlUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary
// function as UpgradeUrlUpgradeStrategyGrayStrategy mutator.
type UpgradeUrlUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyGrayStrategyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeUrlUpgradeStrategyGrayStrategyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeUrlUpgradeStrategyGrayStrategyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeUrlUpgradeStrategyGrayStrategyMutation", m)
}

// The UpgradeUrlVersionFunc type is an adapter to allow the use of ordinary
// function as UpgradeUrlVersion mutator.
type UpgradeUrlVersionFunc func(context.Context, *ent.UpgradeUrlVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UpgradeUrlVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UpgradeUrlVersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UpgradeUrlVersionMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
