// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationVersionDelete is the builder for deleting a UpgradeConfigurationVersion entity.
type UpgradeConfigurationVersionDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationVersionMutation
}

// Where appends a list predicates to the UpgradeConfigurationVersionDelete builder.
func (ucvd *UpgradeConfigurationVersionDelete) Where(ps ...predicate.UpgradeConfigurationVersion) *UpgradeConfigurationVersionDelete {
	ucvd.mutation.Where(ps...)
	return ucvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucvd *UpgradeConfigurationVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucvd.sqlExec, ucvd.mutation, ucvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucvd *UpgradeConfigurationVersionDelete) ExecX(ctx context.Context) int {
	n, err := ucvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucvd *UpgradeConfigurationVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeconfigurationversion.Table, sqlgraph.NewFieldSpec(upgradeconfigurationversion.FieldID, field.TypeInt))
	if ps := ucvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucvd.mutation.done = true
	return affected, err
}

// UpgradeConfigurationVersionDeleteOne is the builder for deleting a single UpgradeConfigurationVersion entity.
type UpgradeConfigurationVersionDeleteOne struct {
	ucvd *UpgradeConfigurationVersionDelete
}

// Where appends a list predicates to the UpgradeConfigurationVersionDelete builder.
func (ucvdo *UpgradeConfigurationVersionDeleteOne) Where(ps ...predicate.UpgradeConfigurationVersion) *UpgradeConfigurationVersionDeleteOne {
	ucvdo.ucvd.mutation.Where(ps...)
	return ucvdo
}

// Exec executes the deletion query.
func (ucvdo *UpgradeConfigurationVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := ucvdo.ucvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeconfigurationversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucvdo *UpgradeConfigurationVersionDeleteOne) ExecX(ctx context.Context) {
	if err := ucvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
