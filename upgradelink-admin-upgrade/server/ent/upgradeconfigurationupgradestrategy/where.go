// Code generated by ent, DO NOT EDIT.

package upgradeconfigurationupgradestrategy

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldID, id))
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldCompanyID, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldEnable, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldDescription, v))
}

// ConfigurationID applies equality check predicate on the "configuration_id" field. It's identical to ConfigurationIDEQ.
func ConfigurationID(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldConfigurationID, v))
}

// ConfigurationVersionID applies equality check predicate on the "configuration_version_id" field. It's identical to ConfigurationVersionIDEQ.
func ConfigurationVersionID(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldConfigurationVersionID, v))
}

// BeginDatetime applies equality check predicate on the "begin_datetime" field. It's identical to BeginDatetimeEQ.
func BeginDatetime(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldBeginDatetime, v))
}

// EndDatetime applies equality check predicate on the "end_datetime" field. It's identical to EndDatetimeEQ.
func EndDatetime(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldEndDatetime, v))
}

// UpgradeType applies equality check predicate on the "upgrade_type" field. It's identical to UpgradeTypeEQ.
func UpgradeType(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeType, v))
}

// PromptUpgradeContent applies equality check predicate on the "prompt_upgrade_content" field. It's identical to PromptUpgradeContentEQ.
func PromptUpgradeContent(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldPromptUpgradeContent, v))
}

// UpgradeDevType applies equality check predicate on the "upgrade_dev_type" field. It's identical to UpgradeDevTypeEQ.
func UpgradeDevType(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeDevType, v))
}

// UpgradeDevData applies equality check predicate on the "upgrade_dev_data" field. It's identical to UpgradeDevDataEQ.
func UpgradeDevData(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeDevData, v))
}

// UpgradeVersionType applies equality check predicate on the "upgrade_version_type" field. It's identical to UpgradeVersionTypeEQ.
func UpgradeVersionType(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeVersionType, v))
}

// UpgradeVersionData applies equality check predicate on the "upgrade_version_data" field. It's identical to UpgradeVersionDataEQ.
func UpgradeVersionData(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeVersionData, v))
}

// IsGray applies equality check predicate on the "is_gray" field. It's identical to IsGrayEQ.
func IsGray(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsGray, v))
}

// GrayData applies equality check predicate on the "gray_data" field. It's identical to GrayDataEQ.
func GrayData(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldGrayData, v))
}

// IsFlowLimit applies equality check predicate on the "is_flow_limit" field. It's identical to IsFlowLimitEQ.
func IsFlowLimit(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsFlowLimit, v))
}

// FlowLimitData applies equality check predicate on the "flow_limit_data" field. It's identical to FlowLimitDataEQ.
func FlowLimitData(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldFlowLimitData, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldCompanyID, v))
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldCompanyID, v))
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldCompanyID, vs...))
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldCompanyID, vs...))
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldCompanyID, v))
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldCompanyID, v))
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldCompanyID, v))
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldCompanyID, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldEnable, v))
}

// EnableIn applies the In predicate on the "enable" field.
func EnableIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldEnable, vs...))
}

// EnableNotIn applies the NotIn predicate on the "enable" field.
func EnableNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldEnable, vs...))
}

// EnableGT applies the GT predicate on the "enable" field.
func EnableGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldEnable, v))
}

// EnableGTE applies the GTE predicate on the "enable" field.
func EnableGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldEnable, v))
}

// EnableLT applies the LT predicate on the "enable" field.
func EnableLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldEnable, v))
}

// EnableLTE applies the LTE predicate on the "enable" field.
func EnableLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldEnable, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldDescription, v))
}

// ConfigurationIDEQ applies the EQ predicate on the "configuration_id" field.
func ConfigurationIDEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldConfigurationID, v))
}

// ConfigurationIDNEQ applies the NEQ predicate on the "configuration_id" field.
func ConfigurationIDNEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldConfigurationID, v))
}

// ConfigurationIDIn applies the In predicate on the "configuration_id" field.
func ConfigurationIDIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldConfigurationID, vs...))
}

// ConfigurationIDNotIn applies the NotIn predicate on the "configuration_id" field.
func ConfigurationIDNotIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldConfigurationID, vs...))
}

// ConfigurationIDGT applies the GT predicate on the "configuration_id" field.
func ConfigurationIDGT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldConfigurationID, v))
}

// ConfigurationIDGTE applies the GTE predicate on the "configuration_id" field.
func ConfigurationIDGTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldConfigurationID, v))
}

// ConfigurationIDLT applies the LT predicate on the "configuration_id" field.
func ConfigurationIDLT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldConfigurationID, v))
}

// ConfigurationIDLTE applies the LTE predicate on the "configuration_id" field.
func ConfigurationIDLTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldConfigurationID, v))
}

// ConfigurationVersionIDEQ applies the EQ predicate on the "configuration_version_id" field.
func ConfigurationVersionIDEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldConfigurationVersionID, v))
}

// ConfigurationVersionIDNEQ applies the NEQ predicate on the "configuration_version_id" field.
func ConfigurationVersionIDNEQ(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldConfigurationVersionID, v))
}

// ConfigurationVersionIDIn applies the In predicate on the "configuration_version_id" field.
func ConfigurationVersionIDIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldConfigurationVersionID, vs...))
}

// ConfigurationVersionIDNotIn applies the NotIn predicate on the "configuration_version_id" field.
func ConfigurationVersionIDNotIn(vs ...int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldConfigurationVersionID, vs...))
}

// ConfigurationVersionIDGT applies the GT predicate on the "configuration_version_id" field.
func ConfigurationVersionIDGT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldConfigurationVersionID, v))
}

// ConfigurationVersionIDGTE applies the GTE predicate on the "configuration_version_id" field.
func ConfigurationVersionIDGTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldConfigurationVersionID, v))
}

// ConfigurationVersionIDLT applies the LT predicate on the "configuration_version_id" field.
func ConfigurationVersionIDLT(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldConfigurationVersionID, v))
}

// ConfigurationVersionIDLTE applies the LTE predicate on the "configuration_version_id" field.
func ConfigurationVersionIDLTE(v int) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldConfigurationVersionID, v))
}

// BeginDatetimeEQ applies the EQ predicate on the "begin_datetime" field.
func BeginDatetimeEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldBeginDatetime, v))
}

// BeginDatetimeNEQ applies the NEQ predicate on the "begin_datetime" field.
func BeginDatetimeNEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldBeginDatetime, v))
}

// BeginDatetimeIn applies the In predicate on the "begin_datetime" field.
func BeginDatetimeIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldBeginDatetime, vs...))
}

// BeginDatetimeNotIn applies the NotIn predicate on the "begin_datetime" field.
func BeginDatetimeNotIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldBeginDatetime, vs...))
}

// BeginDatetimeGT applies the GT predicate on the "begin_datetime" field.
func BeginDatetimeGT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldBeginDatetime, v))
}

// BeginDatetimeGTE applies the GTE predicate on the "begin_datetime" field.
func BeginDatetimeGTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldBeginDatetime, v))
}

// BeginDatetimeLT applies the LT predicate on the "begin_datetime" field.
func BeginDatetimeLT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldBeginDatetime, v))
}

// BeginDatetimeLTE applies the LTE predicate on the "begin_datetime" field.
func BeginDatetimeLTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldBeginDatetime, v))
}

// EndDatetimeEQ applies the EQ predicate on the "end_datetime" field.
func EndDatetimeEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldEndDatetime, v))
}

// EndDatetimeNEQ applies the NEQ predicate on the "end_datetime" field.
func EndDatetimeNEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldEndDatetime, v))
}

// EndDatetimeIn applies the In predicate on the "end_datetime" field.
func EndDatetimeIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldEndDatetime, vs...))
}

// EndDatetimeNotIn applies the NotIn predicate on the "end_datetime" field.
func EndDatetimeNotIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldEndDatetime, vs...))
}

// EndDatetimeGT applies the GT predicate on the "end_datetime" field.
func EndDatetimeGT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldEndDatetime, v))
}

// EndDatetimeGTE applies the GTE predicate on the "end_datetime" field.
func EndDatetimeGTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldEndDatetime, v))
}

// EndDatetimeLT applies the LT predicate on the "end_datetime" field.
func EndDatetimeLT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldEndDatetime, v))
}

// EndDatetimeLTE applies the LTE predicate on the "end_datetime" field.
func EndDatetimeLTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldEndDatetime, v))
}

// UpgradeTypeEQ applies the EQ predicate on the "upgrade_type" field.
func UpgradeTypeEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeType, v))
}

// UpgradeTypeNEQ applies the NEQ predicate on the "upgrade_type" field.
func UpgradeTypeNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpgradeType, v))
}

// UpgradeTypeIn applies the In predicate on the "upgrade_type" field.
func UpgradeTypeIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpgradeType, vs...))
}

// UpgradeTypeNotIn applies the NotIn predicate on the "upgrade_type" field.
func UpgradeTypeNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpgradeType, vs...))
}

// UpgradeTypeGT applies the GT predicate on the "upgrade_type" field.
func UpgradeTypeGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpgradeType, v))
}

// UpgradeTypeGTE applies the GTE predicate on the "upgrade_type" field.
func UpgradeTypeGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpgradeType, v))
}

// UpgradeTypeLT applies the LT predicate on the "upgrade_type" field.
func UpgradeTypeLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpgradeType, v))
}

// UpgradeTypeLTE applies the LTE predicate on the "upgrade_type" field.
func UpgradeTypeLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpgradeType, v))
}

// PromptUpgradeContentEQ applies the EQ predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentNEQ applies the NEQ predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentIn applies the In predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldPromptUpgradeContent, vs...))
}

// PromptUpgradeContentNotIn applies the NotIn predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldPromptUpgradeContent, vs...))
}

// PromptUpgradeContentGT applies the GT predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentGTE applies the GTE predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentLT applies the LT predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentLTE applies the LTE predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentContains applies the Contains predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentHasPrefix applies the HasPrefix predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentHasSuffix applies the HasSuffix predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentIsNil applies the IsNil predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentIsNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIsNull(FieldPromptUpgradeContent))
}

// PromptUpgradeContentNotNil applies the NotNil predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentNotNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotNull(FieldPromptUpgradeContent))
}

// PromptUpgradeContentEqualFold applies the EqualFold predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldPromptUpgradeContent, v))
}

// PromptUpgradeContentContainsFold applies the ContainsFold predicate on the "prompt_upgrade_content" field.
func PromptUpgradeContentContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldPromptUpgradeContent, v))
}

// UpgradeDevTypeEQ applies the EQ predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeDevType, v))
}

// UpgradeDevTypeNEQ applies the NEQ predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpgradeDevType, v))
}

// UpgradeDevTypeIn applies the In predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpgradeDevType, vs...))
}

// UpgradeDevTypeNotIn applies the NotIn predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpgradeDevType, vs...))
}

// UpgradeDevTypeGT applies the GT predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpgradeDevType, v))
}

// UpgradeDevTypeGTE applies the GTE predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpgradeDevType, v))
}

// UpgradeDevTypeLT applies the LT predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpgradeDevType, v))
}

// UpgradeDevTypeLTE applies the LTE predicate on the "upgrade_dev_type" field.
func UpgradeDevTypeLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpgradeDevType, v))
}

// UpgradeDevDataEQ applies the EQ predicate on the "upgrade_dev_data" field.
func UpgradeDevDataEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeDevData, v))
}

// UpgradeDevDataNEQ applies the NEQ predicate on the "upgrade_dev_data" field.
func UpgradeDevDataNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpgradeDevData, v))
}

// UpgradeDevDataIn applies the In predicate on the "upgrade_dev_data" field.
func UpgradeDevDataIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpgradeDevData, vs...))
}

// UpgradeDevDataNotIn applies the NotIn predicate on the "upgrade_dev_data" field.
func UpgradeDevDataNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpgradeDevData, vs...))
}

// UpgradeDevDataGT applies the GT predicate on the "upgrade_dev_data" field.
func UpgradeDevDataGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpgradeDevData, v))
}

// UpgradeDevDataGTE applies the GTE predicate on the "upgrade_dev_data" field.
func UpgradeDevDataGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpgradeDevData, v))
}

// UpgradeDevDataLT applies the LT predicate on the "upgrade_dev_data" field.
func UpgradeDevDataLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpgradeDevData, v))
}

// UpgradeDevDataLTE applies the LTE predicate on the "upgrade_dev_data" field.
func UpgradeDevDataLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpgradeDevData, v))
}

// UpgradeDevDataContains applies the Contains predicate on the "upgrade_dev_data" field.
func UpgradeDevDataContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldUpgradeDevData, v))
}

// UpgradeDevDataHasPrefix applies the HasPrefix predicate on the "upgrade_dev_data" field.
func UpgradeDevDataHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldUpgradeDevData, v))
}

// UpgradeDevDataHasSuffix applies the HasSuffix predicate on the "upgrade_dev_data" field.
func UpgradeDevDataHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldUpgradeDevData, v))
}

// UpgradeDevDataEqualFold applies the EqualFold predicate on the "upgrade_dev_data" field.
func UpgradeDevDataEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldUpgradeDevData, v))
}

// UpgradeDevDataContainsFold applies the ContainsFold predicate on the "upgrade_dev_data" field.
func UpgradeDevDataContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldUpgradeDevData, v))
}

// UpgradeVersionTypeEQ applies the EQ predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeVersionType, v))
}

// UpgradeVersionTypeNEQ applies the NEQ predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpgradeVersionType, v))
}

// UpgradeVersionTypeIn applies the In predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpgradeVersionType, vs...))
}

// UpgradeVersionTypeNotIn applies the NotIn predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpgradeVersionType, vs...))
}

// UpgradeVersionTypeGT applies the GT predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpgradeVersionType, v))
}

// UpgradeVersionTypeGTE applies the GTE predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpgradeVersionType, v))
}

// UpgradeVersionTypeLT applies the LT predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpgradeVersionType, v))
}

// UpgradeVersionTypeLTE applies the LTE predicate on the "upgrade_version_type" field.
func UpgradeVersionTypeLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpgradeVersionType, v))
}

// UpgradeVersionDataEQ applies the EQ predicate on the "upgrade_version_data" field.
func UpgradeVersionDataEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataNEQ applies the NEQ predicate on the "upgrade_version_data" field.
func UpgradeVersionDataNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataIn applies the In predicate on the "upgrade_version_data" field.
func UpgradeVersionDataIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpgradeVersionData, vs...))
}

// UpgradeVersionDataNotIn applies the NotIn predicate on the "upgrade_version_data" field.
func UpgradeVersionDataNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpgradeVersionData, vs...))
}

// UpgradeVersionDataGT applies the GT predicate on the "upgrade_version_data" field.
func UpgradeVersionDataGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataGTE applies the GTE predicate on the "upgrade_version_data" field.
func UpgradeVersionDataGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataLT applies the LT predicate on the "upgrade_version_data" field.
func UpgradeVersionDataLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataLTE applies the LTE predicate on the "upgrade_version_data" field.
func UpgradeVersionDataLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataContains applies the Contains predicate on the "upgrade_version_data" field.
func UpgradeVersionDataContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataHasPrefix applies the HasPrefix predicate on the "upgrade_version_data" field.
func UpgradeVersionDataHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataHasSuffix applies the HasSuffix predicate on the "upgrade_version_data" field.
func UpgradeVersionDataHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataEqualFold applies the EqualFold predicate on the "upgrade_version_data" field.
func UpgradeVersionDataEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldUpgradeVersionData, v))
}

// UpgradeVersionDataContainsFold applies the ContainsFold predicate on the "upgrade_version_data" field.
func UpgradeVersionDataContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldUpgradeVersionData, v))
}

// IsGrayEQ applies the EQ predicate on the "is_gray" field.
func IsGrayEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsGray, v))
}

// IsGrayNEQ applies the NEQ predicate on the "is_gray" field.
func IsGrayNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldIsGray, v))
}

// IsGrayIn applies the In predicate on the "is_gray" field.
func IsGrayIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldIsGray, vs...))
}

// IsGrayNotIn applies the NotIn predicate on the "is_gray" field.
func IsGrayNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldIsGray, vs...))
}

// IsGrayGT applies the GT predicate on the "is_gray" field.
func IsGrayGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldIsGray, v))
}

// IsGrayGTE applies the GTE predicate on the "is_gray" field.
func IsGrayGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldIsGray, v))
}

// IsGrayLT applies the LT predicate on the "is_gray" field.
func IsGrayLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldIsGray, v))
}

// IsGrayLTE applies the LTE predicate on the "is_gray" field.
func IsGrayLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldIsGray, v))
}

// GrayDataEQ applies the EQ predicate on the "gray_data" field.
func GrayDataEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldGrayData, v))
}

// GrayDataNEQ applies the NEQ predicate on the "gray_data" field.
func GrayDataNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldGrayData, v))
}

// GrayDataIn applies the In predicate on the "gray_data" field.
func GrayDataIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldGrayData, vs...))
}

// GrayDataNotIn applies the NotIn predicate on the "gray_data" field.
func GrayDataNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldGrayData, vs...))
}

// GrayDataGT applies the GT predicate on the "gray_data" field.
func GrayDataGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldGrayData, v))
}

// GrayDataGTE applies the GTE predicate on the "gray_data" field.
func GrayDataGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldGrayData, v))
}

// GrayDataLT applies the LT predicate on the "gray_data" field.
func GrayDataLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldGrayData, v))
}

// GrayDataLTE applies the LTE predicate on the "gray_data" field.
func GrayDataLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldGrayData, v))
}

// GrayDataContains applies the Contains predicate on the "gray_data" field.
func GrayDataContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldGrayData, v))
}

// GrayDataHasPrefix applies the HasPrefix predicate on the "gray_data" field.
func GrayDataHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldGrayData, v))
}

// GrayDataHasSuffix applies the HasSuffix predicate on the "gray_data" field.
func GrayDataHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldGrayData, v))
}

// GrayDataEqualFold applies the EqualFold predicate on the "gray_data" field.
func GrayDataEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldGrayData, v))
}

// GrayDataContainsFold applies the ContainsFold predicate on the "gray_data" field.
func GrayDataContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldGrayData, v))
}

// IsFlowLimitEQ applies the EQ predicate on the "is_flow_limit" field.
func IsFlowLimitEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsFlowLimit, v))
}

// IsFlowLimitNEQ applies the NEQ predicate on the "is_flow_limit" field.
func IsFlowLimitNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldIsFlowLimit, v))
}

// IsFlowLimitIn applies the In predicate on the "is_flow_limit" field.
func IsFlowLimitIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldIsFlowLimit, vs...))
}

// IsFlowLimitNotIn applies the NotIn predicate on the "is_flow_limit" field.
func IsFlowLimitNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldIsFlowLimit, vs...))
}

// IsFlowLimitGT applies the GT predicate on the "is_flow_limit" field.
func IsFlowLimitGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldIsFlowLimit, v))
}

// IsFlowLimitGTE applies the GTE predicate on the "is_flow_limit" field.
func IsFlowLimitGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldIsFlowLimit, v))
}

// IsFlowLimitLT applies the LT predicate on the "is_flow_limit" field.
func IsFlowLimitLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldIsFlowLimit, v))
}

// IsFlowLimitLTE applies the LTE predicate on the "is_flow_limit" field.
func IsFlowLimitLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldIsFlowLimit, v))
}

// FlowLimitDataEQ applies the EQ predicate on the "flow_limit_data" field.
func FlowLimitDataEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldFlowLimitData, v))
}

// FlowLimitDataNEQ applies the NEQ predicate on the "flow_limit_data" field.
func FlowLimitDataNEQ(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldFlowLimitData, v))
}

// FlowLimitDataIn applies the In predicate on the "flow_limit_data" field.
func FlowLimitDataIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldFlowLimitData, vs...))
}

// FlowLimitDataNotIn applies the NotIn predicate on the "flow_limit_data" field.
func FlowLimitDataNotIn(vs ...string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldFlowLimitData, vs...))
}

// FlowLimitDataGT applies the GT predicate on the "flow_limit_data" field.
func FlowLimitDataGT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldFlowLimitData, v))
}

// FlowLimitDataGTE applies the GTE predicate on the "flow_limit_data" field.
func FlowLimitDataGTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldFlowLimitData, v))
}

// FlowLimitDataLT applies the LT predicate on the "flow_limit_data" field.
func FlowLimitDataLT(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldFlowLimitData, v))
}

// FlowLimitDataLTE applies the LTE predicate on the "flow_limit_data" field.
func FlowLimitDataLTE(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldFlowLimitData, v))
}

// FlowLimitDataContains applies the Contains predicate on the "flow_limit_data" field.
func FlowLimitDataContains(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContains(FieldFlowLimitData, v))
}

// FlowLimitDataHasPrefix applies the HasPrefix predicate on the "flow_limit_data" field.
func FlowLimitDataHasPrefix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasPrefix(FieldFlowLimitData, v))
}

// FlowLimitDataHasSuffix applies the HasSuffix predicate on the "flow_limit_data" field.
func FlowLimitDataHasSuffix(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldHasSuffix(FieldFlowLimitData, v))
}

// FlowLimitDataEqualFold applies the EqualFold predicate on the "flow_limit_data" field.
func FlowLimitDataEqualFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEqualFold(FieldFlowLimitData, v))
}

// FlowLimitDataContainsFold applies the ContainsFold predicate on the "flow_limit_data" field.
func FlowLimitDataContainsFold(v string) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldContainsFold(FieldFlowLimitData, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeConfigurationUpgradeStrategy) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeConfigurationUpgradeStrategy) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeConfigurationUpgradeStrategy) predicate.UpgradeConfigurationUpgradeStrategy {
	return predicate.UpgradeConfigurationUpgradeStrategy(sql.NotPredicates(p))
}
