// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyDelete is the builder for deleting a UpgradeElectronUpgradeStrategy entity.
type UpgradeElectronUpgradeStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyDelete builder.
func (ueusd *UpgradeElectronUpgradeStrategyDelete) Where(ps ...predicate.UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyDelete {
	ueusd.mutation.Where(ps...)
	return ueusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ueusd *UpgradeElectronUpgradeStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusd.sqlExec, ueusd.mutation, ueusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusd *UpgradeElectronUpgradeStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ueusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ueusd *UpgradeElectronUpgradeStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeelectronupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategy.FieldID, field.TypeInt))
	if ps := ueusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ueusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ueusd.mutation.done = true
	return affected, err
}

// UpgradeElectronUpgradeStrategyDeleteOne is the builder for deleting a single UpgradeElectronUpgradeStrategy entity.
type UpgradeElectronUpgradeStrategyDeleteOne struct {
	ueusd *UpgradeElectronUpgradeStrategyDelete
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyDelete builder.
func (ueusdo *UpgradeElectronUpgradeStrategyDeleteOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategy) *UpgradeElectronUpgradeStrategyDeleteOne {
	ueusdo.ueusd.mutation.Where(ps...)
	return ueusdo
}

// Exec executes the deletion query.
func (ueusdo *UpgradeElectronUpgradeStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ueusdo.ueusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeelectronupgradestrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusdo *UpgradeElectronUpgradeStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ueusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
