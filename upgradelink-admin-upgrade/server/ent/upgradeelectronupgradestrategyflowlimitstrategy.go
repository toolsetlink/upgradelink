// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategyflowlimitstrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeElectronUpgradeStrategyFlowLimitStrategy is the model entity for the UpgradeElectronUpgradeStrategyFlowLimitStrategy schema.
type UpgradeElectronUpgradeStrategyFlowLimitStrategy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 是否生效；可通过此控制策略是否生效0：失效；1：生效
	Enable int32 `json:"enable,omitempty"`
	// 开始时间段: 时分秒
	BeginTime string `json:"begin_time,omitempty"`
	// 结束时间段: 时分秒
	EndTime string `json:"end_time,omitempty"`
	// 流控维度；流控维度：1：秒；2：分；3：时；4：天
	Dimension int32 `json:"dimension,omitempty"`
	// 频控限制；在流控维度上的次数
	Limit int `json:"limit,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeElectronUpgradeStrategyFlowLimitStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldID, upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable, upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension, upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit, upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldBeginTime, upgradeelectronupgradestrategyflowlimitstrategy.FieldEndTime:
			values[i] = new(sql.NullString)
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt, upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeElectronUpgradeStrategyFlowLimitStrategy fields.
func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ueusfls.ID = int(value.Int64)
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldEnable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				ueusfls.Enable = int32(value.Int64)
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldBeginTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field begin_time", values[i])
			} else if value.Valid {
				ueusfls.BeginTime = value.String
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldEndTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ueusfls.EndTime = value.String
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldDimension:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimension", values[i])
			} else if value.Valid {
				ueusfls.Dimension = int32(value.Int64)
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit", values[i])
			} else if value.Valid {
				ueusfls.Limit = int(value.Int64)
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				ueusfls.IsDel = int32(value.Int64)
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ueusfls.CreateAt = value.Time
			}
		case upgradeelectronupgradestrategyflowlimitstrategy.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ueusfls.UpdateAt = value.Time
			}
		default:
			ueusfls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeElectronUpgradeStrategyFlowLimitStrategy.
// This includes values selected through modifiers, order, etc.
func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) Value(name string) (ent.Value, error) {
	return ueusfls.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeElectronUpgradeStrategyFlowLimitStrategy.
// Note that you need to call UpgradeElectronUpgradeStrategyFlowLimitStrategy.Unwrap() before calling this method if this UpgradeElectronUpgradeStrategyFlowLimitStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) Update() *UpgradeElectronUpgradeStrategyFlowLimitStrategyUpdateOne {
	return NewUpgradeElectronUpgradeStrategyFlowLimitStrategyClient(ueusfls.config).UpdateOne(ueusfls)
}

// Unwrap unwraps the UpgradeElectronUpgradeStrategyFlowLimitStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) Unwrap() *UpgradeElectronUpgradeStrategyFlowLimitStrategy {
	_tx, ok := ueusfls.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeElectronUpgradeStrategyFlowLimitStrategy is not a transactional entity")
	}
	ueusfls.config.driver = _tx.drv
	return ueusfls
}

// String implements the fmt.Stringer.
func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeElectronUpgradeStrategyFlowLimitStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ueusfls.ID))
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", ueusfls.Enable))
	builder.WriteString(", ")
	builder.WriteString("begin_time=")
	builder.WriteString(ueusfls.BeginTime)
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ueusfls.EndTime)
	builder.WriteString(", ")
	builder.WriteString("dimension=")
	builder.WriteString(fmt.Sprintf("%v", ueusfls.Dimension))
	builder.WriteString(", ")
	builder.WriteString("limit=")
	builder.WriteString(fmt.Sprintf("%v", ueusfls.Limit))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", ueusfls.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ueusfls.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ueusfls.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategies is a parsable slice of UpgradeElectronUpgradeStrategyFlowLimitStrategy.
type UpgradeElectronUpgradeStrategyFlowLimitStrategies []*UpgradeElectronUpgradeStrategyFlowLimitStrategy
