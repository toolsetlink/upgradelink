// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkVersionUpdate is the builder for updating UpgradeApkVersion entities.
type UpgradeApkVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeApkVersionMutation
}

// Where appends a list predicates to the UpgradeApkVersionUpdate builder.
func (uavu *UpgradeApkVersionUpdate) Where(ps ...predicate.UpgradeApkVersion) *UpgradeApkVersionUpdate {
	uavu.mutation.Where(ps...)
	return uavu
}

// SetCompanyID sets the "company_id" field.
func (uavu *UpgradeApkVersionUpdate) SetCompanyID(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.ResetCompanyID()
	uavu.mutation.SetCompanyID(i)
	return uavu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableCompanyID(i *int) *UpgradeApkVersionUpdate {
	if i != nil {
		uavu.SetCompanyID(*i)
	}
	return uavu
}

// AddCompanyID adds i to the "company_id" field.
func (uavu *UpgradeApkVersionUpdate) AddCompanyID(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.AddCompanyID(i)
	return uavu
}

// SetApkID sets the "apk_id" field.
func (uavu *UpgradeApkVersionUpdate) SetApkID(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.ResetApkID()
	uavu.mutation.SetApkID(i)
	return uavu
}

// SetNillableApkID sets the "apk_id" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableApkID(i *int) *UpgradeApkVersionUpdate {
	if i != nil {
		uavu.SetApkID(*i)
	}
	return uavu
}

// AddApkID adds i to the "apk_id" field.
func (uavu *UpgradeApkVersionUpdate) AddApkID(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.AddApkID(i)
	return uavu
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uavu *UpgradeApkVersionUpdate) SetCloudFileID(s string) *UpgradeApkVersionUpdate {
	uavu.mutation.SetCloudFileID(s)
	return uavu
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableCloudFileID(s *string) *UpgradeApkVersionUpdate {
	if s != nil {
		uavu.SetCloudFileID(*s)
	}
	return uavu
}

// SetVersionName sets the "version_name" field.
func (uavu *UpgradeApkVersionUpdate) SetVersionName(s string) *UpgradeApkVersionUpdate {
	uavu.mutation.SetVersionName(s)
	return uavu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableVersionName(s *string) *UpgradeApkVersionUpdate {
	if s != nil {
		uavu.SetVersionName(*s)
	}
	return uavu
}

// SetVersionCode sets the "version_code" field.
func (uavu *UpgradeApkVersionUpdate) SetVersionCode(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.ResetVersionCode()
	uavu.mutation.SetVersionCode(i)
	return uavu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableVersionCode(i *int) *UpgradeApkVersionUpdate {
	if i != nil {
		uavu.SetVersionCode(*i)
	}
	return uavu
}

// AddVersionCode adds i to the "version_code" field.
func (uavu *UpgradeApkVersionUpdate) AddVersionCode(i int) *UpgradeApkVersionUpdate {
	uavu.mutation.AddVersionCode(i)
	return uavu
}

// SetDescription sets the "description" field.
func (uavu *UpgradeApkVersionUpdate) SetDescription(s string) *UpgradeApkVersionUpdate {
	uavu.mutation.SetDescription(s)
	return uavu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableDescription(s *string) *UpgradeApkVersionUpdate {
	if s != nil {
		uavu.SetDescription(*s)
	}
	return uavu
}

// ClearDescription clears the value of the "description" field.
func (uavu *UpgradeApkVersionUpdate) ClearDescription() *UpgradeApkVersionUpdate {
	uavu.mutation.ClearDescription()
	return uavu
}

// SetIsDel sets the "is_del" field.
func (uavu *UpgradeApkVersionUpdate) SetIsDel(i int32) *UpgradeApkVersionUpdate {
	uavu.mutation.ResetIsDel()
	uavu.mutation.SetIsDel(i)
	return uavu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableIsDel(i *int32) *UpgradeApkVersionUpdate {
	if i != nil {
		uavu.SetIsDel(*i)
	}
	return uavu
}

// AddIsDel adds i to the "is_del" field.
func (uavu *UpgradeApkVersionUpdate) AddIsDel(i int32) *UpgradeApkVersionUpdate {
	uavu.mutation.AddIsDel(i)
	return uavu
}

// SetCreateAt sets the "create_at" field.
func (uavu *UpgradeApkVersionUpdate) SetCreateAt(t time.Time) *UpgradeApkVersionUpdate {
	uavu.mutation.SetCreateAt(t)
	return uavu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeApkVersionUpdate {
	if t != nil {
		uavu.SetCreateAt(*t)
	}
	return uavu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uavu *UpgradeApkVersionUpdate) ClearCreateAt() *UpgradeApkVersionUpdate {
	uavu.mutation.ClearCreateAt()
	return uavu
}

// SetUpdateAt sets the "update_at" field.
func (uavu *UpgradeApkVersionUpdate) SetUpdateAt(t time.Time) *UpgradeApkVersionUpdate {
	uavu.mutation.SetUpdateAt(t)
	return uavu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uavu *UpgradeApkVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeApkVersionUpdate {
	if t != nil {
		uavu.SetUpdateAt(*t)
	}
	return uavu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uavu *UpgradeApkVersionUpdate) ClearUpdateAt() *UpgradeApkVersionUpdate {
	uavu.mutation.ClearUpdateAt()
	return uavu
}

// Mutation returns the UpgradeApkVersionMutation object of the builder.
func (uavu *UpgradeApkVersionUpdate) Mutation() *UpgradeApkVersionMutation {
	return uavu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uavu *UpgradeApkVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uavu.sqlSave, uavu.mutation, uavu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uavu *UpgradeApkVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := uavu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uavu *UpgradeApkVersionUpdate) Exec(ctx context.Context) error {
	_, err := uavu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uavu *UpgradeApkVersionUpdate) ExecX(ctx context.Context) {
	if err := uavu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uavu *UpgradeApkVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkversion.Table, upgradeapkversion.Columns, sqlgraph.NewFieldSpec(upgradeapkversion.FieldID, field.TypeInt))
	if ps := uavu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uavu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapkversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapkversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.ApkID(); ok {
		_spec.SetField(upgradeapkversion.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.AddedApkID(); ok {
		_spec.AddField(upgradeapkversion.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeapkversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := uavu.mutation.VersionName(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uavu.mutation.VersionCode(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeapkversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uavu.mutation.Description(); ok {
		_spec.SetField(upgradeapkversion.FieldDescription, field.TypeString, value)
	}
	if uavu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapkversion.FieldDescription, field.TypeString)
	}
	if value, ok := uavu.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uavu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uavu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldCreateAt, field.TypeTime, value)
	}
	if uavu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uavu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uavu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uavu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uavu.mutation.done = true
	return n, nil
}

// UpgradeApkVersionUpdateOne is the builder for updating a single UpgradeApkVersion entity.
type UpgradeApkVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeApkVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetCompanyID(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ResetCompanyID()
	uavuo.mutation.SetCompanyID(i)
	return uavuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeApkVersionUpdateOne {
	if i != nil {
		uavuo.SetCompanyID(*i)
	}
	return uavuo
}

// AddCompanyID adds i to the "company_id" field.
func (uavuo *UpgradeApkVersionUpdateOne) AddCompanyID(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.AddCompanyID(i)
	return uavuo
}

// SetApkID sets the "apk_id" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetApkID(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ResetApkID()
	uavuo.mutation.SetApkID(i)
	return uavuo
}

// SetNillableApkID sets the "apk_id" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableApkID(i *int) *UpgradeApkVersionUpdateOne {
	if i != nil {
		uavuo.SetApkID(*i)
	}
	return uavuo
}

// AddApkID adds i to the "apk_id" field.
func (uavuo *UpgradeApkVersionUpdateOne) AddApkID(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.AddApkID(i)
	return uavuo
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetCloudFileID(s string) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.SetCloudFileID(s)
	return uavuo
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableCloudFileID(s *string) *UpgradeApkVersionUpdateOne {
	if s != nil {
		uavuo.SetCloudFileID(*s)
	}
	return uavuo
}

// SetVersionName sets the "version_name" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetVersionName(s string) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.SetVersionName(s)
	return uavuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeApkVersionUpdateOne {
	if s != nil {
		uavuo.SetVersionName(*s)
	}
	return uavuo
}

// SetVersionCode sets the "version_code" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetVersionCode(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ResetVersionCode()
	uavuo.mutation.SetVersionCode(i)
	return uavuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeApkVersionUpdateOne {
	if i != nil {
		uavuo.SetVersionCode(*i)
	}
	return uavuo
}

// AddVersionCode adds i to the "version_code" field.
func (uavuo *UpgradeApkVersionUpdateOne) AddVersionCode(i int) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.AddVersionCode(i)
	return uavuo
}

// SetDescription sets the "description" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetDescription(s string) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.SetDescription(s)
	return uavuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableDescription(s *string) *UpgradeApkVersionUpdateOne {
	if s != nil {
		uavuo.SetDescription(*s)
	}
	return uavuo
}

// ClearDescription clears the value of the "description" field.
func (uavuo *UpgradeApkVersionUpdateOne) ClearDescription() *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ClearDescription()
	return uavuo
}

// SetIsDel sets the "is_del" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetIsDel(i int32) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ResetIsDel()
	uavuo.mutation.SetIsDel(i)
	return uavuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeApkVersionUpdateOne {
	if i != nil {
		uavuo.SetIsDel(*i)
	}
	return uavuo
}

// AddIsDel adds i to the "is_del" field.
func (uavuo *UpgradeApkVersionUpdateOne) AddIsDel(i int32) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.AddIsDel(i)
	return uavuo
}

// SetCreateAt sets the "create_at" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.SetCreateAt(t)
	return uavuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeApkVersionUpdateOne {
	if t != nil {
		uavuo.SetCreateAt(*t)
	}
	return uavuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uavuo *UpgradeApkVersionUpdateOne) ClearCreateAt() *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ClearCreateAt()
	return uavuo
}

// SetUpdateAt sets the "update_at" field.
func (uavuo *UpgradeApkVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.SetUpdateAt(t)
	return uavuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uavuo *UpgradeApkVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeApkVersionUpdateOne {
	if t != nil {
		uavuo.SetUpdateAt(*t)
	}
	return uavuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uavuo *UpgradeApkVersionUpdateOne) ClearUpdateAt() *UpgradeApkVersionUpdateOne {
	uavuo.mutation.ClearUpdateAt()
	return uavuo
}

// Mutation returns the UpgradeApkVersionMutation object of the builder.
func (uavuo *UpgradeApkVersionUpdateOne) Mutation() *UpgradeApkVersionMutation {
	return uavuo.mutation
}

// Where appends a list predicates to the UpgradeApkVersionUpdate builder.
func (uavuo *UpgradeApkVersionUpdateOne) Where(ps ...predicate.UpgradeApkVersion) *UpgradeApkVersionUpdateOne {
	uavuo.mutation.Where(ps...)
	return uavuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uavuo *UpgradeApkVersionUpdateOne) Select(field string, fields ...string) *UpgradeApkVersionUpdateOne {
	uavuo.fields = append([]string{field}, fields...)
	return uavuo
}

// Save executes the query and returns the updated UpgradeApkVersion entity.
func (uavuo *UpgradeApkVersionUpdateOne) Save(ctx context.Context) (*UpgradeApkVersion, error) {
	return withHooks(ctx, uavuo.sqlSave, uavuo.mutation, uavuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uavuo *UpgradeApkVersionUpdateOne) SaveX(ctx context.Context) *UpgradeApkVersion {
	node, err := uavuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uavuo *UpgradeApkVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := uavuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uavuo *UpgradeApkVersionUpdateOne) ExecX(ctx context.Context) {
	if err := uavuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uavuo *UpgradeApkVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeApkVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkversion.Table, upgradeapkversion.Columns, sqlgraph.NewFieldSpec(upgradeapkversion.FieldID, field.TypeInt))
	id, ok := uavuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeApkVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uavuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapkversion.FieldID)
		for _, f := range fields {
			if !upgradeapkversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeapkversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uavuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uavuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapkversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapkversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.ApkID(); ok {
		_spec.SetField(upgradeapkversion.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.AddedApkID(); ok {
		_spec.AddField(upgradeapkversion.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeapkversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := uavuo.mutation.VersionName(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uavuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeapkversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uavuo.mutation.Description(); ok {
		_spec.SetField(upgradeapkversion.FieldDescription, field.TypeString, value)
	}
	if uavuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapkversion.FieldDescription, field.TypeString)
	}
	if value, ok := uavuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uavuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uavuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldCreateAt, field.TypeTime, value)
	}
	if uavuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uavuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uavuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeApkVersion{config: uavuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uavuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uavuo.mutation.done = true
	return _node, nil
}
