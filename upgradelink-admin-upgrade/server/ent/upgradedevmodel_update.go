// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradedevmodel"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeDevModelUpdate is the builder for updating UpgradeDevModel entities.
type UpgradeDevModelUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeDevModelMutation
}

// Where appends a list predicates to the UpgradeDevModelUpdate builder.
func (udmu *UpgradeDevModelUpdate) Where(ps ...predicate.UpgradeDevModel) *UpgradeDevModelUpdate {
	udmu.mutation.Where(ps...)
	return udmu
}

// SetCompanyID sets the "company_id" field.
func (udmu *UpgradeDevModelUpdate) SetCompanyID(i int) *UpgradeDevModelUpdate {
	udmu.mutation.ResetCompanyID()
	udmu.mutation.SetCompanyID(i)
	return udmu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableCompanyID(i *int) *UpgradeDevModelUpdate {
	if i != nil {
		udmu.SetCompanyID(*i)
	}
	return udmu
}

// AddCompanyID adds i to the "company_id" field.
func (udmu *UpgradeDevModelUpdate) AddCompanyID(i int) *UpgradeDevModelUpdate {
	udmu.mutation.AddCompanyID(i)
	return udmu
}

// SetKey sets the "key" field.
func (udmu *UpgradeDevModelUpdate) SetKey(s string) *UpgradeDevModelUpdate {
	udmu.mutation.SetKey(s)
	return udmu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableKey(s *string) *UpgradeDevModelUpdate {
	if s != nil {
		udmu.SetKey(*s)
	}
	return udmu
}

// SetName sets the "name" field.
func (udmu *UpgradeDevModelUpdate) SetName(s string) *UpgradeDevModelUpdate {
	udmu.mutation.SetName(s)
	return udmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableName(s *string) *UpgradeDevModelUpdate {
	if s != nil {
		udmu.SetName(*s)
	}
	return udmu
}

// SetIsDel sets the "is_del" field.
func (udmu *UpgradeDevModelUpdate) SetIsDel(i int32) *UpgradeDevModelUpdate {
	udmu.mutation.ResetIsDel()
	udmu.mutation.SetIsDel(i)
	return udmu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableIsDel(i *int32) *UpgradeDevModelUpdate {
	if i != nil {
		udmu.SetIsDel(*i)
	}
	return udmu
}

// AddIsDel adds i to the "is_del" field.
func (udmu *UpgradeDevModelUpdate) AddIsDel(i int32) *UpgradeDevModelUpdate {
	udmu.mutation.AddIsDel(i)
	return udmu
}

// SetCreateAt sets the "create_at" field.
func (udmu *UpgradeDevModelUpdate) SetCreateAt(t time.Time) *UpgradeDevModelUpdate {
	udmu.mutation.SetCreateAt(t)
	return udmu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableCreateAt(t *time.Time) *UpgradeDevModelUpdate {
	if t != nil {
		udmu.SetCreateAt(*t)
	}
	return udmu
}

// ClearCreateAt clears the value of the "create_at" field.
func (udmu *UpgradeDevModelUpdate) ClearCreateAt() *UpgradeDevModelUpdate {
	udmu.mutation.ClearCreateAt()
	return udmu
}

// SetUpdateAt sets the "update_at" field.
func (udmu *UpgradeDevModelUpdate) SetUpdateAt(t time.Time) *UpgradeDevModelUpdate {
	udmu.mutation.SetUpdateAt(t)
	return udmu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udmu *UpgradeDevModelUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeDevModelUpdate {
	if t != nil {
		udmu.SetUpdateAt(*t)
	}
	return udmu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udmu *UpgradeDevModelUpdate) ClearUpdateAt() *UpgradeDevModelUpdate {
	udmu.mutation.ClearUpdateAt()
	return udmu
}

// Mutation returns the UpgradeDevModelMutation object of the builder.
func (udmu *UpgradeDevModelUpdate) Mutation() *UpgradeDevModelMutation {
	return udmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udmu *UpgradeDevModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, udmu.sqlSave, udmu.mutation, udmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udmu *UpgradeDevModelUpdate) SaveX(ctx context.Context) int {
	affected, err := udmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udmu *UpgradeDevModelUpdate) Exec(ctx context.Context) error {
	_, err := udmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udmu *UpgradeDevModelUpdate) ExecX(ctx context.Context) {
	if err := udmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udmu *UpgradeDevModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevmodel.Table, upgradedevmodel.Columns, sqlgraph.NewFieldSpec(upgradedevmodel.FieldID, field.TypeInt))
	if ps := udmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udmu.mutation.CompanyID(); ok {
		_spec.SetField(upgradedevmodel.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udmu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedevmodel.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udmu.mutation.Key(); ok {
		_spec.SetField(upgradedevmodel.FieldKey, field.TypeString, value)
	}
	if value, ok := udmu.mutation.Name(); ok {
		_spec.SetField(upgradedevmodel.FieldName, field.TypeString, value)
	}
	if value, ok := udmu.mutation.IsDel(); ok {
		_spec.SetField(upgradedevmodel.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udmu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevmodel.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udmu.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevmodel.FieldCreateAt, field.TypeTime, value)
	}
	if udmu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevmodel.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udmu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevmodel.FieldUpdateAt, field.TypeTime, value)
	}
	if udmu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevmodel.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udmu.mutation.done = true
	return n, nil
}

// UpgradeDevModelUpdateOne is the builder for updating a single UpgradeDevModel entity.
type UpgradeDevModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeDevModelMutation
}

// SetCompanyID sets the "company_id" field.
func (udmuo *UpgradeDevModelUpdateOne) SetCompanyID(i int) *UpgradeDevModelUpdateOne {
	udmuo.mutation.ResetCompanyID()
	udmuo.mutation.SetCompanyID(i)
	return udmuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableCompanyID(i *int) *UpgradeDevModelUpdateOne {
	if i != nil {
		udmuo.SetCompanyID(*i)
	}
	return udmuo
}

// AddCompanyID adds i to the "company_id" field.
func (udmuo *UpgradeDevModelUpdateOne) AddCompanyID(i int) *UpgradeDevModelUpdateOne {
	udmuo.mutation.AddCompanyID(i)
	return udmuo
}

// SetKey sets the "key" field.
func (udmuo *UpgradeDevModelUpdateOne) SetKey(s string) *UpgradeDevModelUpdateOne {
	udmuo.mutation.SetKey(s)
	return udmuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableKey(s *string) *UpgradeDevModelUpdateOne {
	if s != nil {
		udmuo.SetKey(*s)
	}
	return udmuo
}

// SetName sets the "name" field.
func (udmuo *UpgradeDevModelUpdateOne) SetName(s string) *UpgradeDevModelUpdateOne {
	udmuo.mutation.SetName(s)
	return udmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableName(s *string) *UpgradeDevModelUpdateOne {
	if s != nil {
		udmuo.SetName(*s)
	}
	return udmuo
}

// SetIsDel sets the "is_del" field.
func (udmuo *UpgradeDevModelUpdateOne) SetIsDel(i int32) *UpgradeDevModelUpdateOne {
	udmuo.mutation.ResetIsDel()
	udmuo.mutation.SetIsDel(i)
	return udmuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableIsDel(i *int32) *UpgradeDevModelUpdateOne {
	if i != nil {
		udmuo.SetIsDel(*i)
	}
	return udmuo
}

// AddIsDel adds i to the "is_del" field.
func (udmuo *UpgradeDevModelUpdateOne) AddIsDel(i int32) *UpgradeDevModelUpdateOne {
	udmuo.mutation.AddIsDel(i)
	return udmuo
}

// SetCreateAt sets the "create_at" field.
func (udmuo *UpgradeDevModelUpdateOne) SetCreateAt(t time.Time) *UpgradeDevModelUpdateOne {
	udmuo.mutation.SetCreateAt(t)
	return udmuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeDevModelUpdateOne {
	if t != nil {
		udmuo.SetCreateAt(*t)
	}
	return udmuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (udmuo *UpgradeDevModelUpdateOne) ClearCreateAt() *UpgradeDevModelUpdateOne {
	udmuo.mutation.ClearCreateAt()
	return udmuo
}

// SetUpdateAt sets the "update_at" field.
func (udmuo *UpgradeDevModelUpdateOne) SetUpdateAt(t time.Time) *UpgradeDevModelUpdateOne {
	udmuo.mutation.SetUpdateAt(t)
	return udmuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (udmuo *UpgradeDevModelUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeDevModelUpdateOne {
	if t != nil {
		udmuo.SetUpdateAt(*t)
	}
	return udmuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (udmuo *UpgradeDevModelUpdateOne) ClearUpdateAt() *UpgradeDevModelUpdateOne {
	udmuo.mutation.ClearUpdateAt()
	return udmuo
}

// Mutation returns the UpgradeDevModelMutation object of the builder.
func (udmuo *UpgradeDevModelUpdateOne) Mutation() *UpgradeDevModelMutation {
	return udmuo.mutation
}

// Where appends a list predicates to the UpgradeDevModelUpdate builder.
func (udmuo *UpgradeDevModelUpdateOne) Where(ps ...predicate.UpgradeDevModel) *UpgradeDevModelUpdateOne {
	udmuo.mutation.Where(ps...)
	return udmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (udmuo *UpgradeDevModelUpdateOne) Select(field string, fields ...string) *UpgradeDevModelUpdateOne {
	udmuo.fields = append([]string{field}, fields...)
	return udmuo
}

// Save executes the query and returns the updated UpgradeDevModel entity.
func (udmuo *UpgradeDevModelUpdateOne) Save(ctx context.Context) (*UpgradeDevModel, error) {
	return withHooks(ctx, udmuo.sqlSave, udmuo.mutation, udmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udmuo *UpgradeDevModelUpdateOne) SaveX(ctx context.Context) *UpgradeDevModel {
	node, err := udmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (udmuo *UpgradeDevModelUpdateOne) Exec(ctx context.Context) error {
	_, err := udmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udmuo *UpgradeDevModelUpdateOne) ExecX(ctx context.Context) {
	if err := udmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (udmuo *UpgradeDevModelUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeDevModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradedevmodel.Table, upgradedevmodel.Columns, sqlgraph.NewFieldSpec(upgradedevmodel.FieldID, field.TypeInt))
	id, ok := udmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeDevModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := udmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradedevmodel.FieldID)
		for _, f := range fields {
			if !upgradedevmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradedevmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := udmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udmuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradedevmodel.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udmuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradedevmodel.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := udmuo.mutation.Key(); ok {
		_spec.SetField(upgradedevmodel.FieldKey, field.TypeString, value)
	}
	if value, ok := udmuo.mutation.Name(); ok {
		_spec.SetField(upgradedevmodel.FieldName, field.TypeString, value)
	}
	if value, ok := udmuo.mutation.IsDel(); ok {
		_spec.SetField(upgradedevmodel.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udmuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradedevmodel.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := udmuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradedevmodel.FieldCreateAt, field.TypeTime, value)
	}
	if udmuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradedevmodel.FieldCreateAt, field.TypeTime)
	}
	if value, ok := udmuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradedevmodel.FieldUpdateAt, field.TypeTime, value)
	}
	if udmuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradedevmodel.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeDevModel{config: udmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, udmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradedevmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	udmuo.mutation.done = true
	return _node, nil
}
