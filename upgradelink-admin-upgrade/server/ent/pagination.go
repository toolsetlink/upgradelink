// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/fmscloudfile"
	"upgradelink-admin-upgrade/server/ent/sysuser"
	"upgradelink-admin-upgrade/server/ent/upgradeapk"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkversion"
	"upgradelink-admin-upgrade/server/ent/upgradeappdownloadreportlog"
	"upgradelink-admin-upgrade/server/ent/upgradecompanyincome"
	"upgradelink-admin-upgrade/server/ent/upgradecompanytrafficpacket"
	"upgradelink-admin-upgrade/server/ent/upgradeconfiguration"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationversion"
	"upgradelink-admin-upgrade/server/ent/upgradedev"
	"upgradelink-admin-upgrade/server/ent/upgradedevgroup"
	"upgradelink-admin-upgrade/server/ent/upgradedevgrouprelation"
	"upgradelink-admin-upgrade/server/ent/upgradedevmodel"
	"upgradelink-admin-upgrade/server/ent/upgradeelectron"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronversion"
	"upgradelink-admin-upgrade/server/ent/upgradefile"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileversion"
	"upgradelink-admin-upgrade/server/ent/upgradetauri"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriversion"
	"upgradelink-admin-upgrade/server/ent/upgradetrafficpacket"
	"upgradelink-admin-upgrade/server/ent/upgradeurl"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlversion"
)

const errInvalidPage = "INVALID_PAGE"

const (
	listField     = "list"
	pageNumField  = "pageNum"
	pageSizeField = "pageSize"
)

type PageDetails struct {
	Page  uint64 `json:"page"`
	Size  uint64 `json:"size"`
	Total uint64 `json:"total"`
}

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

const errInvalidPagination = "INVALID_PAGINATION"

type FmsCloudFilePager struct {
	Order  fmscloudfile.OrderOption
	Filter func(*FmsCloudFileQuery) (*FmsCloudFileQuery, error)
}

// FmsCloudFilePaginateOption enables pagination customization.
type FmsCloudFilePaginateOption func(*FmsCloudFilePager)

// DefaultFmsCloudFileOrder is the default ordering of FmsCloudFile.
var DefaultFmsCloudFileOrder = Desc(fmscloudfile.FieldID)

func newFmsCloudFilePager(opts []FmsCloudFilePaginateOption) (*FmsCloudFilePager, error) {
	pager := &FmsCloudFilePager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultFmsCloudFileOrder
	}
	return pager, nil
}

func (p *FmsCloudFilePager) ApplyFilter(query *FmsCloudFileQuery) (*FmsCloudFileQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// FmsCloudFilePageList is FmsCloudFile PageList result.
type FmsCloudFilePageList struct {
	List        []*FmsCloudFile `json:"list"`
	PageDetails *PageDetails    `json:"pageDetails"`
}

func (fcf *FmsCloudFileQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...FmsCloudFilePaginateOption,
) (*FmsCloudFilePageList, error) {

	pager, err := newFmsCloudFilePager(opts)
	if err != nil {
		return nil, err
	}

	if fcf, err = pager.ApplyFilter(fcf); err != nil {
		return nil, err
	}

	ret := &FmsCloudFilePageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := fcf.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		fcf = fcf.Order(pager.Order)
	} else {
		fcf = fcf.Order(DefaultFmsCloudFileOrder)
	}

	fcf = fcf.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := fcf.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type SysUserPager struct {
	Order  sysuser.OrderOption
	Filter func(*SysUserQuery) (*SysUserQuery, error)
}

// SysUserPaginateOption enables pagination customization.
type SysUserPaginateOption func(*SysUserPager)

// DefaultSysUserOrder is the default ordering of SysUser.
var DefaultSysUserOrder = Desc(sysuser.FieldID)

func newSysUserPager(opts []SysUserPaginateOption) (*SysUserPager, error) {
	pager := &SysUserPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultSysUserOrder
	}
	return pager, nil
}

func (p *SysUserPager) ApplyFilter(query *SysUserQuery) (*SysUserQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// SysUserPageList is SysUser PageList result.
type SysUserPageList struct {
	List        []*SysUser   `json:"list"`
	PageDetails *PageDetails `json:"pageDetails"`
}

func (su *SysUserQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...SysUserPaginateOption,
) (*SysUserPageList, error) {

	pager, err := newSysUserPager(opts)
	if err != nil {
		return nil, err
	}

	if su, err = pager.ApplyFilter(su); err != nil {
		return nil, err
	}

	ret := &SysUserPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := su.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		su = su.Order(pager.Order)
	} else {
		su = su.Order(DefaultSysUserOrder)
	}

	su = su.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := su.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeApkPager struct {
	Order  upgradeapk.OrderOption
	Filter func(*UpgradeApkQuery) (*UpgradeApkQuery, error)
}

// UpgradeApkPaginateOption enables pagination customization.
type UpgradeApkPaginateOption func(*UpgradeApkPager)

// DefaultUpgradeApkOrder is the default ordering of UpgradeApk.
var DefaultUpgradeApkOrder = Desc(upgradeapk.FieldID)

func newUpgradeApkPager(opts []UpgradeApkPaginateOption) (*UpgradeApkPager, error) {
	pager := &UpgradeApkPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeApkOrder
	}
	return pager, nil
}

func (p *UpgradeApkPager) ApplyFilter(query *UpgradeApkQuery) (*UpgradeApkQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeApkPageList is UpgradeApk PageList result.
type UpgradeApkPageList struct {
	List        []*UpgradeApk `json:"list"`
	PageDetails *PageDetails  `json:"pageDetails"`
}

func (ua *UpgradeApkQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeApkPaginateOption,
) (*UpgradeApkPageList, error) {

	pager, err := newUpgradeApkPager(opts)
	if err != nil {
		return nil, err
	}

	if ua, err = pager.ApplyFilter(ua); err != nil {
		return nil, err
	}

	ret := &UpgradeApkPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ua.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ua = ua.Order(pager.Order)
	} else {
		ua = ua.Order(DefaultUpgradeApkOrder)
	}

	ua = ua.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ua.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeApkUpgradeStrategyPager struct {
	Order  upgradeapkupgradestrategy.OrderOption
	Filter func(*UpgradeApkUpgradeStrategyQuery) (*UpgradeApkUpgradeStrategyQuery, error)
}

// UpgradeApkUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeApkUpgradeStrategyPaginateOption func(*UpgradeApkUpgradeStrategyPager)

// DefaultUpgradeApkUpgradeStrategyOrder is the default ordering of UpgradeApkUpgradeStrategy.
var DefaultUpgradeApkUpgradeStrategyOrder = Desc(upgradeapkupgradestrategy.FieldID)

func newUpgradeApkUpgradeStrategyPager(opts []UpgradeApkUpgradeStrategyPaginateOption) (*UpgradeApkUpgradeStrategyPager, error) {
	pager := &UpgradeApkUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeApkUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeApkUpgradeStrategyPager) ApplyFilter(query *UpgradeApkUpgradeStrategyQuery) (*UpgradeApkUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeApkUpgradeStrategyPageList is UpgradeApkUpgradeStrategy PageList result.
type UpgradeApkUpgradeStrategyPageList struct {
	List        []*UpgradeApkUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                 `json:"pageDetails"`
}

func (uaus *UpgradeApkUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeApkUpgradeStrategyPaginateOption,
) (*UpgradeApkUpgradeStrategyPageList, error) {

	pager, err := newUpgradeApkUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uaus, err = pager.ApplyFilter(uaus); err != nil {
		return nil, err
	}

	ret := &UpgradeApkUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uaus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uaus = uaus.Order(pager.Order)
	} else {
		uaus = uaus.Order(DefaultUpgradeApkUpgradeStrategyOrder)
	}

	uaus = uaus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uaus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeApkUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradeapkupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeApkUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeApkUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeApkUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeApkUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeApkUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeApkUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeApkUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeApkUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradeapkupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeApkUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeApkUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeApkUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeApkUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeApkUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeApkUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeApkUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeApkUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeApkUpgradeStrategyFlowLimitStrategyPageList is UpgradeApkUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeApkUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeApkUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                  `json:"pageDetails"`
}

func (uausfls *UpgradeApkUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeApkUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeApkUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeApkUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uausfls, err = pager.ApplyFilter(uausfls); err != nil {
		return nil, err
	}

	ret := &UpgradeApkUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uausfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uausfls = uausfls.Order(pager.Order)
	} else {
		uausfls = uausfls.Order(DefaultUpgradeApkUpgradeStrategyFlowLimitStrategyOrder)
	}

	uausfls = uausfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uausfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeApkUpgradeStrategyGrayStrategyPager struct {
	Order  upgradeapkupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeApkUpgradeStrategyGrayStrategyQuery) (*UpgradeApkUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeApkUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeApkUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeApkUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeApkUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeApkUpgradeStrategyGrayStrategy.
var DefaultUpgradeApkUpgradeStrategyGrayStrategyOrder = Desc(upgradeapkupgradestrategygraystrategy.FieldID)

func newUpgradeApkUpgradeStrategyGrayStrategyPager(opts []UpgradeApkUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeApkUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeApkUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeApkUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeApkUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeApkUpgradeStrategyGrayStrategyQuery) (*UpgradeApkUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeApkUpgradeStrategyGrayStrategyPageList is UpgradeApkUpgradeStrategyGrayStrategy PageList result.
type UpgradeApkUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeApkUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                             `json:"pageDetails"`
}

func (uausgs *UpgradeApkUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeApkUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeApkUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeApkUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uausgs, err = pager.ApplyFilter(uausgs); err != nil {
		return nil, err
	}

	ret := &UpgradeApkUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uausgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uausgs = uausgs.Order(pager.Order)
	} else {
		uausgs = uausgs.Order(DefaultUpgradeApkUpgradeStrategyGrayStrategyOrder)
	}

	uausgs = uausgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uausgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeApkVersionPager struct {
	Order  upgradeapkversion.OrderOption
	Filter func(*UpgradeApkVersionQuery) (*UpgradeApkVersionQuery, error)
}

// UpgradeApkVersionPaginateOption enables pagination customization.
type UpgradeApkVersionPaginateOption func(*UpgradeApkVersionPager)

// DefaultUpgradeApkVersionOrder is the default ordering of UpgradeApkVersion.
var DefaultUpgradeApkVersionOrder = Desc(upgradeapkversion.FieldID)

func newUpgradeApkVersionPager(opts []UpgradeApkVersionPaginateOption) (*UpgradeApkVersionPager, error) {
	pager := &UpgradeApkVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeApkVersionOrder
	}
	return pager, nil
}

func (p *UpgradeApkVersionPager) ApplyFilter(query *UpgradeApkVersionQuery) (*UpgradeApkVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeApkVersionPageList is UpgradeApkVersion PageList result.
type UpgradeApkVersionPageList struct {
	List        []*UpgradeApkVersion `json:"list"`
	PageDetails *PageDetails         `json:"pageDetails"`
}

func (uav *UpgradeApkVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeApkVersionPaginateOption,
) (*UpgradeApkVersionPageList, error) {

	pager, err := newUpgradeApkVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if uav, err = pager.ApplyFilter(uav); err != nil {
		return nil, err
	}

	ret := &UpgradeApkVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uav.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uav = uav.Order(pager.Order)
	} else {
		uav = uav.Order(DefaultUpgradeApkVersionOrder)
	}

	uav = uav.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uav.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeAppDownloadReportLogPager struct {
	Order  upgradeappdownloadreportlog.OrderOption
	Filter func(*UpgradeAppDownloadReportLogQuery) (*UpgradeAppDownloadReportLogQuery, error)
}

// UpgradeAppDownloadReportLogPaginateOption enables pagination customization.
type UpgradeAppDownloadReportLogPaginateOption func(*UpgradeAppDownloadReportLogPager)

// DefaultUpgradeAppDownloadReportLogOrder is the default ordering of UpgradeAppDownloadReportLog.
var DefaultUpgradeAppDownloadReportLogOrder = Desc(upgradeappdownloadreportlog.FieldID)

func newUpgradeAppDownloadReportLogPager(opts []UpgradeAppDownloadReportLogPaginateOption) (*UpgradeAppDownloadReportLogPager, error) {
	pager := &UpgradeAppDownloadReportLogPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeAppDownloadReportLogOrder
	}
	return pager, nil
}

func (p *UpgradeAppDownloadReportLogPager) ApplyFilter(query *UpgradeAppDownloadReportLogQuery) (*UpgradeAppDownloadReportLogQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeAppDownloadReportLogPageList is UpgradeAppDownloadReportLog PageList result.
type UpgradeAppDownloadReportLogPageList struct {
	List        []*UpgradeAppDownloadReportLog `json:"list"`
	PageDetails *PageDetails                   `json:"pageDetails"`
}

func (uadrl *UpgradeAppDownloadReportLogQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeAppDownloadReportLogPaginateOption,
) (*UpgradeAppDownloadReportLogPageList, error) {

	pager, err := newUpgradeAppDownloadReportLogPager(opts)
	if err != nil {
		return nil, err
	}

	if uadrl, err = pager.ApplyFilter(uadrl); err != nil {
		return nil, err
	}

	ret := &UpgradeAppDownloadReportLogPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uadrl.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uadrl = uadrl.Order(pager.Order)
	} else {
		uadrl = uadrl.Order(DefaultUpgradeAppDownloadReportLogOrder)
	}

	uadrl = uadrl.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uadrl.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeCompanyIncomePager struct {
	Order  upgradecompanyincome.OrderOption
	Filter func(*UpgradeCompanyIncomeQuery) (*UpgradeCompanyIncomeQuery, error)
}

// UpgradeCompanyIncomePaginateOption enables pagination customization.
type UpgradeCompanyIncomePaginateOption func(*UpgradeCompanyIncomePager)

// DefaultUpgradeCompanyIncomeOrder is the default ordering of UpgradeCompanyIncome.
var DefaultUpgradeCompanyIncomeOrder = Desc(upgradecompanyincome.FieldID)

func newUpgradeCompanyIncomePager(opts []UpgradeCompanyIncomePaginateOption) (*UpgradeCompanyIncomePager, error) {
	pager := &UpgradeCompanyIncomePager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeCompanyIncomeOrder
	}
	return pager, nil
}

func (p *UpgradeCompanyIncomePager) ApplyFilter(query *UpgradeCompanyIncomeQuery) (*UpgradeCompanyIncomeQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeCompanyIncomePageList is UpgradeCompanyIncome PageList result.
type UpgradeCompanyIncomePageList struct {
	List        []*UpgradeCompanyIncome `json:"list"`
	PageDetails *PageDetails            `json:"pageDetails"`
}

func (uci *UpgradeCompanyIncomeQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeCompanyIncomePaginateOption,
) (*UpgradeCompanyIncomePageList, error) {

	pager, err := newUpgradeCompanyIncomePager(opts)
	if err != nil {
		return nil, err
	}

	if uci, err = pager.ApplyFilter(uci); err != nil {
		return nil, err
	}

	ret := &UpgradeCompanyIncomePageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uci.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uci = uci.Order(pager.Order)
	} else {
		uci = uci.Order(DefaultUpgradeCompanyIncomeOrder)
	}

	uci = uci.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uci.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeCompanyTrafficPacketPager struct {
	Order  upgradecompanytrafficpacket.OrderOption
	Filter func(*UpgradeCompanyTrafficPacketQuery) (*UpgradeCompanyTrafficPacketQuery, error)
}

// UpgradeCompanyTrafficPacketPaginateOption enables pagination customization.
type UpgradeCompanyTrafficPacketPaginateOption func(*UpgradeCompanyTrafficPacketPager)

// DefaultUpgradeCompanyTrafficPacketOrder is the default ordering of UpgradeCompanyTrafficPacket.
var DefaultUpgradeCompanyTrafficPacketOrder = Desc(upgradecompanytrafficpacket.FieldID)

func newUpgradeCompanyTrafficPacketPager(opts []UpgradeCompanyTrafficPacketPaginateOption) (*UpgradeCompanyTrafficPacketPager, error) {
	pager := &UpgradeCompanyTrafficPacketPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeCompanyTrafficPacketOrder
	}
	return pager, nil
}

func (p *UpgradeCompanyTrafficPacketPager) ApplyFilter(query *UpgradeCompanyTrafficPacketQuery) (*UpgradeCompanyTrafficPacketQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeCompanyTrafficPacketPageList is UpgradeCompanyTrafficPacket PageList result.
type UpgradeCompanyTrafficPacketPageList struct {
	List        []*UpgradeCompanyTrafficPacket `json:"list"`
	PageDetails *PageDetails                   `json:"pageDetails"`
}

func (uctp *UpgradeCompanyTrafficPacketQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeCompanyTrafficPacketPaginateOption,
) (*UpgradeCompanyTrafficPacketPageList, error) {

	pager, err := newUpgradeCompanyTrafficPacketPager(opts)
	if err != nil {
		return nil, err
	}

	if uctp, err = pager.ApplyFilter(uctp); err != nil {
		return nil, err
	}

	ret := &UpgradeCompanyTrafficPacketPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uctp.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uctp = uctp.Order(pager.Order)
	} else {
		uctp = uctp.Order(DefaultUpgradeCompanyTrafficPacketOrder)
	}

	uctp = uctp.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uctp.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeConfigurationPager struct {
	Order  upgradeconfiguration.OrderOption
	Filter func(*UpgradeConfigurationQuery) (*UpgradeConfigurationQuery, error)
}

// UpgradeConfigurationPaginateOption enables pagination customization.
type UpgradeConfigurationPaginateOption func(*UpgradeConfigurationPager)

// DefaultUpgradeConfigurationOrder is the default ordering of UpgradeConfiguration.
var DefaultUpgradeConfigurationOrder = Desc(upgradeconfiguration.FieldID)

func newUpgradeConfigurationPager(opts []UpgradeConfigurationPaginateOption) (*UpgradeConfigurationPager, error) {
	pager := &UpgradeConfigurationPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeConfigurationOrder
	}
	return pager, nil
}

func (p *UpgradeConfigurationPager) ApplyFilter(query *UpgradeConfigurationQuery) (*UpgradeConfigurationQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeConfigurationPageList is UpgradeConfiguration PageList result.
type UpgradeConfigurationPageList struct {
	List        []*UpgradeConfiguration `json:"list"`
	PageDetails *PageDetails            `json:"pageDetails"`
}

func (uc *UpgradeConfigurationQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeConfigurationPaginateOption,
) (*UpgradeConfigurationPageList, error) {

	pager, err := newUpgradeConfigurationPager(opts)
	if err != nil {
		return nil, err
	}

	if uc, err = pager.ApplyFilter(uc); err != nil {
		return nil, err
	}

	ret := &UpgradeConfigurationPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uc.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uc = uc.Order(pager.Order)
	} else {
		uc = uc.Order(DefaultUpgradeConfigurationOrder)
	}

	uc = uc.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uc.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeConfigurationUpgradeStrategyPager struct {
	Order  upgradeconfigurationupgradestrategy.OrderOption
	Filter func(*UpgradeConfigurationUpgradeStrategyQuery) (*UpgradeConfigurationUpgradeStrategyQuery, error)
}

// UpgradeConfigurationUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeConfigurationUpgradeStrategyPaginateOption func(*UpgradeConfigurationUpgradeStrategyPager)

// DefaultUpgradeConfigurationUpgradeStrategyOrder is the default ordering of UpgradeConfigurationUpgradeStrategy.
var DefaultUpgradeConfigurationUpgradeStrategyOrder = Desc(upgradeconfigurationupgradestrategy.FieldID)

func newUpgradeConfigurationUpgradeStrategyPager(opts []UpgradeConfigurationUpgradeStrategyPaginateOption) (*UpgradeConfigurationUpgradeStrategyPager, error) {
	pager := &UpgradeConfigurationUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeConfigurationUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeConfigurationUpgradeStrategyPager) ApplyFilter(query *UpgradeConfigurationUpgradeStrategyQuery) (*UpgradeConfigurationUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeConfigurationUpgradeStrategyPageList is UpgradeConfigurationUpgradeStrategy PageList result.
type UpgradeConfigurationUpgradeStrategyPageList struct {
	List        []*UpgradeConfigurationUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                           `json:"pageDetails"`
}

func (ucus *UpgradeConfigurationUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeConfigurationUpgradeStrategyPaginateOption,
) (*UpgradeConfigurationUpgradeStrategyPageList, error) {

	pager, err := newUpgradeConfigurationUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ucus, err = pager.ApplyFilter(ucus); err != nil {
		return nil, err
	}

	ret := &UpgradeConfigurationUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ucus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ucus = ucus.Order(pager.Order)
	} else {
		ucus = ucus.Order(DefaultUpgradeConfigurationUpgradeStrategyOrder)
	}

	ucus = ucus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ucus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradeconfigurationupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeConfigurationUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeConfigurationUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeConfigurationUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPageList is UpgradeConfigurationUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeConfigurationUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                            `json:"pageDetails"`
}

func (ucusfls *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeConfigurationUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ucusfls, err = pager.ApplyFilter(ucusfls); err != nil {
		return nil, err
	}

	ret := &UpgradeConfigurationUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ucusfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ucusfls = ucusfls.Order(pager.Order)
	} else {
		ucusfls = ucusfls.Order(DefaultUpgradeConfigurationUpgradeStrategyFlowLimitStrategyOrder)
	}

	ucusfls = ucusfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ucusfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeConfigurationUpgradeStrategyGrayStrategyPager struct {
	Order  upgradeconfigurationupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeConfigurationUpgradeStrategyGrayStrategyQuery) (*UpgradeConfigurationUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeConfigurationUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeConfigurationUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeConfigurationUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeConfigurationUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeConfigurationUpgradeStrategyGrayStrategy.
var DefaultUpgradeConfigurationUpgradeStrategyGrayStrategyOrder = Desc(upgradeconfigurationupgradestrategygraystrategy.FieldID)

func newUpgradeConfigurationUpgradeStrategyGrayStrategyPager(opts []UpgradeConfigurationUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeConfigurationUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeConfigurationUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeConfigurationUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeConfigurationUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeConfigurationUpgradeStrategyGrayStrategyQuery) (*UpgradeConfigurationUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeConfigurationUpgradeStrategyGrayStrategyPageList is UpgradeConfigurationUpgradeStrategyGrayStrategy PageList result.
type UpgradeConfigurationUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeConfigurationUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                                       `json:"pageDetails"`
}

func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeConfigurationUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeConfigurationUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeConfigurationUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ucusgs, err = pager.ApplyFilter(ucusgs); err != nil {
		return nil, err
	}

	ret := &UpgradeConfigurationUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ucusgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ucusgs = ucusgs.Order(pager.Order)
	} else {
		ucusgs = ucusgs.Order(DefaultUpgradeConfigurationUpgradeStrategyGrayStrategyOrder)
	}

	ucusgs = ucusgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ucusgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeConfigurationVersionPager struct {
	Order  upgradeconfigurationversion.OrderOption
	Filter func(*UpgradeConfigurationVersionQuery) (*UpgradeConfigurationVersionQuery, error)
}

// UpgradeConfigurationVersionPaginateOption enables pagination customization.
type UpgradeConfigurationVersionPaginateOption func(*UpgradeConfigurationVersionPager)

// DefaultUpgradeConfigurationVersionOrder is the default ordering of UpgradeConfigurationVersion.
var DefaultUpgradeConfigurationVersionOrder = Desc(upgradeconfigurationversion.FieldID)

func newUpgradeConfigurationVersionPager(opts []UpgradeConfigurationVersionPaginateOption) (*UpgradeConfigurationVersionPager, error) {
	pager := &UpgradeConfigurationVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeConfigurationVersionOrder
	}
	return pager, nil
}

func (p *UpgradeConfigurationVersionPager) ApplyFilter(query *UpgradeConfigurationVersionQuery) (*UpgradeConfigurationVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeConfigurationVersionPageList is UpgradeConfigurationVersion PageList result.
type UpgradeConfigurationVersionPageList struct {
	List        []*UpgradeConfigurationVersion `json:"list"`
	PageDetails *PageDetails                   `json:"pageDetails"`
}

func (ucv *UpgradeConfigurationVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeConfigurationVersionPaginateOption,
) (*UpgradeConfigurationVersionPageList, error) {

	pager, err := newUpgradeConfigurationVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if ucv, err = pager.ApplyFilter(ucv); err != nil {
		return nil, err
	}

	ret := &UpgradeConfigurationVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ucv.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ucv = ucv.Order(pager.Order)
	} else {
		ucv = ucv.Order(DefaultUpgradeConfigurationVersionOrder)
	}

	ucv = ucv.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ucv.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeDevPager struct {
	Order  upgradedev.OrderOption
	Filter func(*UpgradeDevQuery) (*UpgradeDevQuery, error)
}

// UpgradeDevPaginateOption enables pagination customization.
type UpgradeDevPaginateOption func(*UpgradeDevPager)

// DefaultUpgradeDevOrder is the default ordering of UpgradeDev.
var DefaultUpgradeDevOrder = Desc(upgradedev.FieldID)

func newUpgradeDevPager(opts []UpgradeDevPaginateOption) (*UpgradeDevPager, error) {
	pager := &UpgradeDevPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeDevOrder
	}
	return pager, nil
}

func (p *UpgradeDevPager) ApplyFilter(query *UpgradeDevQuery) (*UpgradeDevQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeDevPageList is UpgradeDev PageList result.
type UpgradeDevPageList struct {
	List        []*UpgradeDev `json:"list"`
	PageDetails *PageDetails  `json:"pageDetails"`
}

func (ud *UpgradeDevQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeDevPaginateOption,
) (*UpgradeDevPageList, error) {

	pager, err := newUpgradeDevPager(opts)
	if err != nil {
		return nil, err
	}

	if ud, err = pager.ApplyFilter(ud); err != nil {
		return nil, err
	}

	ret := &UpgradeDevPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ud.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ud = ud.Order(pager.Order)
	} else {
		ud = ud.Order(DefaultUpgradeDevOrder)
	}

	ud = ud.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ud.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeDevGroupPager struct {
	Order  upgradedevgroup.OrderOption
	Filter func(*UpgradeDevGroupQuery) (*UpgradeDevGroupQuery, error)
}

// UpgradeDevGroupPaginateOption enables pagination customization.
type UpgradeDevGroupPaginateOption func(*UpgradeDevGroupPager)

// DefaultUpgradeDevGroupOrder is the default ordering of UpgradeDevGroup.
var DefaultUpgradeDevGroupOrder = Desc(upgradedevgroup.FieldID)

func newUpgradeDevGroupPager(opts []UpgradeDevGroupPaginateOption) (*UpgradeDevGroupPager, error) {
	pager := &UpgradeDevGroupPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeDevGroupOrder
	}
	return pager, nil
}

func (p *UpgradeDevGroupPager) ApplyFilter(query *UpgradeDevGroupQuery) (*UpgradeDevGroupQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeDevGroupPageList is UpgradeDevGroup PageList result.
type UpgradeDevGroupPageList struct {
	List        []*UpgradeDevGroup `json:"list"`
	PageDetails *PageDetails       `json:"pageDetails"`
}

func (udg *UpgradeDevGroupQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeDevGroupPaginateOption,
) (*UpgradeDevGroupPageList, error) {

	pager, err := newUpgradeDevGroupPager(opts)
	if err != nil {
		return nil, err
	}

	if udg, err = pager.ApplyFilter(udg); err != nil {
		return nil, err
	}

	ret := &UpgradeDevGroupPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := udg.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		udg = udg.Order(pager.Order)
	} else {
		udg = udg.Order(DefaultUpgradeDevGroupOrder)
	}

	udg = udg.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := udg.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeDevGroupRelationPager struct {
	Order  upgradedevgrouprelation.OrderOption
	Filter func(*UpgradeDevGroupRelationQuery) (*UpgradeDevGroupRelationQuery, error)
}

// UpgradeDevGroupRelationPaginateOption enables pagination customization.
type UpgradeDevGroupRelationPaginateOption func(*UpgradeDevGroupRelationPager)

// DefaultUpgradeDevGroupRelationOrder is the default ordering of UpgradeDevGroupRelation.
var DefaultUpgradeDevGroupRelationOrder = Desc(upgradedevgrouprelation.FieldID)

func newUpgradeDevGroupRelationPager(opts []UpgradeDevGroupRelationPaginateOption) (*UpgradeDevGroupRelationPager, error) {
	pager := &UpgradeDevGroupRelationPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeDevGroupRelationOrder
	}
	return pager, nil
}

func (p *UpgradeDevGroupRelationPager) ApplyFilter(query *UpgradeDevGroupRelationQuery) (*UpgradeDevGroupRelationQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeDevGroupRelationPageList is UpgradeDevGroupRelation PageList result.
type UpgradeDevGroupRelationPageList struct {
	List        []*UpgradeDevGroupRelation `json:"list"`
	PageDetails *PageDetails               `json:"pageDetails"`
}

func (udgr *UpgradeDevGroupRelationQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeDevGroupRelationPaginateOption,
) (*UpgradeDevGroupRelationPageList, error) {

	pager, err := newUpgradeDevGroupRelationPager(opts)
	if err != nil {
		return nil, err
	}

	if udgr, err = pager.ApplyFilter(udgr); err != nil {
		return nil, err
	}

	ret := &UpgradeDevGroupRelationPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := udgr.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		udgr = udgr.Order(pager.Order)
	} else {
		udgr = udgr.Order(DefaultUpgradeDevGroupRelationOrder)
	}

	udgr = udgr.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := udgr.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeDevModelPager struct {
	Order  upgradedevmodel.OrderOption
	Filter func(*UpgradeDevModelQuery) (*UpgradeDevModelQuery, error)
}

// UpgradeDevModelPaginateOption enables pagination customization.
type UpgradeDevModelPaginateOption func(*UpgradeDevModelPager)

// DefaultUpgradeDevModelOrder is the default ordering of UpgradeDevModel.
var DefaultUpgradeDevModelOrder = Desc(upgradedevmodel.FieldID)

func newUpgradeDevModelPager(opts []UpgradeDevModelPaginateOption) (*UpgradeDevModelPager, error) {
	pager := &UpgradeDevModelPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeDevModelOrder
	}
	return pager, nil
}

func (p *UpgradeDevModelPager) ApplyFilter(query *UpgradeDevModelQuery) (*UpgradeDevModelQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeDevModelPageList is UpgradeDevModel PageList result.
type UpgradeDevModelPageList struct {
	List        []*UpgradeDevModel `json:"list"`
	PageDetails *PageDetails       `json:"pageDetails"`
}

func (udm *UpgradeDevModelQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeDevModelPaginateOption,
) (*UpgradeDevModelPageList, error) {

	pager, err := newUpgradeDevModelPager(opts)
	if err != nil {
		return nil, err
	}

	if udm, err = pager.ApplyFilter(udm); err != nil {
		return nil, err
	}

	ret := &UpgradeDevModelPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := udm.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		udm = udm.Order(pager.Order)
	} else {
		udm = udm.Order(DefaultUpgradeDevModelOrder)
	}

	udm = udm.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := udm.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeElectronPager struct {
	Order  upgradeelectron.OrderOption
	Filter func(*UpgradeElectronQuery) (*UpgradeElectronQuery, error)
}

// UpgradeElectronPaginateOption enables pagination customization.
type UpgradeElectronPaginateOption func(*UpgradeElectronPager)

// DefaultUpgradeElectronOrder is the default ordering of UpgradeElectron.
var DefaultUpgradeElectronOrder = Desc(upgradeelectron.FieldID)

func newUpgradeElectronPager(opts []UpgradeElectronPaginateOption) (*UpgradeElectronPager, error) {
	pager := &UpgradeElectronPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeElectronOrder
	}
	return pager, nil
}

func (p *UpgradeElectronPager) ApplyFilter(query *UpgradeElectronQuery) (*UpgradeElectronQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeElectronPageList is UpgradeElectron PageList result.
type UpgradeElectronPageList struct {
	List        []*UpgradeElectron `json:"list"`
	PageDetails *PageDetails       `json:"pageDetails"`
}

func (ue *UpgradeElectronQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeElectronPaginateOption,
) (*UpgradeElectronPageList, error) {

	pager, err := newUpgradeElectronPager(opts)
	if err != nil {
		return nil, err
	}

	if ue, err = pager.ApplyFilter(ue); err != nil {
		return nil, err
	}

	ret := &UpgradeElectronPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ue.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ue = ue.Order(pager.Order)
	} else {
		ue = ue.Order(DefaultUpgradeElectronOrder)
	}

	ue = ue.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ue.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeElectronUpgradeStrategyPager struct {
	Order  upgradeelectronupgradestrategy.OrderOption
	Filter func(*UpgradeElectronUpgradeStrategyQuery) (*UpgradeElectronUpgradeStrategyQuery, error)
}

// UpgradeElectronUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeElectronUpgradeStrategyPaginateOption func(*UpgradeElectronUpgradeStrategyPager)

// DefaultUpgradeElectronUpgradeStrategyOrder is the default ordering of UpgradeElectronUpgradeStrategy.
var DefaultUpgradeElectronUpgradeStrategyOrder = Desc(upgradeelectronupgradestrategy.FieldID)

func newUpgradeElectronUpgradeStrategyPager(opts []UpgradeElectronUpgradeStrategyPaginateOption) (*UpgradeElectronUpgradeStrategyPager, error) {
	pager := &UpgradeElectronUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeElectronUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeElectronUpgradeStrategyPager) ApplyFilter(query *UpgradeElectronUpgradeStrategyQuery) (*UpgradeElectronUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeElectronUpgradeStrategyPageList is UpgradeElectronUpgradeStrategy PageList result.
type UpgradeElectronUpgradeStrategyPageList struct {
	List        []*UpgradeElectronUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                      `json:"pageDetails"`
}

func (ueus *UpgradeElectronUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeElectronUpgradeStrategyPaginateOption,
) (*UpgradeElectronUpgradeStrategyPageList, error) {

	pager, err := newUpgradeElectronUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ueus, err = pager.ApplyFilter(ueus); err != nil {
		return nil, err
	}

	ret := &UpgradeElectronUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ueus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ueus = ueus.Order(pager.Order)
	} else {
		ueus = ueus.Order(DefaultUpgradeElectronUpgradeStrategyOrder)
	}

	ueus = ueus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ueus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeElectronUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradeelectronupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeElectronUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeElectronUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeElectronUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeElectronUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradeelectronupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeElectronUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeElectronUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeElectronUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeElectronUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeElectronUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeElectronUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeElectronUpgradeStrategyFlowLimitStrategyPageList is UpgradeElectronUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeElectronUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                       `json:"pageDetails"`
}

func (ueusfls *UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeElectronUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeElectronUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeElectronUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ueusfls, err = pager.ApplyFilter(ueusfls); err != nil {
		return nil, err
	}

	ret := &UpgradeElectronUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ueusfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ueusfls = ueusfls.Order(pager.Order)
	} else {
		ueusfls = ueusfls.Order(DefaultUpgradeElectronUpgradeStrategyFlowLimitStrategyOrder)
	}

	ueusfls = ueusfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ueusfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeElectronUpgradeStrategyGrayStrategyPager struct {
	Order  upgradeelectronupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeElectronUpgradeStrategyGrayStrategyQuery) (*UpgradeElectronUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeElectronUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeElectronUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeElectronUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeElectronUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeElectronUpgradeStrategyGrayStrategy.
var DefaultUpgradeElectronUpgradeStrategyGrayStrategyOrder = Desc(upgradeelectronupgradestrategygraystrategy.FieldID)

func newUpgradeElectronUpgradeStrategyGrayStrategyPager(opts []UpgradeElectronUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeElectronUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeElectronUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeElectronUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeElectronUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeElectronUpgradeStrategyGrayStrategyQuery) (*UpgradeElectronUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeElectronUpgradeStrategyGrayStrategyPageList is UpgradeElectronUpgradeStrategyGrayStrategy PageList result.
type UpgradeElectronUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeElectronUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                                  `json:"pageDetails"`
}

func (ueusgs *UpgradeElectronUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeElectronUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeElectronUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeElectronUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ueusgs, err = pager.ApplyFilter(ueusgs); err != nil {
		return nil, err
	}

	ret := &UpgradeElectronUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ueusgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ueusgs = ueusgs.Order(pager.Order)
	} else {
		ueusgs = ueusgs.Order(DefaultUpgradeElectronUpgradeStrategyGrayStrategyOrder)
	}

	ueusgs = ueusgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ueusgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeElectronVersionPager struct {
	Order  upgradeelectronversion.OrderOption
	Filter func(*UpgradeElectronVersionQuery) (*UpgradeElectronVersionQuery, error)
}

// UpgradeElectronVersionPaginateOption enables pagination customization.
type UpgradeElectronVersionPaginateOption func(*UpgradeElectronVersionPager)

// DefaultUpgradeElectronVersionOrder is the default ordering of UpgradeElectronVersion.
var DefaultUpgradeElectronVersionOrder = Desc(upgradeelectronversion.FieldID)

func newUpgradeElectronVersionPager(opts []UpgradeElectronVersionPaginateOption) (*UpgradeElectronVersionPager, error) {
	pager := &UpgradeElectronVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeElectronVersionOrder
	}
	return pager, nil
}

func (p *UpgradeElectronVersionPager) ApplyFilter(query *UpgradeElectronVersionQuery) (*UpgradeElectronVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeElectronVersionPageList is UpgradeElectronVersion PageList result.
type UpgradeElectronVersionPageList struct {
	List        []*UpgradeElectronVersion `json:"list"`
	PageDetails *PageDetails              `json:"pageDetails"`
}

func (uev *UpgradeElectronVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeElectronVersionPaginateOption,
) (*UpgradeElectronVersionPageList, error) {

	pager, err := newUpgradeElectronVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if uev, err = pager.ApplyFilter(uev); err != nil {
		return nil, err
	}

	ret := &UpgradeElectronVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uev.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uev = uev.Order(pager.Order)
	} else {
		uev = uev.Order(DefaultUpgradeElectronVersionOrder)
	}

	uev = uev.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uev.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeFilePager struct {
	Order  upgradefile.OrderOption
	Filter func(*UpgradeFileQuery) (*UpgradeFileQuery, error)
}

// UpgradeFilePaginateOption enables pagination customization.
type UpgradeFilePaginateOption func(*UpgradeFilePager)

// DefaultUpgradeFileOrder is the default ordering of UpgradeFile.
var DefaultUpgradeFileOrder = Desc(upgradefile.FieldID)

func newUpgradeFilePager(opts []UpgradeFilePaginateOption) (*UpgradeFilePager, error) {
	pager := &UpgradeFilePager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeFileOrder
	}
	return pager, nil
}

func (p *UpgradeFilePager) ApplyFilter(query *UpgradeFileQuery) (*UpgradeFileQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeFilePageList is UpgradeFile PageList result.
type UpgradeFilePageList struct {
	List        []*UpgradeFile `json:"list"`
	PageDetails *PageDetails   `json:"pageDetails"`
}

func (uf *UpgradeFileQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeFilePaginateOption,
) (*UpgradeFilePageList, error) {

	pager, err := newUpgradeFilePager(opts)
	if err != nil {
		return nil, err
	}

	if uf, err = pager.ApplyFilter(uf); err != nil {
		return nil, err
	}

	ret := &UpgradeFilePageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uf.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uf = uf.Order(pager.Order)
	} else {
		uf = uf.Order(DefaultUpgradeFileOrder)
	}

	uf = uf.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uf.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeFileUpgradeStrategyPager struct {
	Order  upgradefileupgradestrategy.OrderOption
	Filter func(*UpgradeFileUpgradeStrategyQuery) (*UpgradeFileUpgradeStrategyQuery, error)
}

// UpgradeFileUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeFileUpgradeStrategyPaginateOption func(*UpgradeFileUpgradeStrategyPager)

// DefaultUpgradeFileUpgradeStrategyOrder is the default ordering of UpgradeFileUpgradeStrategy.
var DefaultUpgradeFileUpgradeStrategyOrder = Desc(upgradefileupgradestrategy.FieldID)

func newUpgradeFileUpgradeStrategyPager(opts []UpgradeFileUpgradeStrategyPaginateOption) (*UpgradeFileUpgradeStrategyPager, error) {
	pager := &UpgradeFileUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeFileUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeFileUpgradeStrategyPager) ApplyFilter(query *UpgradeFileUpgradeStrategyQuery) (*UpgradeFileUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeFileUpgradeStrategyPageList is UpgradeFileUpgradeStrategy PageList result.
type UpgradeFileUpgradeStrategyPageList struct {
	List        []*UpgradeFileUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                  `json:"pageDetails"`
}

func (ufus *UpgradeFileUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeFileUpgradeStrategyPaginateOption,
) (*UpgradeFileUpgradeStrategyPageList, error) {

	pager, err := newUpgradeFileUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ufus, err = pager.ApplyFilter(ufus); err != nil {
		return nil, err
	}

	ret := &UpgradeFileUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ufus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ufus = ufus.Order(pager.Order)
	} else {
		ufus = ufus.Order(DefaultUpgradeFileUpgradeStrategyOrder)
	}

	ufus = ufus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ufus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeFileUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradefileupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeFileUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeFileUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeFileUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeFileUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeFileUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeFileUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeFileUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeFileUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradefileupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeFileUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeFileUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeFileUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeFileUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeFileUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeFileUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeFileUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeFileUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeFileUpgradeStrategyFlowLimitStrategyPageList is UpgradeFileUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeFileUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeFileUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                   `json:"pageDetails"`
}

func (ufusfls *UpgradeFileUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeFileUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeFileUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeFileUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ufusfls, err = pager.ApplyFilter(ufusfls); err != nil {
		return nil, err
	}

	ret := &UpgradeFileUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ufusfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ufusfls = ufusfls.Order(pager.Order)
	} else {
		ufusfls = ufusfls.Order(DefaultUpgradeFileUpgradeStrategyFlowLimitStrategyOrder)
	}

	ufusfls = ufusfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ufusfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeFileUpgradeStrategyGrayStrategyPager struct {
	Order  upgradefileupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeFileUpgradeStrategyGrayStrategyQuery) (*UpgradeFileUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeFileUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeFileUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeFileUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeFileUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeFileUpgradeStrategyGrayStrategy.
var DefaultUpgradeFileUpgradeStrategyGrayStrategyOrder = Desc(upgradefileupgradestrategygraystrategy.FieldID)

func newUpgradeFileUpgradeStrategyGrayStrategyPager(opts []UpgradeFileUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeFileUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeFileUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeFileUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeFileUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeFileUpgradeStrategyGrayStrategyQuery) (*UpgradeFileUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeFileUpgradeStrategyGrayStrategyPageList is UpgradeFileUpgradeStrategyGrayStrategy PageList result.
type UpgradeFileUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeFileUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                              `json:"pageDetails"`
}

func (ufusgs *UpgradeFileUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeFileUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeFileUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeFileUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if ufusgs, err = pager.ApplyFilter(ufusgs); err != nil {
		return nil, err
	}

	ret := &UpgradeFileUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ufusgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ufusgs = ufusgs.Order(pager.Order)
	} else {
		ufusgs = ufusgs.Order(DefaultUpgradeFileUpgradeStrategyGrayStrategyOrder)
	}

	ufusgs = ufusgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ufusgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeFileVersionPager struct {
	Order  upgradefileversion.OrderOption
	Filter func(*UpgradeFileVersionQuery) (*UpgradeFileVersionQuery, error)
}

// UpgradeFileVersionPaginateOption enables pagination customization.
type UpgradeFileVersionPaginateOption func(*UpgradeFileVersionPager)

// DefaultUpgradeFileVersionOrder is the default ordering of UpgradeFileVersion.
var DefaultUpgradeFileVersionOrder = Desc(upgradefileversion.FieldID)

func newUpgradeFileVersionPager(opts []UpgradeFileVersionPaginateOption) (*UpgradeFileVersionPager, error) {
	pager := &UpgradeFileVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeFileVersionOrder
	}
	return pager, nil
}

func (p *UpgradeFileVersionPager) ApplyFilter(query *UpgradeFileVersionQuery) (*UpgradeFileVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeFileVersionPageList is UpgradeFileVersion PageList result.
type UpgradeFileVersionPageList struct {
	List        []*UpgradeFileVersion `json:"list"`
	PageDetails *PageDetails          `json:"pageDetails"`
}

func (ufv *UpgradeFileVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeFileVersionPaginateOption,
) (*UpgradeFileVersionPageList, error) {

	pager, err := newUpgradeFileVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if ufv, err = pager.ApplyFilter(ufv); err != nil {
		return nil, err
	}

	ret := &UpgradeFileVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ufv.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ufv = ufv.Order(pager.Order)
	} else {
		ufv = ufv.Order(DefaultUpgradeFileVersionOrder)
	}

	ufv = ufv.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ufv.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTauriPager struct {
	Order  upgradetauri.OrderOption
	Filter func(*UpgradeTauriQuery) (*UpgradeTauriQuery, error)
}

// UpgradeTauriPaginateOption enables pagination customization.
type UpgradeTauriPaginateOption func(*UpgradeTauriPager)

// DefaultUpgradeTauriOrder is the default ordering of UpgradeTauri.
var DefaultUpgradeTauriOrder = Desc(upgradetauri.FieldID)

func newUpgradeTauriPager(opts []UpgradeTauriPaginateOption) (*UpgradeTauriPager, error) {
	pager := &UpgradeTauriPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTauriOrder
	}
	return pager, nil
}

func (p *UpgradeTauriPager) ApplyFilter(query *UpgradeTauriQuery) (*UpgradeTauriQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTauriPageList is UpgradeTauri PageList result.
type UpgradeTauriPageList struct {
	List        []*UpgradeTauri `json:"list"`
	PageDetails *PageDetails    `json:"pageDetails"`
}

func (ut *UpgradeTauriQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTauriPaginateOption,
) (*UpgradeTauriPageList, error) {

	pager, err := newUpgradeTauriPager(opts)
	if err != nil {
		return nil, err
	}

	if ut, err = pager.ApplyFilter(ut); err != nil {
		return nil, err
	}

	ret := &UpgradeTauriPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := ut.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		ut = ut.Order(pager.Order)
	} else {
		ut = ut.Order(DefaultUpgradeTauriOrder)
	}

	ut = ut.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := ut.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTauriUpgradeStrategyPager struct {
	Order  upgradetauriupgradestrategy.OrderOption
	Filter func(*UpgradeTauriUpgradeStrategyQuery) (*UpgradeTauriUpgradeStrategyQuery, error)
}

// UpgradeTauriUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeTauriUpgradeStrategyPaginateOption func(*UpgradeTauriUpgradeStrategyPager)

// DefaultUpgradeTauriUpgradeStrategyOrder is the default ordering of UpgradeTauriUpgradeStrategy.
var DefaultUpgradeTauriUpgradeStrategyOrder = Desc(upgradetauriupgradestrategy.FieldID)

func newUpgradeTauriUpgradeStrategyPager(opts []UpgradeTauriUpgradeStrategyPaginateOption) (*UpgradeTauriUpgradeStrategyPager, error) {
	pager := &UpgradeTauriUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTauriUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeTauriUpgradeStrategyPager) ApplyFilter(query *UpgradeTauriUpgradeStrategyQuery) (*UpgradeTauriUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTauriUpgradeStrategyPageList is UpgradeTauriUpgradeStrategy PageList result.
type UpgradeTauriUpgradeStrategyPageList struct {
	List        []*UpgradeTauriUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                   `json:"pageDetails"`
}

func (utus *UpgradeTauriUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTauriUpgradeStrategyPaginateOption,
) (*UpgradeTauriUpgradeStrategyPageList, error) {

	pager, err := newUpgradeTauriUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if utus, err = pager.ApplyFilter(utus); err != nil {
		return nil, err
	}

	ret := &UpgradeTauriUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := utus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		utus = utus.Order(pager.Order)
	} else {
		utus = utus.Order(DefaultUpgradeTauriUpgradeStrategyOrder)
	}

	utus = utus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := utus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTauriUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradetauriupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeTauriUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeTauriUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeTauriUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeTauriUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeTauriUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradetauriupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeTauriUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeTauriUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeTauriUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeTauriUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTauriUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeTauriUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTauriUpgradeStrategyFlowLimitStrategyPageList is UpgradeTauriUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeTauriUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                    `json:"pageDetails"`
}

func (utusfls *UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTauriUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeTauriUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeTauriUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if utusfls, err = pager.ApplyFilter(utusfls); err != nil {
		return nil, err
	}

	ret := &UpgradeTauriUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := utusfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		utusfls = utusfls.Order(pager.Order)
	} else {
		utusfls = utusfls.Order(DefaultUpgradeTauriUpgradeStrategyFlowLimitStrategyOrder)
	}

	utusfls = utusfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := utusfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTauriUpgradeStrategyGrayStrategyPager struct {
	Order  upgradetauriupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeTauriUpgradeStrategyGrayStrategyQuery) (*UpgradeTauriUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeTauriUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeTauriUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeTauriUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeTauriUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeTauriUpgradeStrategyGrayStrategy.
var DefaultUpgradeTauriUpgradeStrategyGrayStrategyOrder = Desc(upgradetauriupgradestrategygraystrategy.FieldID)

func newUpgradeTauriUpgradeStrategyGrayStrategyPager(opts []UpgradeTauriUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeTauriUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeTauriUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTauriUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeTauriUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeTauriUpgradeStrategyGrayStrategyQuery) (*UpgradeTauriUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTauriUpgradeStrategyGrayStrategyPageList is UpgradeTauriUpgradeStrategyGrayStrategy PageList result.
type UpgradeTauriUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeTauriUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                               `json:"pageDetails"`
}

func (utusgs *UpgradeTauriUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTauriUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeTauriUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeTauriUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if utusgs, err = pager.ApplyFilter(utusgs); err != nil {
		return nil, err
	}

	ret := &UpgradeTauriUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := utusgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		utusgs = utusgs.Order(pager.Order)
	} else {
		utusgs = utusgs.Order(DefaultUpgradeTauriUpgradeStrategyGrayStrategyOrder)
	}

	utusgs = utusgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := utusgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTauriVersionPager struct {
	Order  upgradetauriversion.OrderOption
	Filter func(*UpgradeTauriVersionQuery) (*UpgradeTauriVersionQuery, error)
}

// UpgradeTauriVersionPaginateOption enables pagination customization.
type UpgradeTauriVersionPaginateOption func(*UpgradeTauriVersionPager)

// DefaultUpgradeTauriVersionOrder is the default ordering of UpgradeTauriVersion.
var DefaultUpgradeTauriVersionOrder = Desc(upgradetauriversion.FieldID)

func newUpgradeTauriVersionPager(opts []UpgradeTauriVersionPaginateOption) (*UpgradeTauriVersionPager, error) {
	pager := &UpgradeTauriVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTauriVersionOrder
	}
	return pager, nil
}

func (p *UpgradeTauriVersionPager) ApplyFilter(query *UpgradeTauriVersionQuery) (*UpgradeTauriVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTauriVersionPageList is UpgradeTauriVersion PageList result.
type UpgradeTauriVersionPageList struct {
	List        []*UpgradeTauriVersion `json:"list"`
	PageDetails *PageDetails           `json:"pageDetails"`
}

func (utv *UpgradeTauriVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTauriVersionPaginateOption,
) (*UpgradeTauriVersionPageList, error) {

	pager, err := newUpgradeTauriVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if utv, err = pager.ApplyFilter(utv); err != nil {
		return nil, err
	}

	ret := &UpgradeTauriVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := utv.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		utv = utv.Order(pager.Order)
	} else {
		utv = utv.Order(DefaultUpgradeTauriVersionOrder)
	}

	utv = utv.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := utv.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeTrafficPacketPager struct {
	Order  upgradetrafficpacket.OrderOption
	Filter func(*UpgradeTrafficPacketQuery) (*UpgradeTrafficPacketQuery, error)
}

// UpgradeTrafficPacketPaginateOption enables pagination customization.
type UpgradeTrafficPacketPaginateOption func(*UpgradeTrafficPacketPager)

// DefaultUpgradeTrafficPacketOrder is the default ordering of UpgradeTrafficPacket.
var DefaultUpgradeTrafficPacketOrder = Desc(upgradetrafficpacket.FieldID)

func newUpgradeTrafficPacketPager(opts []UpgradeTrafficPacketPaginateOption) (*UpgradeTrafficPacketPager, error) {
	pager := &UpgradeTrafficPacketPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeTrafficPacketOrder
	}
	return pager, nil
}

func (p *UpgradeTrafficPacketPager) ApplyFilter(query *UpgradeTrafficPacketQuery) (*UpgradeTrafficPacketQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeTrafficPacketPageList is UpgradeTrafficPacket PageList result.
type UpgradeTrafficPacketPageList struct {
	List        []*UpgradeTrafficPacket `json:"list"`
	PageDetails *PageDetails            `json:"pageDetails"`
}

func (utp *UpgradeTrafficPacketQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeTrafficPacketPaginateOption,
) (*UpgradeTrafficPacketPageList, error) {

	pager, err := newUpgradeTrafficPacketPager(opts)
	if err != nil {
		return nil, err
	}

	if utp, err = pager.ApplyFilter(utp); err != nil {
		return nil, err
	}

	ret := &UpgradeTrafficPacketPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := utp.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		utp = utp.Order(pager.Order)
	} else {
		utp = utp.Order(DefaultUpgradeTrafficPacketOrder)
	}

	utp = utp.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := utp.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeUrlPager struct {
	Order  upgradeurl.OrderOption
	Filter func(*UpgradeUrlQuery) (*UpgradeUrlQuery, error)
}

// UpgradeUrlPaginateOption enables pagination customization.
type UpgradeUrlPaginateOption func(*UpgradeUrlPager)

// DefaultUpgradeUrlOrder is the default ordering of UpgradeUrl.
var DefaultUpgradeUrlOrder = Desc(upgradeurl.FieldID)

func newUpgradeUrlPager(opts []UpgradeUrlPaginateOption) (*UpgradeUrlPager, error) {
	pager := &UpgradeUrlPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeUrlOrder
	}
	return pager, nil
}

func (p *UpgradeUrlPager) ApplyFilter(query *UpgradeUrlQuery) (*UpgradeUrlQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeUrlPageList is UpgradeUrl PageList result.
type UpgradeUrlPageList struct {
	List        []*UpgradeUrl `json:"list"`
	PageDetails *PageDetails  `json:"pageDetails"`
}

func (uu *UpgradeUrlQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeUrlPaginateOption,
) (*UpgradeUrlPageList, error) {

	pager, err := newUpgradeUrlPager(opts)
	if err != nil {
		return nil, err
	}

	if uu, err = pager.ApplyFilter(uu); err != nil {
		return nil, err
	}

	ret := &UpgradeUrlPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uu.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uu = uu.Order(pager.Order)
	} else {
		uu = uu.Order(DefaultUpgradeUrlOrder)
	}

	uu = uu.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uu.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeUrlUpgradeStrategyPager struct {
	Order  upgradeurlupgradestrategy.OrderOption
	Filter func(*UpgradeUrlUpgradeStrategyQuery) (*UpgradeUrlUpgradeStrategyQuery, error)
}

// UpgradeUrlUpgradeStrategyPaginateOption enables pagination customization.
type UpgradeUrlUpgradeStrategyPaginateOption func(*UpgradeUrlUpgradeStrategyPager)

// DefaultUpgradeUrlUpgradeStrategyOrder is the default ordering of UpgradeUrlUpgradeStrategy.
var DefaultUpgradeUrlUpgradeStrategyOrder = Desc(upgradeurlupgradestrategy.FieldID)

func newUpgradeUrlUpgradeStrategyPager(opts []UpgradeUrlUpgradeStrategyPaginateOption) (*UpgradeUrlUpgradeStrategyPager, error) {
	pager := &UpgradeUrlUpgradeStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeUrlUpgradeStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeUrlUpgradeStrategyPager) ApplyFilter(query *UpgradeUrlUpgradeStrategyQuery) (*UpgradeUrlUpgradeStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeUrlUpgradeStrategyPageList is UpgradeUrlUpgradeStrategy PageList result.
type UpgradeUrlUpgradeStrategyPageList struct {
	List        []*UpgradeUrlUpgradeStrategy `json:"list"`
	PageDetails *PageDetails                 `json:"pageDetails"`
}

func (uuus *UpgradeUrlUpgradeStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeUrlUpgradeStrategyPaginateOption,
) (*UpgradeUrlUpgradeStrategyPageList, error) {

	pager, err := newUpgradeUrlUpgradeStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uuus, err = pager.ApplyFilter(uuus); err != nil {
		return nil, err
	}

	ret := &UpgradeUrlUpgradeStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uuus.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uuus = uuus.Order(pager.Order)
	} else {
		uuus = uuus.Order(DefaultUpgradeUrlUpgradeStrategyOrder)
	}

	uuus = uuus.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uuus.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeUrlUpgradeStrategyFlowLimitStrategyPager struct {
	Order  upgradeurlupgradestrategyflowlimitstrategy.OrderOption
	Filter func(*UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery, error)
}

// UpgradeUrlUpgradeStrategyFlowLimitStrategyPaginateOption enables pagination customization.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyPaginateOption func(*UpgradeUrlUpgradeStrategyFlowLimitStrategyPager)

// DefaultUpgradeUrlUpgradeStrategyFlowLimitStrategyOrder is the default ordering of UpgradeUrlUpgradeStrategyFlowLimitStrategy.
var DefaultUpgradeUrlUpgradeStrategyFlowLimitStrategyOrder = Desc(upgradeurlupgradestrategyflowlimitstrategy.FieldID)

func newUpgradeUrlUpgradeStrategyFlowLimitStrategyPager(opts []UpgradeUrlUpgradeStrategyFlowLimitStrategyPaginateOption) (*UpgradeUrlUpgradeStrategyFlowLimitStrategyPager, error) {
	pager := &UpgradeUrlUpgradeStrategyFlowLimitStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeUrlUpgradeStrategyFlowLimitStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeUrlUpgradeStrategyFlowLimitStrategyPager) ApplyFilter(query *UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery) (*UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeUrlUpgradeStrategyFlowLimitStrategyPageList is UpgradeUrlUpgradeStrategyFlowLimitStrategy PageList result.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyPageList struct {
	List        []*UpgradeUrlUpgradeStrategyFlowLimitStrategy `json:"list"`
	PageDetails *PageDetails                                  `json:"pageDetails"`
}

func (uuusfls *UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeUrlUpgradeStrategyFlowLimitStrategyPaginateOption,
) (*UpgradeUrlUpgradeStrategyFlowLimitStrategyPageList, error) {

	pager, err := newUpgradeUrlUpgradeStrategyFlowLimitStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uuusfls, err = pager.ApplyFilter(uuusfls); err != nil {
		return nil, err
	}

	ret := &UpgradeUrlUpgradeStrategyFlowLimitStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uuusfls.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uuusfls = uuusfls.Order(pager.Order)
	} else {
		uuusfls = uuusfls.Order(DefaultUpgradeUrlUpgradeStrategyFlowLimitStrategyOrder)
	}

	uuusfls = uuusfls.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uuusfls.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeUrlUpgradeStrategyGrayStrategyPager struct {
	Order  upgradeurlupgradestrategygraystrategy.OrderOption
	Filter func(*UpgradeUrlUpgradeStrategyGrayStrategyQuery) (*UpgradeUrlUpgradeStrategyGrayStrategyQuery, error)
}

// UpgradeUrlUpgradeStrategyGrayStrategyPaginateOption enables pagination customization.
type UpgradeUrlUpgradeStrategyGrayStrategyPaginateOption func(*UpgradeUrlUpgradeStrategyGrayStrategyPager)

// DefaultUpgradeUrlUpgradeStrategyGrayStrategyOrder is the default ordering of UpgradeUrlUpgradeStrategyGrayStrategy.
var DefaultUpgradeUrlUpgradeStrategyGrayStrategyOrder = Desc(upgradeurlupgradestrategygraystrategy.FieldID)

func newUpgradeUrlUpgradeStrategyGrayStrategyPager(opts []UpgradeUrlUpgradeStrategyGrayStrategyPaginateOption) (*UpgradeUrlUpgradeStrategyGrayStrategyPager, error) {
	pager := &UpgradeUrlUpgradeStrategyGrayStrategyPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeUrlUpgradeStrategyGrayStrategyOrder
	}
	return pager, nil
}

func (p *UpgradeUrlUpgradeStrategyGrayStrategyPager) ApplyFilter(query *UpgradeUrlUpgradeStrategyGrayStrategyQuery) (*UpgradeUrlUpgradeStrategyGrayStrategyQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeUrlUpgradeStrategyGrayStrategyPageList is UpgradeUrlUpgradeStrategyGrayStrategy PageList result.
type UpgradeUrlUpgradeStrategyGrayStrategyPageList struct {
	List        []*UpgradeUrlUpgradeStrategyGrayStrategy `json:"list"`
	PageDetails *PageDetails                             `json:"pageDetails"`
}

func (uuusgs *UpgradeUrlUpgradeStrategyGrayStrategyQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeUrlUpgradeStrategyGrayStrategyPaginateOption,
) (*UpgradeUrlUpgradeStrategyGrayStrategyPageList, error) {

	pager, err := newUpgradeUrlUpgradeStrategyGrayStrategyPager(opts)
	if err != nil {
		return nil, err
	}

	if uuusgs, err = pager.ApplyFilter(uuusgs); err != nil {
		return nil, err
	}

	ret := &UpgradeUrlUpgradeStrategyGrayStrategyPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uuusgs.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uuusgs = uuusgs.Order(pager.Order)
	} else {
		uuusgs = uuusgs.Order(DefaultUpgradeUrlUpgradeStrategyGrayStrategyOrder)
	}

	uuusgs = uuusgs.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uuusgs.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}

type UpgradeUrlVersionPager struct {
	Order  upgradeurlversion.OrderOption
	Filter func(*UpgradeUrlVersionQuery) (*UpgradeUrlVersionQuery, error)
}

// UpgradeUrlVersionPaginateOption enables pagination customization.
type UpgradeUrlVersionPaginateOption func(*UpgradeUrlVersionPager)

// DefaultUpgradeUrlVersionOrder is the default ordering of UpgradeUrlVersion.
var DefaultUpgradeUrlVersionOrder = Desc(upgradeurlversion.FieldID)

func newUpgradeUrlVersionPager(opts []UpgradeUrlVersionPaginateOption) (*UpgradeUrlVersionPager, error) {
	pager := &UpgradeUrlVersionPager{}
	for _, opt := range opts {
		opt(pager)
	}
	if pager.Order == nil {
		pager.Order = DefaultUpgradeUrlVersionOrder
	}
	return pager, nil
}

func (p *UpgradeUrlVersionPager) ApplyFilter(query *UpgradeUrlVersionQuery) (*UpgradeUrlVersionQuery, error) {
	if p.Filter != nil {
		return p.Filter(query)
	}
	return query, nil
}

// UpgradeUrlVersionPageList is UpgradeUrlVersion PageList result.
type UpgradeUrlVersionPageList struct {
	List        []*UpgradeUrlVersion `json:"list"`
	PageDetails *PageDetails         `json:"pageDetails"`
}

func (uuv *UpgradeUrlVersionQuery) Page(
	ctx context.Context, pageNum uint64, pageSize uint64, opts ...UpgradeUrlVersionPaginateOption,
) (*UpgradeUrlVersionPageList, error) {

	pager, err := newUpgradeUrlVersionPager(opts)
	if err != nil {
		return nil, err
	}

	if uuv, err = pager.ApplyFilter(uuv); err != nil {
		return nil, err
	}

	ret := &UpgradeUrlVersionPageList{}

	ret.PageDetails = &PageDetails{
		Page: pageNum,
		Size: pageSize,
	}

	query := uuv.Clone()
	query.ctx.Fields = nil
	count, err := query.Count(ctx)

	if err != nil {
		return nil, err
	}

	ret.PageDetails.Total = uint64(count)

	if pager.Order != nil {
		uuv = uuv.Order(pager.Order)
	} else {
		uuv = uuv.Order(DefaultUpgradeUrlVersionOrder)
	}

	uuv = uuv.Offset(int((pageNum - 1) * pageSize)).Limit(int(pageSize))
	list, err := uuv.All(ctx)
	if err != nil {
		return nil, err
	}
	ret.List = list

	return ret, nil
}
