// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeappdownloadreportlog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeAppDownloadReportLogUpdate is the builder for updating UpgradeAppDownloadReportLog entities.
type UpgradeAppDownloadReportLogUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeAppDownloadReportLogMutation
}

// Where appends a list predicates to the UpgradeAppDownloadReportLogUpdate builder.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) Where(ps ...predicate.UpgradeAppDownloadReportLog) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.Where(ps...)
	return uadrlu
}

// SetCompanyID sets the "company_id" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetCompanyID(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ResetCompanyID()
	uadrlu.mutation.SetCompanyID(i)
	return uadrlu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableCompanyID(i *int) *UpgradeAppDownloadReportLogUpdate {
	if i != nil {
		uadrlu.SetCompanyID(*i)
	}
	return uadrlu
}

// AddCompanyID adds i to the "company_id" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) AddCompanyID(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.AddCompanyID(i)
	return uadrlu
}

// SetTimestamp sets the "timestamp" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetTimestamp(t time.Time) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.SetTimestamp(t)
	return uadrlu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableTimestamp(t *time.Time) *UpgradeAppDownloadReportLogUpdate {
	if t != nil {
		uadrlu.SetTimestamp(*t)
	}
	return uadrlu
}

// ClearTimestamp clears the value of the "timestamp" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) ClearTimestamp() *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ClearTimestamp()
	return uadrlu
}

// SetAppKey sets the "app_key" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetAppKey(s string) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.SetAppKey(s)
	return uadrlu
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableAppKey(s *string) *UpgradeAppDownloadReportLogUpdate {
	if s != nil {
		uadrlu.SetAppKey(*s)
	}
	return uadrlu
}

// SetAppVersionID sets the "app_version_id" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetAppVersionID(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ResetAppVersionID()
	uadrlu.mutation.SetAppVersionID(i)
	return uadrlu
}

// SetNillableAppVersionID sets the "app_version_id" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableAppVersionID(i *int) *UpgradeAppDownloadReportLogUpdate {
	if i != nil {
		uadrlu.SetAppVersionID(*i)
	}
	return uadrlu
}

// AddAppVersionID adds i to the "app_version_id" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) AddAppVersionID(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.AddAppVersionID(i)
	return uadrlu
}

// SetAppVersionCode sets the "app_version_code" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetAppVersionCode(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ResetAppVersionCode()
	uadrlu.mutation.SetAppVersionCode(i)
	return uadrlu
}

// SetNillableAppVersionCode sets the "app_version_code" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableAppVersionCode(i *int) *UpgradeAppDownloadReportLogUpdate {
	if i != nil {
		uadrlu.SetAppVersionCode(*i)
	}
	return uadrlu
}

// AddAppVersionCode adds i to the "app_version_code" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) AddAppVersionCode(i int) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.AddAppVersionCode(i)
	return uadrlu
}

// SetAppVersionTarget sets the "app_version_target" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetAppVersionTarget(s string) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.SetAppVersionTarget(s)
	return uadrlu
}

// SetNillableAppVersionTarget sets the "app_version_target" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableAppVersionTarget(s *string) *UpgradeAppDownloadReportLogUpdate {
	if s != nil {
		uadrlu.SetAppVersionTarget(*s)
	}
	return uadrlu
}

// ClearAppVersionTarget clears the value of the "app_version_target" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) ClearAppVersionTarget() *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ClearAppVersionTarget()
	return uadrlu
}

// SetAppVersionArch sets the "app_version_arch" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetAppVersionArch(s string) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.SetAppVersionArch(s)
	return uadrlu
}

// SetNillableAppVersionArch sets the "app_version_arch" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableAppVersionArch(s *string) *UpgradeAppDownloadReportLogUpdate {
	if s != nil {
		uadrlu.SetAppVersionArch(*s)
	}
	return uadrlu
}

// ClearAppVersionArch clears the value of the "app_version_arch" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) ClearAppVersionArch() *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ClearAppVersionArch()
	return uadrlu
}

// SetCreateAt sets the "create_at" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetCreateAt(t time.Time) *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.SetCreateAt(t)
	return uadrlu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SetNillableCreateAt(t *time.Time) *UpgradeAppDownloadReportLogUpdate {
	if t != nil {
		uadrlu.SetCreateAt(*t)
	}
	return uadrlu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) ClearCreateAt() *UpgradeAppDownloadReportLogUpdate {
	uadrlu.mutation.ClearCreateAt()
	return uadrlu
}

// Mutation returns the UpgradeAppDownloadReportLogMutation object of the builder.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) Mutation() *UpgradeAppDownloadReportLogMutation {
	return uadrlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uadrlu.sqlSave, uadrlu.mutation, uadrlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) SaveX(ctx context.Context) int {
	affected, err := uadrlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) Exec(ctx context.Context) error {
	_, err := uadrlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uadrlu *UpgradeAppDownloadReportLogUpdate) ExecX(ctx context.Context) {
	if err := uadrlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uadrlu *UpgradeAppDownloadReportLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeappdownloadreportlog.Table, upgradeappdownloadreportlog.Columns, sqlgraph.NewFieldSpec(upgradeappdownloadreportlog.FieldID, field.TypeInt))
	if ps := uadrlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uadrlu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.Timestamp(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldTimestamp, field.TypeTime, value)
	}
	if uadrlu.mutation.TimestampCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldTimestamp, field.TypeTime)
	}
	if value, ok := uadrlu.mutation.AppKey(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppKey, field.TypeString, value)
	}
	if value, ok := uadrlu.mutation.AppVersionID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionID, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.AddedAppVersionID(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldAppVersionID, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.AppVersionCode(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionCode, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.AddedAppVersionCode(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldAppVersionCode, field.TypeInt, value)
	}
	if value, ok := uadrlu.mutation.AppVersionTarget(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionTarget, field.TypeString, value)
	}
	if uadrlu.mutation.AppVersionTargetCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldAppVersionTarget, field.TypeString)
	}
	if value, ok := uadrlu.mutation.AppVersionArch(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionArch, field.TypeString, value)
	}
	if uadrlu.mutation.AppVersionArchCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldAppVersionArch, field.TypeString)
	}
	if value, ok := uadrlu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCreateAt, field.TypeTime, value)
	}
	if uadrlu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldCreateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uadrlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeappdownloadreportlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uadrlu.mutation.done = true
	return n, nil
}

// UpgradeAppDownloadReportLogUpdateOne is the builder for updating a single UpgradeAppDownloadReportLog entity.
type UpgradeAppDownloadReportLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeAppDownloadReportLogMutation
}

// SetCompanyID sets the "company_id" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetCompanyID(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ResetCompanyID()
	uadrluo.mutation.SetCompanyID(i)
	return uadrluo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableCompanyID(i *int) *UpgradeAppDownloadReportLogUpdateOne {
	if i != nil {
		uadrluo.SetCompanyID(*i)
	}
	return uadrluo
}

// AddCompanyID adds i to the "company_id" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) AddCompanyID(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.AddCompanyID(i)
	return uadrluo
}

// SetTimestamp sets the "timestamp" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetTimestamp(t time.Time) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.SetTimestamp(t)
	return uadrluo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableTimestamp(t *time.Time) *UpgradeAppDownloadReportLogUpdateOne {
	if t != nil {
		uadrluo.SetTimestamp(*t)
	}
	return uadrluo
}

// ClearTimestamp clears the value of the "timestamp" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) ClearTimestamp() *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ClearTimestamp()
	return uadrluo
}

// SetAppKey sets the "app_key" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetAppKey(s string) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.SetAppKey(s)
	return uadrluo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableAppKey(s *string) *UpgradeAppDownloadReportLogUpdateOne {
	if s != nil {
		uadrluo.SetAppKey(*s)
	}
	return uadrluo
}

// SetAppVersionID sets the "app_version_id" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetAppVersionID(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ResetAppVersionID()
	uadrluo.mutation.SetAppVersionID(i)
	return uadrluo
}

// SetNillableAppVersionID sets the "app_version_id" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableAppVersionID(i *int) *UpgradeAppDownloadReportLogUpdateOne {
	if i != nil {
		uadrluo.SetAppVersionID(*i)
	}
	return uadrluo
}

// AddAppVersionID adds i to the "app_version_id" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) AddAppVersionID(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.AddAppVersionID(i)
	return uadrluo
}

// SetAppVersionCode sets the "app_version_code" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetAppVersionCode(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ResetAppVersionCode()
	uadrluo.mutation.SetAppVersionCode(i)
	return uadrluo
}

// SetNillableAppVersionCode sets the "app_version_code" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableAppVersionCode(i *int) *UpgradeAppDownloadReportLogUpdateOne {
	if i != nil {
		uadrluo.SetAppVersionCode(*i)
	}
	return uadrluo
}

// AddAppVersionCode adds i to the "app_version_code" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) AddAppVersionCode(i int) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.AddAppVersionCode(i)
	return uadrluo
}

// SetAppVersionTarget sets the "app_version_target" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetAppVersionTarget(s string) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.SetAppVersionTarget(s)
	return uadrluo
}

// SetNillableAppVersionTarget sets the "app_version_target" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableAppVersionTarget(s *string) *UpgradeAppDownloadReportLogUpdateOne {
	if s != nil {
		uadrluo.SetAppVersionTarget(*s)
	}
	return uadrluo
}

// ClearAppVersionTarget clears the value of the "app_version_target" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) ClearAppVersionTarget() *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ClearAppVersionTarget()
	return uadrluo
}

// SetAppVersionArch sets the "app_version_arch" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetAppVersionArch(s string) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.SetAppVersionArch(s)
	return uadrluo
}

// SetNillableAppVersionArch sets the "app_version_arch" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableAppVersionArch(s *string) *UpgradeAppDownloadReportLogUpdateOne {
	if s != nil {
		uadrluo.SetAppVersionArch(*s)
	}
	return uadrluo
}

// ClearAppVersionArch clears the value of the "app_version_arch" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) ClearAppVersionArch() *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ClearAppVersionArch()
	return uadrluo
}

// SetCreateAt sets the "create_at" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetCreateAt(t time.Time) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.SetCreateAt(t)
	return uadrluo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeAppDownloadReportLogUpdateOne {
	if t != nil {
		uadrluo.SetCreateAt(*t)
	}
	return uadrluo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) ClearCreateAt() *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.ClearCreateAt()
	return uadrluo
}

// Mutation returns the UpgradeAppDownloadReportLogMutation object of the builder.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) Mutation() *UpgradeAppDownloadReportLogMutation {
	return uadrluo.mutation
}

// Where appends a list predicates to the UpgradeAppDownloadReportLogUpdate builder.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) Where(ps ...predicate.UpgradeAppDownloadReportLog) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.mutation.Where(ps...)
	return uadrluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) Select(field string, fields ...string) *UpgradeAppDownloadReportLogUpdateOne {
	uadrluo.fields = append([]string{field}, fields...)
	return uadrluo
}

// Save executes the query and returns the updated UpgradeAppDownloadReportLog entity.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) Save(ctx context.Context) (*UpgradeAppDownloadReportLog, error) {
	return withHooks(ctx, uadrluo.sqlSave, uadrluo.mutation, uadrluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) SaveX(ctx context.Context) *UpgradeAppDownloadReportLog {
	node, err := uadrluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) Exec(ctx context.Context) error {
	_, err := uadrluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) ExecX(ctx context.Context) {
	if err := uadrluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uadrluo *UpgradeAppDownloadReportLogUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeAppDownloadReportLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeappdownloadreportlog.Table, upgradeappdownloadreportlog.Columns, sqlgraph.NewFieldSpec(upgradeappdownloadreportlog.FieldID, field.TypeInt))
	id, ok := uadrluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeAppDownloadReportLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uadrluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeappdownloadreportlog.FieldID)
		for _, f := range fields {
			if !upgradeappdownloadreportlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeappdownloadreportlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uadrluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uadrluo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.Timestamp(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldTimestamp, field.TypeTime, value)
	}
	if uadrluo.mutation.TimestampCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldTimestamp, field.TypeTime)
	}
	if value, ok := uadrluo.mutation.AppKey(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppKey, field.TypeString, value)
	}
	if value, ok := uadrluo.mutation.AppVersionID(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionID, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.AddedAppVersionID(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldAppVersionID, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.AppVersionCode(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionCode, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.AddedAppVersionCode(); ok {
		_spec.AddField(upgradeappdownloadreportlog.FieldAppVersionCode, field.TypeInt, value)
	}
	if value, ok := uadrluo.mutation.AppVersionTarget(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionTarget, field.TypeString, value)
	}
	if uadrluo.mutation.AppVersionTargetCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldAppVersionTarget, field.TypeString)
	}
	if value, ok := uadrluo.mutation.AppVersionArch(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldAppVersionArch, field.TypeString, value)
	}
	if uadrluo.mutation.AppVersionArchCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldAppVersionArch, field.TypeString)
	}
	if value, ok := uadrluo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeappdownloadreportlog.FieldCreateAt, field.TypeTime, value)
	}
	if uadrluo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeappdownloadreportlog.FieldCreateAt, field.TypeTime)
	}
	_node = &UpgradeAppDownloadReportLog{config: uadrluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uadrluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeappdownloadreportlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uadrluo.mutation.done = true
	return _node, nil
}
