// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeApkUpgradeStrategyFlowLimitStrategy entity.
type UpgradeApkUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyFlowLimitStrategyDelete builder.
func (uausflsd *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete {
	uausflsd.mutation.Where(ps...)
	return uausflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uausflsd *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uausflsd.sqlExec, uausflsd.mutation, uausflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uausflsd *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := uausflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uausflsd *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeapkupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradeapkupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := uausflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uausflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uausflsd.mutation.done = true
	return affected, err
}

// UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeApkUpgradeStrategyFlowLimitStrategy entity.
type UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	uausflsd *UpgradeApkUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyFlowLimitStrategyDelete builder.
func (uausflsdo *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne {
	uausflsdo.uausflsd.mutation.Where(ps...)
	return uausflsdo
}

// Exec executes the deletion query.
func (uausflsdo *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := uausflsdo.uausflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeapkupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uausflsdo *UpgradeApkUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := uausflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
