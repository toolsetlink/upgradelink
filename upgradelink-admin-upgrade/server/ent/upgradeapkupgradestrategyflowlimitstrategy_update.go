// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeApkUpgradeStrategyFlowLimitStrategy entities.
type UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate builder.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.Where(ps...)
	return uausflsu
}

// SetEnable sets the "enable" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ResetEnable()
	uausflsu.mutation.SetEnable(i)
	return uausflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uausflsu.SetEnable(*i)
	}
	return uausflsu
}

// AddEnable adds i to the "enable" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.AddEnable(i)
	return uausflsu
}

// SetBeginTime sets the "begin_time" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.SetBeginTime(s)
	return uausflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		uausflsu.SetBeginTime(*s)
	}
	return uausflsu
}

// SetEndTime sets the "end_time" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.SetEndTime(s)
	return uausflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		uausflsu.SetEndTime(*s)
	}
	return uausflsu
}

// SetDimension sets the "dimension" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ResetDimension()
	uausflsu.mutation.SetDimension(i)
	return uausflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uausflsu.SetDimension(*i)
	}
	return uausflsu
}

// AddDimension adds i to the "dimension" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.AddDimension(i)
	return uausflsu
}

// SetLimit sets the "limit" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ResetLimit()
	uausflsu.mutation.SetLimit(i)
	return uausflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uausflsu.SetLimit(*i)
	}
	return uausflsu
}

// AddLimit adds i to the "limit" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.AddLimit(i)
	return uausflsu
}

// SetIsDel sets the "is_del" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ResetIsDel()
	uausflsu.mutation.SetIsDel(i)
	return uausflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uausflsu.SetIsDel(*i)
	}
	return uausflsu
}

// AddIsDel adds i to the "is_del" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.AddIsDel(i)
	return uausflsu
}

// SetCreateAt sets the "create_at" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.SetCreateAt(t)
	return uausflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		uausflsu.SetCreateAt(*t)
	}
	return uausflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ClearCreateAt()
	return uausflsu
}

// SetUpdateAt sets the "update_at" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.SetUpdateAt(t)
	return uausflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		uausflsu.SetUpdateAt(*t)
	}
	return uausflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate {
	uausflsu.mutation.ClearUpdateAt()
	return uausflsu
}

// Mutation returns the UpgradeApkUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation {
	return uausflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uausflsu.sqlSave, uausflsu.mutation, uausflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uausflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uausflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := uausflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausflsu *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategyflowlimitstrategy.Table, upgradeapkupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := uausflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausflsu.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := uausflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := uausflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.Limit(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uausflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uausflsu.mutation.done = true
	return n, nil
}

// UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeApkUpgradeStrategyFlowLimitStrategy entity.
type UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ResetEnable()
	uausflsuo.mutation.SetEnable(i)
	return uausflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uausflsuo.SetEnable(*i)
	}
	return uausflsuo
}

// AddEnable adds i to the "enable" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.AddEnable(i)
	return uausflsuo
}

// SetBeginTime sets the "begin_time" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.SetBeginTime(s)
	return uausflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		uausflsuo.SetBeginTime(*s)
	}
	return uausflsuo
}

// SetEndTime sets the "end_time" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.SetEndTime(s)
	return uausflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		uausflsuo.SetEndTime(*s)
	}
	return uausflsuo
}

// SetDimension sets the "dimension" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ResetDimension()
	uausflsuo.mutation.SetDimension(i)
	return uausflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uausflsuo.SetDimension(*i)
	}
	return uausflsuo
}

// AddDimension adds i to the "dimension" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.AddDimension(i)
	return uausflsuo
}

// SetLimit sets the "limit" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ResetLimit()
	uausflsuo.mutation.SetLimit(i)
	return uausflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uausflsuo.SetLimit(*i)
	}
	return uausflsuo
}

// AddLimit adds i to the "limit" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.AddLimit(i)
	return uausflsuo
}

// SetIsDel sets the "is_del" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ResetIsDel()
	uausflsuo.mutation.SetIsDel(i)
	return uausflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uausflsuo.SetIsDel(*i)
	}
	return uausflsuo
}

// AddIsDel adds i to the "is_del" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.AddIsDel(i)
	return uausflsuo
}

// SetCreateAt sets the "create_at" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.SetCreateAt(t)
	return uausflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		uausflsuo.SetCreateAt(*t)
	}
	return uausflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ClearCreateAt()
	return uausflsuo
}

// SetUpdateAt sets the "update_at" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.SetUpdateAt(t)
	return uausflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		uausflsuo.SetUpdateAt(*t)
	}
	return uausflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.ClearUpdateAt()
	return uausflsuo
}

// Mutation returns the UpgradeApkUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeApkUpgradeStrategyFlowLimitStrategyMutation {
	return uausflsuo.mutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyFlowLimitStrategyUpdate builder.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeApkUpgradeStrategyFlowLimitStrategy) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.mutation.Where(ps...)
	return uausflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne {
	uausflsuo.fields = append([]string{field}, fields...)
	return uausflsuo
}

// Save executes the query and returns the updated UpgradeApkUpgradeStrategyFlowLimitStrategy entity.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeApkUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, uausflsuo.sqlSave, uausflsuo.mutation, uausflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeApkUpgradeStrategyFlowLimitStrategy {
	node, err := uausflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uausflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uausflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausflsuo *UpgradeApkUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeApkUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategyflowlimitstrategy.Table, upgradeapkupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := uausflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeApkUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uausflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapkupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradeapkupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeapkupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uausflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := uausflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := uausflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeApkUpgradeStrategyFlowLimitStrategy{config: uausflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uausflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uausflsuo.mutation.done = true
	return _node, nil
}
