// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradefile"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpdate is the builder for updating UpgradeFile entities.
type UpgradeFileUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeFileMutation
}

// Where appends a list predicates to the UpgradeFileUpdate builder.
func (ufu *UpgradeFileUpdate) Where(ps ...predicate.UpgradeFile) *UpgradeFileUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetCompanyID sets the "company_id" field.
func (ufu *UpgradeFileUpdate) SetCompanyID(i int) *UpgradeFileUpdate {
	ufu.mutation.ResetCompanyID()
	ufu.mutation.SetCompanyID(i)
	return ufu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableCompanyID(i *int) *UpgradeFileUpdate {
	if i != nil {
		ufu.SetCompanyID(*i)
	}
	return ufu
}

// AddCompanyID adds i to the "company_id" field.
func (ufu *UpgradeFileUpdate) AddCompanyID(i int) *UpgradeFileUpdate {
	ufu.mutation.AddCompanyID(i)
	return ufu
}

// SetKey sets the "key" field.
func (ufu *UpgradeFileUpdate) SetKey(s string) *UpgradeFileUpdate {
	ufu.mutation.SetKey(s)
	return ufu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableKey(s *string) *UpgradeFileUpdate {
	if s != nil {
		ufu.SetKey(*s)
	}
	return ufu
}

// SetName sets the "name" field.
func (ufu *UpgradeFileUpdate) SetName(s string) *UpgradeFileUpdate {
	ufu.mutation.SetName(s)
	return ufu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableName(s *string) *UpgradeFileUpdate {
	if s != nil {
		ufu.SetName(*s)
	}
	return ufu
}

// SetDescription sets the "description" field.
func (ufu *UpgradeFileUpdate) SetDescription(s string) *UpgradeFileUpdate {
	ufu.mutation.SetDescription(s)
	return ufu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableDescription(s *string) *UpgradeFileUpdate {
	if s != nil {
		ufu.SetDescription(*s)
	}
	return ufu
}

// ClearDescription clears the value of the "description" field.
func (ufu *UpgradeFileUpdate) ClearDescription() *UpgradeFileUpdate {
	ufu.mutation.ClearDescription()
	return ufu
}

// SetIsDel sets the "is_del" field.
func (ufu *UpgradeFileUpdate) SetIsDel(i int32) *UpgradeFileUpdate {
	ufu.mutation.ResetIsDel()
	ufu.mutation.SetIsDel(i)
	return ufu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableIsDel(i *int32) *UpgradeFileUpdate {
	if i != nil {
		ufu.SetIsDel(*i)
	}
	return ufu
}

// AddIsDel adds i to the "is_del" field.
func (ufu *UpgradeFileUpdate) AddIsDel(i int32) *UpgradeFileUpdate {
	ufu.mutation.AddIsDel(i)
	return ufu
}

// SetCreateAt sets the "create_at" field.
func (ufu *UpgradeFileUpdate) SetCreateAt(t time.Time) *UpgradeFileUpdate {
	ufu.mutation.SetCreateAt(t)
	return ufu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableCreateAt(t *time.Time) *UpgradeFileUpdate {
	if t != nil {
		ufu.SetCreateAt(*t)
	}
	return ufu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufu *UpgradeFileUpdate) ClearCreateAt() *UpgradeFileUpdate {
	ufu.mutation.ClearCreateAt()
	return ufu
}

// SetUpdateAt sets the "update_at" field.
func (ufu *UpgradeFileUpdate) SetUpdateAt(t time.Time) *UpgradeFileUpdate {
	ufu.mutation.SetUpdateAt(t)
	return ufu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufu *UpgradeFileUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpdate {
	if t != nil {
		ufu.SetUpdateAt(*t)
	}
	return ufu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufu *UpgradeFileUpdate) ClearUpdateAt() *UpgradeFileUpdate {
	ufu.mutation.ClearUpdateAt()
	return ufu
}

// Mutation returns the UpgradeFileMutation object of the builder.
func (ufu *UpgradeFileUpdate) Mutation() *UpgradeFileMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UpgradeFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UpgradeFileUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UpgradeFileUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UpgradeFileUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UpgradeFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefile.Table, upgradefile.Columns, sqlgraph.NewFieldSpec(upgradefile.FieldID, field.TypeInt))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.CompanyID(); ok {
		_spec.SetField(upgradefile.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefile.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.Key(); ok {
		_spec.SetField(upgradefile.FieldKey, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Name(); ok {
		_spec.SetField(upgradefile.FieldName, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Description(); ok {
		_spec.SetField(upgradefile.FieldDescription, field.TypeString, value)
	}
	if ufu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefile.FieldDescription, field.TypeString)
	}
	if value, ok := ufu.mutation.IsDel(); ok {
		_spec.SetField(upgradefile.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefile.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufu.mutation.CreateAt(); ok {
		_spec.SetField(upgradefile.FieldCreateAt, field.TypeTime, value)
	}
	if ufu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefile.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefile.FieldUpdateAt, field.TypeTime, value)
	}
	if ufu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefile.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UpgradeFileUpdateOne is the builder for updating a single UpgradeFile entity.
type UpgradeFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeFileMutation
}

// SetCompanyID sets the "company_id" field.
func (ufuo *UpgradeFileUpdateOne) SetCompanyID(i int) *UpgradeFileUpdateOne {
	ufuo.mutation.ResetCompanyID()
	ufuo.mutation.SetCompanyID(i)
	return ufuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableCompanyID(i *int) *UpgradeFileUpdateOne {
	if i != nil {
		ufuo.SetCompanyID(*i)
	}
	return ufuo
}

// AddCompanyID adds i to the "company_id" field.
func (ufuo *UpgradeFileUpdateOne) AddCompanyID(i int) *UpgradeFileUpdateOne {
	ufuo.mutation.AddCompanyID(i)
	return ufuo
}

// SetKey sets the "key" field.
func (ufuo *UpgradeFileUpdateOne) SetKey(s string) *UpgradeFileUpdateOne {
	ufuo.mutation.SetKey(s)
	return ufuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableKey(s *string) *UpgradeFileUpdateOne {
	if s != nil {
		ufuo.SetKey(*s)
	}
	return ufuo
}

// SetName sets the "name" field.
func (ufuo *UpgradeFileUpdateOne) SetName(s string) *UpgradeFileUpdateOne {
	ufuo.mutation.SetName(s)
	return ufuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableName(s *string) *UpgradeFileUpdateOne {
	if s != nil {
		ufuo.SetName(*s)
	}
	return ufuo
}

// SetDescription sets the "description" field.
func (ufuo *UpgradeFileUpdateOne) SetDescription(s string) *UpgradeFileUpdateOne {
	ufuo.mutation.SetDescription(s)
	return ufuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableDescription(s *string) *UpgradeFileUpdateOne {
	if s != nil {
		ufuo.SetDescription(*s)
	}
	return ufuo
}

// ClearDescription clears the value of the "description" field.
func (ufuo *UpgradeFileUpdateOne) ClearDescription() *UpgradeFileUpdateOne {
	ufuo.mutation.ClearDescription()
	return ufuo
}

// SetIsDel sets the "is_del" field.
func (ufuo *UpgradeFileUpdateOne) SetIsDel(i int32) *UpgradeFileUpdateOne {
	ufuo.mutation.ResetIsDel()
	ufuo.mutation.SetIsDel(i)
	return ufuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableIsDel(i *int32) *UpgradeFileUpdateOne {
	if i != nil {
		ufuo.SetIsDel(*i)
	}
	return ufuo
}

// AddIsDel adds i to the "is_del" field.
func (ufuo *UpgradeFileUpdateOne) AddIsDel(i int32) *UpgradeFileUpdateOne {
	ufuo.mutation.AddIsDel(i)
	return ufuo
}

// SetCreateAt sets the "create_at" field.
func (ufuo *UpgradeFileUpdateOne) SetCreateAt(t time.Time) *UpgradeFileUpdateOne {
	ufuo.mutation.SetCreateAt(t)
	return ufuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeFileUpdateOne {
	if t != nil {
		ufuo.SetCreateAt(*t)
	}
	return ufuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufuo *UpgradeFileUpdateOne) ClearCreateAt() *UpgradeFileUpdateOne {
	ufuo.mutation.ClearCreateAt()
	return ufuo
}

// SetUpdateAt sets the "update_at" field.
func (ufuo *UpgradeFileUpdateOne) SetUpdateAt(t time.Time) *UpgradeFileUpdateOne {
	ufuo.mutation.SetUpdateAt(t)
	return ufuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufuo *UpgradeFileUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpdateOne {
	if t != nil {
		ufuo.SetUpdateAt(*t)
	}
	return ufuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufuo *UpgradeFileUpdateOne) ClearUpdateAt() *UpgradeFileUpdateOne {
	ufuo.mutation.ClearUpdateAt()
	return ufuo
}

// Mutation returns the UpgradeFileMutation object of the builder.
func (ufuo *UpgradeFileUpdateOne) Mutation() *UpgradeFileMutation {
	return ufuo.mutation
}

// Where appends a list predicates to the UpgradeFileUpdate builder.
func (ufuo *UpgradeFileUpdateOne) Where(ps ...predicate.UpgradeFile) *UpgradeFileUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UpgradeFileUpdateOne) Select(field string, fields ...string) *UpgradeFileUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UpgradeFile entity.
func (ufuo *UpgradeFileUpdateOne) Save(ctx context.Context) (*UpgradeFile, error) {
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UpgradeFileUpdateOne) SaveX(ctx context.Context) *UpgradeFile {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UpgradeFileUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UpgradeFileUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UpgradeFileUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefile.Table, upgradefile.Columns, sqlgraph.NewFieldSpec(upgradefile.FieldID, field.TypeInt))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradefile.FieldID)
		for _, f := range fields {
			if !upgradefile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradefile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradefile.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefile.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.Key(); ok {
		_spec.SetField(upgradefile.FieldKey, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Name(); ok {
		_spec.SetField(upgradefile.FieldName, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Description(); ok {
		_spec.SetField(upgradefile.FieldDescription, field.TypeString, value)
	}
	if ufuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefile.FieldDescription, field.TypeString)
	}
	if value, ok := ufuo.mutation.IsDel(); ok {
		_spec.SetField(upgradefile.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefile.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradefile.FieldCreateAt, field.TypeTime, value)
	}
	if ufuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefile.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefile.FieldUpdateAt, field.TypeTime, value)
	}
	if ufuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefile.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeFile{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
