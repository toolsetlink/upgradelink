// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradecompanyincome"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeCompanyIncomeCreate is the builder for creating a UpgradeCompanyIncome entity.
type UpgradeCompanyIncomeCreate struct {
	config
	mutation *UpgradeCompanyIncomeMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (ucic *UpgradeCompanyIncomeCreate) SetCompanyID(i int) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetCompanyID(i)
	return ucic
}

// SetIncomeType sets the "income_type" field.
func (ucic *UpgradeCompanyIncomeCreate) SetIncomeType(i int8) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetIncomeType(i)
	return ucic
}

// SetIncomeAmount sets the "income_amount" field.
func (ucic *UpgradeCompanyIncomeCreate) SetIncomeAmount(i int) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetIncomeAmount(i)
	return ucic
}

// SetIncomeTime sets the "income_time" field.
func (ucic *UpgradeCompanyIncomeCreate) SetIncomeTime(t time.Time) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetIncomeTime(t)
	return ucic
}

// SetNillableIncomeTime sets the "income_time" field if the given value is not nil.
func (ucic *UpgradeCompanyIncomeCreate) SetNillableIncomeTime(t *time.Time) *UpgradeCompanyIncomeCreate {
	if t != nil {
		ucic.SetIncomeTime(*t)
	}
	return ucic
}

// SetRemark sets the "remark" field.
func (ucic *UpgradeCompanyIncomeCreate) SetRemark(s string) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetRemark(s)
	return ucic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ucic *UpgradeCompanyIncomeCreate) SetNillableRemark(s *string) *UpgradeCompanyIncomeCreate {
	if s != nil {
		ucic.SetRemark(*s)
	}
	return ucic
}

// SetStatus sets the "status" field.
func (ucic *UpgradeCompanyIncomeCreate) SetStatus(i int32) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetStatus(i)
	return ucic
}

// SetIsDel sets the "is_del" field.
func (ucic *UpgradeCompanyIncomeCreate) SetIsDel(i int32) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetIsDel(i)
	return ucic
}

// SetCreateAt sets the "create_at" field.
func (ucic *UpgradeCompanyIncomeCreate) SetCreateAt(t time.Time) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetCreateAt(t)
	return ucic
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucic *UpgradeCompanyIncomeCreate) SetNillableCreateAt(t *time.Time) *UpgradeCompanyIncomeCreate {
	if t != nil {
		ucic.SetCreateAt(*t)
	}
	return ucic
}

// SetUpdateAt sets the "update_at" field.
func (ucic *UpgradeCompanyIncomeCreate) SetUpdateAt(t time.Time) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetUpdateAt(t)
	return ucic
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucic *UpgradeCompanyIncomeCreate) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyIncomeCreate {
	if t != nil {
		ucic.SetUpdateAt(*t)
	}
	return ucic
}

// SetID sets the "id" field.
func (ucic *UpgradeCompanyIncomeCreate) SetID(i int) *UpgradeCompanyIncomeCreate {
	ucic.mutation.SetID(i)
	return ucic
}

// Mutation returns the UpgradeCompanyIncomeMutation object of the builder.
func (ucic *UpgradeCompanyIncomeCreate) Mutation() *UpgradeCompanyIncomeMutation {
	return ucic.mutation
}

// Save creates the UpgradeCompanyIncome in the database.
func (ucic *UpgradeCompanyIncomeCreate) Save(ctx context.Context) (*UpgradeCompanyIncome, error) {
	return withHooks(ctx, ucic.sqlSave, ucic.mutation, ucic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucic *UpgradeCompanyIncomeCreate) SaveX(ctx context.Context) *UpgradeCompanyIncome {
	v, err := ucic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucic *UpgradeCompanyIncomeCreate) Exec(ctx context.Context) error {
	_, err := ucic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucic *UpgradeCompanyIncomeCreate) ExecX(ctx context.Context) {
	if err := ucic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucic *UpgradeCompanyIncomeCreate) check() error {
	if _, ok := ucic.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeCompanyIncome.company_id"`)}
	}
	if _, ok := ucic.mutation.IncomeType(); !ok {
		return &ValidationError{Name: "income_type", err: errors.New(`ent: missing required field "UpgradeCompanyIncome.income_type"`)}
	}
	if _, ok := ucic.mutation.IncomeAmount(); !ok {
		return &ValidationError{Name: "income_amount", err: errors.New(`ent: missing required field "UpgradeCompanyIncome.income_amount"`)}
	}
	if _, ok := ucic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UpgradeCompanyIncome.status"`)}
	}
	if _, ok := ucic.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeCompanyIncome.is_del"`)}
	}
	return nil
}

func (ucic *UpgradeCompanyIncomeCreate) sqlSave(ctx context.Context) (*UpgradeCompanyIncome, error) {
	if err := ucic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ucic.mutation.id = &_node.ID
	ucic.mutation.done = true
	return _node, nil
}

func (ucic *UpgradeCompanyIncomeCreate) createSpec() (*UpgradeCompanyIncome, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeCompanyIncome{config: ucic.config}
		_spec = sqlgraph.NewCreateSpec(upgradecompanyincome.Table, sqlgraph.NewFieldSpec(upgradecompanyincome.FieldID, field.TypeInt))
	)
	if id, ok := ucic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ucic.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanyincome.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := ucic.mutation.IncomeType(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeType, field.TypeInt8, value)
		_node.IncomeType = value
	}
	if value, ok := ucic.mutation.IncomeAmount(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeAmount, field.TypeInt, value)
		_node.IncomeAmount = value
	}
	if value, ok := ucic.mutation.IncomeTime(); ok {
		_spec.SetField(upgradecompanyincome.FieldIncomeTime, field.TypeTime, value)
		_node.IncomeTime = value
	}
	if value, ok := ucic.mutation.Remark(); ok {
		_spec.SetField(upgradecompanyincome.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ucic.mutation.Status(); ok {
		_spec.SetField(upgradecompanyincome.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := ucic.mutation.IsDel(); ok {
		_spec.SetField(upgradecompanyincome.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := ucic.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := ucic.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanyincome.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeCompanyIncomeCreateBulk is the builder for creating many UpgradeCompanyIncome entities in bulk.
type UpgradeCompanyIncomeCreateBulk struct {
	config
	err      error
	builders []*UpgradeCompanyIncomeCreate
}

// Save creates the UpgradeCompanyIncome entities in the database.
func (ucicb *UpgradeCompanyIncomeCreateBulk) Save(ctx context.Context) ([]*UpgradeCompanyIncome, error) {
	if ucicb.err != nil {
		return nil, ucicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucicb.builders))
	nodes := make([]*UpgradeCompanyIncome, len(ucicb.builders))
	mutators := make([]Mutator, len(ucicb.builders))
	for i := range ucicb.builders {
		func(i int, root context.Context) {
			builder := ucicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeCompanyIncomeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucicb *UpgradeCompanyIncomeCreateBulk) SaveX(ctx context.Context) []*UpgradeCompanyIncome {
	v, err := ucicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucicb *UpgradeCompanyIncomeCreateBulk) Exec(ctx context.Context) error {
	_, err := ucicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucicb *UpgradeCompanyIncomeCreateBulk) ExecX(ctx context.Context) {
	if err := ucicb.Exec(ctx); err != nil {
		panic(err)
	}
}
