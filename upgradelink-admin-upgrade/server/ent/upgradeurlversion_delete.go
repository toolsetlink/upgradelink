// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeurlversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlVersionDelete is the builder for deleting a UpgradeUrlVersion entity.
type UpgradeUrlVersionDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlVersionMutation
}

// Where appends a list predicates to the UpgradeUrlVersionDelete builder.
func (uuvd *UpgradeUrlVersionDelete) Where(ps ...predicate.UpgradeUrlVersion) *UpgradeUrlVersionDelete {
	uuvd.mutation.Where(ps...)
	return uuvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uuvd *UpgradeUrlVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uuvd.sqlExec, uuvd.mutation, uuvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uuvd *UpgradeUrlVersionDelete) ExecX(ctx context.Context) int {
	n, err := uuvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uuvd *UpgradeUrlVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeurlversion.Table, sqlgraph.NewFieldSpec(upgradeurlversion.FieldID, field.TypeInt))
	if ps := uuvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uuvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uuvd.mutation.done = true
	return affected, err
}

// UpgradeUrlVersionDeleteOne is the builder for deleting a single UpgradeUrlVersion entity.
type UpgradeUrlVersionDeleteOne struct {
	uuvd *UpgradeUrlVersionDelete
}

// Where appends a list predicates to the UpgradeUrlVersionDelete builder.
func (uuvdo *UpgradeUrlVersionDeleteOne) Where(ps ...predicate.UpgradeUrlVersion) *UpgradeUrlVersionDeleteOne {
	uuvdo.uuvd.mutation.Where(ps...)
	return uuvdo
}

// Exec executes the deletion query.
func (uuvdo *UpgradeUrlVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := uuvdo.uuvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeurlversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uuvdo *UpgradeUrlVersionDeleteOne) ExecX(ctx context.Context) {
	if err := uuvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
