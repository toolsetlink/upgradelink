// Code generated by ent, DO NOT EDIT.

package upgradeappdownloadreportlog

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldID, id))
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldCompanyID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldTimestamp, v))
}

// AppKey applies equality check predicate on the "app_key" field. It's identical to AppKeyEQ.
func AppKey(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppKey, v))
}

// AppVersionID applies equality check predicate on the "app_version_id" field. It's identical to AppVersionIDEQ.
func AppVersionID(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionID, v))
}

// AppVersionCode applies equality check predicate on the "app_version_code" field. It's identical to AppVersionCodeEQ.
func AppVersionCode(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionCode, v))
}

// AppVersionTarget applies equality check predicate on the "app_version_target" field. It's identical to AppVersionTargetEQ.
func AppVersionTarget(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionTarget, v))
}

// AppVersionArch applies equality check predicate on the "app_version_arch" field. It's identical to AppVersionArchEQ.
func AppVersionArch(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionArch, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldCreateAt, v))
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldCompanyID, v))
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldCompanyID, v))
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldCompanyID, vs...))
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldCompanyID, vs...))
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldCompanyID, v))
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldCompanyID, v))
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldCompanyID, v))
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldCompanyID, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldTimestamp, v))
}

// TimestampIsNil applies the IsNil predicate on the "timestamp" field.
func TimestampIsNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIsNull(FieldTimestamp))
}

// TimestampNotNil applies the NotNil predicate on the "timestamp" field.
func TimestampNotNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotNull(FieldTimestamp))
}

// AppKeyEQ applies the EQ predicate on the "app_key" field.
func AppKeyEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppKey, v))
}

// AppKeyNEQ applies the NEQ predicate on the "app_key" field.
func AppKeyNEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldAppKey, v))
}

// AppKeyIn applies the In predicate on the "app_key" field.
func AppKeyIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldAppKey, vs...))
}

// AppKeyNotIn applies the NotIn predicate on the "app_key" field.
func AppKeyNotIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldAppKey, vs...))
}

// AppKeyGT applies the GT predicate on the "app_key" field.
func AppKeyGT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldAppKey, v))
}

// AppKeyGTE applies the GTE predicate on the "app_key" field.
func AppKeyGTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldAppKey, v))
}

// AppKeyLT applies the LT predicate on the "app_key" field.
func AppKeyLT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldAppKey, v))
}

// AppKeyLTE applies the LTE predicate on the "app_key" field.
func AppKeyLTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldAppKey, v))
}

// AppKeyContains applies the Contains predicate on the "app_key" field.
func AppKeyContains(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContains(FieldAppKey, v))
}

// AppKeyHasPrefix applies the HasPrefix predicate on the "app_key" field.
func AppKeyHasPrefix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasPrefix(FieldAppKey, v))
}

// AppKeyHasSuffix applies the HasSuffix predicate on the "app_key" field.
func AppKeyHasSuffix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasSuffix(FieldAppKey, v))
}

// AppKeyEqualFold applies the EqualFold predicate on the "app_key" field.
func AppKeyEqualFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEqualFold(FieldAppKey, v))
}

// AppKeyContainsFold applies the ContainsFold predicate on the "app_key" field.
func AppKeyContainsFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContainsFold(FieldAppKey, v))
}

// AppVersionIDEQ applies the EQ predicate on the "app_version_id" field.
func AppVersionIDEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionID, v))
}

// AppVersionIDNEQ applies the NEQ predicate on the "app_version_id" field.
func AppVersionIDNEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldAppVersionID, v))
}

// AppVersionIDIn applies the In predicate on the "app_version_id" field.
func AppVersionIDIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldAppVersionID, vs...))
}

// AppVersionIDNotIn applies the NotIn predicate on the "app_version_id" field.
func AppVersionIDNotIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldAppVersionID, vs...))
}

// AppVersionIDGT applies the GT predicate on the "app_version_id" field.
func AppVersionIDGT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldAppVersionID, v))
}

// AppVersionIDGTE applies the GTE predicate on the "app_version_id" field.
func AppVersionIDGTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldAppVersionID, v))
}

// AppVersionIDLT applies the LT predicate on the "app_version_id" field.
func AppVersionIDLT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldAppVersionID, v))
}

// AppVersionIDLTE applies the LTE predicate on the "app_version_id" field.
func AppVersionIDLTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldAppVersionID, v))
}

// AppVersionCodeEQ applies the EQ predicate on the "app_version_code" field.
func AppVersionCodeEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionCode, v))
}

// AppVersionCodeNEQ applies the NEQ predicate on the "app_version_code" field.
func AppVersionCodeNEQ(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldAppVersionCode, v))
}

// AppVersionCodeIn applies the In predicate on the "app_version_code" field.
func AppVersionCodeIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldAppVersionCode, vs...))
}

// AppVersionCodeNotIn applies the NotIn predicate on the "app_version_code" field.
func AppVersionCodeNotIn(vs ...int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldAppVersionCode, vs...))
}

// AppVersionCodeGT applies the GT predicate on the "app_version_code" field.
func AppVersionCodeGT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldAppVersionCode, v))
}

// AppVersionCodeGTE applies the GTE predicate on the "app_version_code" field.
func AppVersionCodeGTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldAppVersionCode, v))
}

// AppVersionCodeLT applies the LT predicate on the "app_version_code" field.
func AppVersionCodeLT(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldAppVersionCode, v))
}

// AppVersionCodeLTE applies the LTE predicate on the "app_version_code" field.
func AppVersionCodeLTE(v int) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldAppVersionCode, v))
}

// AppVersionTargetEQ applies the EQ predicate on the "app_version_target" field.
func AppVersionTargetEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionTarget, v))
}

// AppVersionTargetNEQ applies the NEQ predicate on the "app_version_target" field.
func AppVersionTargetNEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldAppVersionTarget, v))
}

// AppVersionTargetIn applies the In predicate on the "app_version_target" field.
func AppVersionTargetIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldAppVersionTarget, vs...))
}

// AppVersionTargetNotIn applies the NotIn predicate on the "app_version_target" field.
func AppVersionTargetNotIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldAppVersionTarget, vs...))
}

// AppVersionTargetGT applies the GT predicate on the "app_version_target" field.
func AppVersionTargetGT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldAppVersionTarget, v))
}

// AppVersionTargetGTE applies the GTE predicate on the "app_version_target" field.
func AppVersionTargetGTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldAppVersionTarget, v))
}

// AppVersionTargetLT applies the LT predicate on the "app_version_target" field.
func AppVersionTargetLT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldAppVersionTarget, v))
}

// AppVersionTargetLTE applies the LTE predicate on the "app_version_target" field.
func AppVersionTargetLTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldAppVersionTarget, v))
}

// AppVersionTargetContains applies the Contains predicate on the "app_version_target" field.
func AppVersionTargetContains(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContains(FieldAppVersionTarget, v))
}

// AppVersionTargetHasPrefix applies the HasPrefix predicate on the "app_version_target" field.
func AppVersionTargetHasPrefix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasPrefix(FieldAppVersionTarget, v))
}

// AppVersionTargetHasSuffix applies the HasSuffix predicate on the "app_version_target" field.
func AppVersionTargetHasSuffix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasSuffix(FieldAppVersionTarget, v))
}

// AppVersionTargetIsNil applies the IsNil predicate on the "app_version_target" field.
func AppVersionTargetIsNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIsNull(FieldAppVersionTarget))
}

// AppVersionTargetNotNil applies the NotNil predicate on the "app_version_target" field.
func AppVersionTargetNotNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotNull(FieldAppVersionTarget))
}

// AppVersionTargetEqualFold applies the EqualFold predicate on the "app_version_target" field.
func AppVersionTargetEqualFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEqualFold(FieldAppVersionTarget, v))
}

// AppVersionTargetContainsFold applies the ContainsFold predicate on the "app_version_target" field.
func AppVersionTargetContainsFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContainsFold(FieldAppVersionTarget, v))
}

// AppVersionArchEQ applies the EQ predicate on the "app_version_arch" field.
func AppVersionArchEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldAppVersionArch, v))
}

// AppVersionArchNEQ applies the NEQ predicate on the "app_version_arch" field.
func AppVersionArchNEQ(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldAppVersionArch, v))
}

// AppVersionArchIn applies the In predicate on the "app_version_arch" field.
func AppVersionArchIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldAppVersionArch, vs...))
}

// AppVersionArchNotIn applies the NotIn predicate on the "app_version_arch" field.
func AppVersionArchNotIn(vs ...string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldAppVersionArch, vs...))
}

// AppVersionArchGT applies the GT predicate on the "app_version_arch" field.
func AppVersionArchGT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldAppVersionArch, v))
}

// AppVersionArchGTE applies the GTE predicate on the "app_version_arch" field.
func AppVersionArchGTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldAppVersionArch, v))
}

// AppVersionArchLT applies the LT predicate on the "app_version_arch" field.
func AppVersionArchLT(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldAppVersionArch, v))
}

// AppVersionArchLTE applies the LTE predicate on the "app_version_arch" field.
func AppVersionArchLTE(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldAppVersionArch, v))
}

// AppVersionArchContains applies the Contains predicate on the "app_version_arch" field.
func AppVersionArchContains(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContains(FieldAppVersionArch, v))
}

// AppVersionArchHasPrefix applies the HasPrefix predicate on the "app_version_arch" field.
func AppVersionArchHasPrefix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasPrefix(FieldAppVersionArch, v))
}

// AppVersionArchHasSuffix applies the HasSuffix predicate on the "app_version_arch" field.
func AppVersionArchHasSuffix(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldHasSuffix(FieldAppVersionArch, v))
}

// AppVersionArchIsNil applies the IsNil predicate on the "app_version_arch" field.
func AppVersionArchIsNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIsNull(FieldAppVersionArch))
}

// AppVersionArchNotNil applies the NotNil predicate on the "app_version_arch" field.
func AppVersionArchNotNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotNull(FieldAppVersionArch))
}

// AppVersionArchEqualFold applies the EqualFold predicate on the "app_version_arch" field.
func AppVersionArchEqualFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEqualFold(FieldAppVersionArch, v))
}

// AppVersionArchContainsFold applies the ContainsFold predicate on the "app_version_arch" field.
func AppVersionArchContainsFold(v string) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldContainsFold(FieldAppVersionArch, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.FieldNotNull(FieldCreateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeAppDownloadReportLog) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeAppDownloadReportLog) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeAppDownloadReportLog) predicate.UpgradeAppDownloadReportLog {
	return predicate.UpgradeAppDownloadReportLog(sql.NotPredicates(p))
}
