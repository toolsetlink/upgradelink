// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategygraystrategy"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeConfigurationUpgradeStrategyGrayStrategy is the model entity for the UpgradeConfigurationUpgradeStrategyGrayStrategy schema.
type UpgradeConfigurationUpgradeStrategyGrayStrategy struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 是否生效；可通过此控制策略是否生效0：失效；1：生效
	Enable int32 `json:"enable,omitempty"`
	// 任务开始时间
	BeginDatetime time.Time `json:"begin_datetime,omitempty"`
	// 任务结束时间
	EndDatetime time.Time `json:"end_datetime,omitempty"`
	// 数量限制
	Limit int `json:"limit,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeConfigurationUpgradeStrategyGrayStrategy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeconfigurationupgradestrategygraystrategy.FieldID, upgradeconfigurationupgradestrategygraystrategy.FieldEnable, upgradeconfigurationupgradestrategygraystrategy.FieldLimit, upgradeconfigurationupgradestrategygraystrategy.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeconfigurationupgradestrategygraystrategy.FieldBeginDatetime, upgradeconfigurationupgradestrategygraystrategy.FieldEndDatetime, upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt, upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeConfigurationUpgradeStrategyGrayStrategy fields.
func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeconfigurationupgradestrategygraystrategy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucusgs.ID = int(value.Int64)
		case upgradeconfigurationupgradestrategygraystrategy.FieldEnable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				ucusgs.Enable = int32(value.Int64)
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldBeginDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_datetime", values[i])
			} else if value.Valid {
				ucusgs.BeginDatetime = value.Time
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldEndDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_datetime", values[i])
			} else if value.Valid {
				ucusgs.EndDatetime = value.Time
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit", values[i])
			} else if value.Valid {
				ucusgs.Limit = int(value.Int64)
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				ucusgs.IsDel = int32(value.Int64)
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ucusgs.CreateAt = value.Time
			}
		case upgradeconfigurationupgradestrategygraystrategy.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ucusgs.UpdateAt = value.Time
			}
		default:
			ucusgs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeConfigurationUpgradeStrategyGrayStrategy.
// This includes values selected through modifiers, order, etc.
func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) Value(name string) (ent.Value, error) {
	return ucusgs.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeConfigurationUpgradeStrategyGrayStrategy.
// Note that you need to call UpgradeConfigurationUpgradeStrategyGrayStrategy.Unwrap() before calling this method if this UpgradeConfigurationUpgradeStrategyGrayStrategy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) Update() *UpgradeConfigurationUpgradeStrategyGrayStrategyUpdateOne {
	return NewUpgradeConfigurationUpgradeStrategyGrayStrategyClient(ucusgs.config).UpdateOne(ucusgs)
}

// Unwrap unwraps the UpgradeConfigurationUpgradeStrategyGrayStrategy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) Unwrap() *UpgradeConfigurationUpgradeStrategyGrayStrategy {
	_tx, ok := ucusgs.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeConfigurationUpgradeStrategyGrayStrategy is not a transactional entity")
	}
	ucusgs.config.driver = _tx.drv
	return ucusgs
}

// String implements the fmt.Stringer.
func (ucusgs *UpgradeConfigurationUpgradeStrategyGrayStrategy) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeConfigurationUpgradeStrategyGrayStrategy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ucusgs.ID))
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", ucusgs.Enable))
	builder.WriteString(", ")
	builder.WriteString("begin_datetime=")
	builder.WriteString(ucusgs.BeginDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_datetime=")
	builder.WriteString(ucusgs.EndDatetime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("limit=")
	builder.WriteString(fmt.Sprintf("%v", ucusgs.Limit))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", ucusgs.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ucusgs.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ucusgs.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeConfigurationUpgradeStrategyGrayStrategies is a parsable slice of UpgradeConfigurationUpgradeStrategyGrayStrategy.
type UpgradeConfigurationUpgradeStrategyGrayStrategies []*UpgradeConfigurationUpgradeStrategyGrayStrategy
