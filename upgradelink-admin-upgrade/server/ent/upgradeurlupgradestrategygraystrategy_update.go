// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeUrlUpgradeStrategyGrayStrategy entities.
type UpgradeUrlUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyGrayStrategyUpdate builder.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeUrlUpgradeStrategyGrayStrategy) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.Where(ps...)
	return uuusgsu
}

// SetEnable sets the "enable" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.ResetEnable()
	uuusgsu.mutation.SetEnable(i)
	return uuusgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uuusgsu.SetEnable(*i)
	}
	return uuusgsu
}

// AddEnable adds i to the "enable" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.AddEnable(i)
	return uuusgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.SetBeginDatetime(t)
	return uuusgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uuusgsu.SetBeginDatetime(*t)
	}
	return uuusgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.SetEndDatetime(t)
	return uuusgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uuusgsu.SetEndDatetime(*t)
	}
	return uuusgsu
}

// SetLimit sets the "limit" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.ResetLimit()
	uuusgsu.mutation.SetLimit(i)
	return uuusgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uuusgsu.SetLimit(*i)
	}
	return uuusgsu
}

// AddLimit adds i to the "limit" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.AddLimit(i)
	return uuusgsu
}

// SetIsDel sets the "is_del" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.ResetIsDel()
	uuusgsu.mutation.SetIsDel(i)
	return uuusgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uuusgsu.SetIsDel(*i)
	}
	return uuusgsu
}

// AddIsDel adds i to the "is_del" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.AddIsDel(i)
	return uuusgsu
}

// SetCreateAt sets the "create_at" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.SetCreateAt(t)
	return uuusgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uuusgsu.SetCreateAt(*t)
	}
	return uuusgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.ClearCreateAt()
	return uuusgsu
}

// SetUpdateAt sets the "update_at" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.SetUpdateAt(t)
	return uuusgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uuusgsu.SetUpdateAt(*t)
	}
	return uuusgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeUrlUpgradeStrategyGrayStrategyUpdate {
	uuusgsu.mutation.ClearUpdateAt()
	return uuusgsu
}

// Mutation returns the UpgradeUrlUpgradeStrategyGrayStrategyMutation object of the builder.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeUrlUpgradeStrategyGrayStrategyMutation {
	return uuusgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuusgsu.sqlSave, uuusgsu.mutation, uuusgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uuusgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uuusgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := uuusgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusgsu *UpgradeUrlUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategygraystrategy.Table, upgradeurlupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := uuusgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusgsu.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uuusgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uuusgsu.mutation.Limit(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuusgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuusgsu.mutation.done = true
	return n, nil
}

// UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeUrlUpgradeStrategyGrayStrategy entity.
type UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.ResetEnable()
	uuusgsuo.mutation.SetEnable(i)
	return uuusgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uuusgsuo.SetEnable(*i)
	}
	return uuusgsuo
}

// AddEnable adds i to the "enable" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.AddEnable(i)
	return uuusgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.SetBeginDatetime(t)
	return uuusgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uuusgsuo.SetBeginDatetime(*t)
	}
	return uuusgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.SetEndDatetime(t)
	return uuusgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uuusgsuo.SetEndDatetime(*t)
	}
	return uuusgsuo
}

// SetLimit sets the "limit" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.ResetLimit()
	uuusgsuo.mutation.SetLimit(i)
	return uuusgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uuusgsuo.SetLimit(*i)
	}
	return uuusgsuo
}

// AddLimit adds i to the "limit" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.AddLimit(i)
	return uuusgsuo
}

// SetIsDel sets the "is_del" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.ResetIsDel()
	uuusgsuo.mutation.SetIsDel(i)
	return uuusgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uuusgsuo.SetIsDel(*i)
	}
	return uuusgsuo
}

// AddIsDel adds i to the "is_del" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.AddIsDel(i)
	return uuusgsuo
}

// SetCreateAt sets the "create_at" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.SetCreateAt(t)
	return uuusgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uuusgsuo.SetCreateAt(*t)
	}
	return uuusgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.ClearCreateAt()
	return uuusgsuo
}

// SetUpdateAt sets the "update_at" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.SetUpdateAt(t)
	return uuusgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uuusgsuo.SetUpdateAt(*t)
	}
	return uuusgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.ClearUpdateAt()
	return uuusgsuo
}

// Mutation returns the UpgradeUrlUpgradeStrategyGrayStrategyMutation object of the builder.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeUrlUpgradeStrategyGrayStrategyMutation {
	return uuusgsuo.mutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyGrayStrategyUpdate builder.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeUrlUpgradeStrategyGrayStrategy) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.mutation.Where(ps...)
	return uuusgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne {
	uuusgsuo.fields = append([]string{field}, fields...)
	return uuusgsuo
}

// Save executes the query and returns the updated UpgradeUrlUpgradeStrategyGrayStrategy entity.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeUrlUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, uuusgsuo.sqlSave, uuusgsuo.mutation, uuusgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeUrlUpgradeStrategyGrayStrategy {
	node, err := uuusgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uuusgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uuusgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusgsuo *UpgradeUrlUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeUrlUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategygraystrategy.Table, upgradeurlupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := uuusgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeUrlUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuusgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeurlupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradeurlupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeurlupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuusgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uuusgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uuusgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeUrlUpgradeStrategyGrayStrategy{config: uuusgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuusgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuusgsuo.mutation.done = true
	return _node, nil
}
