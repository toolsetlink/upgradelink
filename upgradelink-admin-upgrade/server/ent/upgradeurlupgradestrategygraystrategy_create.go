// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpgradeStrategyGrayStrategyCreate is the builder for creating a UpgradeUrlUpgradeStrategyGrayStrategy entity.
type UpgradeUrlUpgradeStrategyGrayStrategyCreate struct {
	config
	mutation *UpgradeUrlUpgradeStrategyGrayStrategyMutation
	hooks    []Hook
}

// SetEnable sets the "enable" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetEnable(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetEnable(i)
	return uuusgsc
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetBeginDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetBeginDatetime(t)
	return uuusgsc
}

// SetEndDatetime sets the "end_datetime" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetEndDatetime(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetEndDatetime(t)
	return uuusgsc
}

// SetLimit sets the "limit" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetLimit(i int) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetLimit(i)
	return uuusgsc
}

// SetIsDel sets the "is_del" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetIsDel(i)
	return uuusgsc
}

// SetCreateAt sets the "create_at" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetCreateAt(t)
	return uuusgsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	if t != nil {
		uuusgsc.SetCreateAt(*t)
	}
	return uuusgsc
}

// SetUpdateAt sets the "update_at" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetUpdateAt(t)
	return uuusgsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	if t != nil {
		uuusgsc.SetUpdateAt(*t)
	}
	return uuusgsc
}

// SetID sets the "id" field.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SetID(i int) *UpgradeUrlUpgradeStrategyGrayStrategyCreate {
	uuusgsc.mutation.SetID(i)
	return uuusgsc
}

// Mutation returns the UpgradeUrlUpgradeStrategyGrayStrategyMutation object of the builder.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) Mutation() *UpgradeUrlUpgradeStrategyGrayStrategyMutation {
	return uuusgsc.mutation
}

// Save creates the UpgradeUrlUpgradeStrategyGrayStrategy in the database.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) Save(ctx context.Context) (*UpgradeUrlUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, uuusgsc.sqlSave, uuusgsc.mutation, uuusgsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) SaveX(ctx context.Context) *UpgradeUrlUpgradeStrategyGrayStrategy {
	v, err := uuusgsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) Exec(ctx context.Context) error {
	_, err := uuusgsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) ExecX(ctx context.Context) {
	if err := uuusgsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) check() error {
	if _, ok := uuusgsc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "UpgradeUrlUpgradeStrategyGrayStrategy.enable"`)}
	}
	if _, ok := uuusgsc.mutation.BeginDatetime(); !ok {
		return &ValidationError{Name: "begin_datetime", err: errors.New(`ent: missing required field "UpgradeUrlUpgradeStrategyGrayStrategy.begin_datetime"`)}
	}
	if _, ok := uuusgsc.mutation.EndDatetime(); !ok {
		return &ValidationError{Name: "end_datetime", err: errors.New(`ent: missing required field "UpgradeUrlUpgradeStrategyGrayStrategy.end_datetime"`)}
	}
	if _, ok := uuusgsc.mutation.Limit(); !ok {
		return &ValidationError{Name: "limit", err: errors.New(`ent: missing required field "UpgradeUrlUpgradeStrategyGrayStrategy.limit"`)}
	}
	if _, ok := uuusgsc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeUrlUpgradeStrategyGrayStrategy.is_del"`)}
	}
	return nil
}

func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) sqlSave(ctx context.Context) (*UpgradeUrlUpgradeStrategyGrayStrategy, error) {
	if err := uuusgsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uuusgsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uuusgsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uuusgsc.mutation.id = &_node.ID
	uuusgsc.mutation.done = true
	return _node, nil
}

func (uuusgsc *UpgradeUrlUpgradeStrategyGrayStrategyCreate) createSpec() (*UpgradeUrlUpgradeStrategyGrayStrategy, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeUrlUpgradeStrategyGrayStrategy{config: uuusgsc.config}
		_spec = sqlgraph.NewCreateSpec(upgradeurlupgradestrategygraystrategy.Table, sqlgraph.NewFieldSpec(upgradeurlupgradestrategygraystrategy.FieldID, field.TypeInt))
	)
	if id, ok := uuusgsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uuusgsc.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
		_node.Enable = value
	}
	if value, ok := uuusgsc.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
		_node.BeginDatetime = value
	}
	if value, ok := uuusgsc.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
		_node.EndDatetime = value
	}
	if value, ok := uuusgsc.mutation.Limit(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
		_node.Limit = value
	}
	if value, ok := uuusgsc.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := uuusgsc.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := uuusgsc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk is the builder for creating many UpgradeUrlUpgradeStrategyGrayStrategy entities in bulk.
type UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk struct {
	config
	err      error
	builders []*UpgradeUrlUpgradeStrategyGrayStrategyCreate
}

// Save creates the UpgradeUrlUpgradeStrategyGrayStrategy entities in the database.
func (uuusgscb *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk) Save(ctx context.Context) ([]*UpgradeUrlUpgradeStrategyGrayStrategy, error) {
	if uuusgscb.err != nil {
		return nil, uuusgscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uuusgscb.builders))
	nodes := make([]*UpgradeUrlUpgradeStrategyGrayStrategy, len(uuusgscb.builders))
	mutators := make([]Mutator, len(uuusgscb.builders))
	for i := range uuusgscb.builders {
		func(i int, root context.Context) {
			builder := uuusgscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeUrlUpgradeStrategyGrayStrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uuusgscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uuusgscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uuusgscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uuusgscb *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk) SaveX(ctx context.Context) []*UpgradeUrlUpgradeStrategyGrayStrategy {
	v, err := uuusgscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uuusgscb *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := uuusgscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusgscb *UpgradeUrlUpgradeStrategyGrayStrategyCreateBulk) ExecX(ctx context.Context) {
	if err := uuusgscb.Exec(ctx); err != nil {
		panic(err)
	}
}
