// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserMutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetCreatedAt sets the "created_at" field.
func (suu *SysUserUpdate) SetCreatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetCreatedAt(t)
	return suu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableCreatedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetCreatedAt(*t)
	}
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SysUserUpdate) SetUpdatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUpdatedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetUpdatedAt(*t)
	}
	return suu
}

// SetStatus sets the "status" field.
func (suu *SysUserUpdate) SetStatus(u uint8) *SysUserUpdate {
	suu.mutation.ResetStatus()
	suu.mutation.SetStatus(u)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableStatus(u *uint8) *SysUserUpdate {
	if u != nil {
		suu.SetStatus(*u)
	}
	return suu
}

// AddStatus adds u to the "status" field.
func (suu *SysUserUpdate) AddStatus(u int8) *SysUserUpdate {
	suu.mutation.AddStatus(u)
	return suu
}

// ClearStatus clears the value of the "status" field.
func (suu *SysUserUpdate) ClearStatus() *SysUserUpdate {
	suu.mutation.ClearStatus()
	return suu
}

// SetDeletedAt sets the "deleted_at" field.
func (suu *SysUserUpdate) SetDeletedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetDeletedAt(t)
	return suu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeletedAt(t *time.Time) *SysUserUpdate {
	if t != nil {
		suu.SetDeletedAt(*t)
	}
	return suu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suu *SysUserUpdate) ClearDeletedAt() *SysUserUpdate {
	suu.mutation.ClearDeletedAt()
	return suu
}

// SetUsername sets the "username" field.
func (suu *SysUserUpdate) SetUsername(s string) *SysUserUpdate {
	suu.mutation.SetUsername(s)
	return suu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUsername(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUsername(*s)
	}
	return suu
}

// SetPassword sets the "password" field.
func (suu *SysUserUpdate) SetPassword(s string) *SysUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePassword(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPassword(*s)
	}
	return suu
}

// SetNickname sets the "nickname" field.
func (suu *SysUserUpdate) SetNickname(s string) *SysUserUpdate {
	suu.mutation.SetNickname(s)
	return suu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableNickname(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetNickname(*s)
	}
	return suu
}

// SetDescription sets the "description" field.
func (suu *SysUserUpdate) SetDescription(s string) *SysUserUpdate {
	suu.mutation.SetDescription(s)
	return suu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDescription(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetDescription(*s)
	}
	return suu
}

// ClearDescription clears the value of the "description" field.
func (suu *SysUserUpdate) ClearDescription() *SysUserUpdate {
	suu.mutation.ClearDescription()
	return suu
}

// SetHomePath sets the "home_path" field.
func (suu *SysUserUpdate) SetHomePath(s string) *SysUserUpdate {
	suu.mutation.SetHomePath(s)
	return suu
}

// SetNillableHomePath sets the "home_path" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableHomePath(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetHomePath(*s)
	}
	return suu
}

// SetMobile sets the "mobile" field.
func (suu *SysUserUpdate) SetMobile(s string) *SysUserUpdate {
	suu.mutation.SetMobile(s)
	return suu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableMobile(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetMobile(*s)
	}
	return suu
}

// ClearMobile clears the value of the "mobile" field.
func (suu *SysUserUpdate) ClearMobile() *SysUserUpdate {
	suu.mutation.ClearMobile()
	return suu
}

// SetEmail sets the "email" field.
func (suu *SysUserUpdate) SetEmail(s string) *SysUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// ClearEmail clears the value of the "email" field.
func (suu *SysUserUpdate) ClearEmail() *SysUserUpdate {
	suu.mutation.ClearEmail()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SysUserUpdate) ClearAvatar() *SysUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetDepartmentID sets the "department_id" field.
func (suu *SysUserUpdate) SetDepartmentID(u uint64) *SysUserUpdate {
	suu.mutation.ResetDepartmentID()
	suu.mutation.SetDepartmentID(u)
	return suu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDepartmentID(u *uint64) *SysUserUpdate {
	if u != nil {
		suu.SetDepartmentID(*u)
	}
	return suu
}

// AddDepartmentID adds u to the "department_id" field.
func (suu *SysUserUpdate) AddDepartmentID(u int64) *SysUserUpdate {
	suu.mutation.AddDepartmentID(u)
	return suu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (suu *SysUserUpdate) ClearDepartmentID() *SysUserUpdate {
	suu.mutation.ClearDepartmentID()
	return suu
}

// SetCompanyID sets the "company_id" field.
func (suu *SysUserUpdate) SetCompanyID(u uint64) *SysUserUpdate {
	suu.mutation.ResetCompanyID()
	suu.mutation.SetCompanyID(u)
	return suu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableCompanyID(u *uint64) *SysUserUpdate {
	if u != nil {
		suu.SetCompanyID(*u)
	}
	return suu
}

// AddCompanyID adds u to the "company_id" field.
func (suu *SysUserUpdate) AddCompanyID(u int64) *SysUserUpdate {
	suu.mutation.AddCompanyID(u)
	return suu
}

// ClearCompanyID clears the value of the "company_id" field.
func (suu *SysUserUpdate) ClearCompanyID() *SysUserUpdate {
	suu.mutation.ClearCompanyID()
	return suu
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suu.mutation.AddedStatus(); ok {
		_spec.AddField(sysuser.FieldStatus, field.TypeUint8, value)
	}
	if suu.mutation.StatusCleared() {
		_spec.ClearField(sysuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := suu.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suu.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suu.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suu.mutation.Nickname(); ok {
		_spec.SetField(sysuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := suu.mutation.Description(); ok {
		_spec.SetField(sysuser.FieldDescription, field.TypeString, value)
	}
	if suu.mutation.DescriptionCleared() {
		_spec.ClearField(sysuser.FieldDescription, field.TypeString)
	}
	if value, ok := suu.mutation.HomePath(); ok {
		_spec.SetField(sysuser.FieldHomePath, field.TypeString, value)
	}
	if value, ok := suu.mutation.Mobile(); ok {
		_spec.SetField(sysuser.FieldMobile, field.TypeString, value)
	}
	if suu.mutation.MobileCleared() {
		_spec.ClearField(sysuser.FieldMobile, field.TypeString)
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if suu.mutation.EmailCleared() {
		_spec.ClearField(sysuser.FieldEmail, field.TypeString)
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suu.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suu.mutation.DepartmentID(); ok {
		_spec.SetField(sysuser.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := suu.mutation.AddedDepartmentID(); ok {
		_spec.AddField(sysuser.FieldDepartmentID, field.TypeUint64, value)
	}
	if suu.mutation.DepartmentIDCleared() {
		_spec.ClearField(sysuser.FieldDepartmentID, field.TypeUint64)
	}
	if value, ok := suu.mutation.CompanyID(); ok {
		_spec.SetField(sysuser.FieldCompanyID, field.TypeUint64, value)
	}
	if value, ok := suu.mutation.AddedCompanyID(); ok {
		_spec.AddField(sysuser.FieldCompanyID, field.TypeUint64, value)
	}
	if suu.mutation.CompanyIDCleared() {
		_spec.ClearField(sysuser.FieldCompanyID, field.TypeUint64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserMutation
}

// SetCreatedAt sets the "created_at" field.
func (suuo *SysUserUpdateOne) SetCreatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetCreatedAt(t)
	return suuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableCreatedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetCreatedAt(*t)
	}
	return suuo
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUpdatedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetUpdatedAt(*t)
	}
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *SysUserUpdateOne) SetStatus(u uint8) *SysUserUpdateOne {
	suuo.mutation.ResetStatus()
	suuo.mutation.SetStatus(u)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableStatus(u *uint8) *SysUserUpdateOne {
	if u != nil {
		suuo.SetStatus(*u)
	}
	return suuo
}

// AddStatus adds u to the "status" field.
func (suuo *SysUserUpdateOne) AddStatus(u int8) *SysUserUpdateOne {
	suuo.mutation.AddStatus(u)
	return suuo
}

// ClearStatus clears the value of the "status" field.
func (suuo *SysUserUpdateOne) ClearStatus() *SysUserUpdateOne {
	suuo.mutation.ClearStatus()
	return suuo
}

// SetDeletedAt sets the "deleted_at" field.
func (suuo *SysUserUpdateOne) SetDeletedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetDeletedAt(t)
	return suuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeletedAt(t *time.Time) *SysUserUpdateOne {
	if t != nil {
		suuo.SetDeletedAt(*t)
	}
	return suuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suuo *SysUserUpdateOne) ClearDeletedAt() *SysUserUpdateOne {
	suuo.mutation.ClearDeletedAt()
	return suuo
}

// SetUsername sets the "username" field.
func (suuo *SysUserUpdateOne) SetUsername(s string) *SysUserUpdateOne {
	suuo.mutation.SetUsername(s)
	return suuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUsername(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUsername(*s)
	}
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *SysUserUpdateOne) SetPassword(s string) *SysUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePassword(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPassword(*s)
	}
	return suuo
}

// SetNickname sets the "nickname" field.
func (suuo *SysUserUpdateOne) SetNickname(s string) *SysUserUpdateOne {
	suuo.mutation.SetNickname(s)
	return suuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableNickname(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetNickname(*s)
	}
	return suuo
}

// SetDescription sets the "description" field.
func (suuo *SysUserUpdateOne) SetDescription(s string) *SysUserUpdateOne {
	suuo.mutation.SetDescription(s)
	return suuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDescription(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetDescription(*s)
	}
	return suuo
}

// ClearDescription clears the value of the "description" field.
func (suuo *SysUserUpdateOne) ClearDescription() *SysUserUpdateOne {
	suuo.mutation.ClearDescription()
	return suuo
}

// SetHomePath sets the "home_path" field.
func (suuo *SysUserUpdateOne) SetHomePath(s string) *SysUserUpdateOne {
	suuo.mutation.SetHomePath(s)
	return suuo
}

// SetNillableHomePath sets the "home_path" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableHomePath(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetHomePath(*s)
	}
	return suuo
}

// SetMobile sets the "mobile" field.
func (suuo *SysUserUpdateOne) SetMobile(s string) *SysUserUpdateOne {
	suuo.mutation.SetMobile(s)
	return suuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableMobile(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetMobile(*s)
	}
	return suuo
}

// ClearMobile clears the value of the "mobile" field.
func (suuo *SysUserUpdateOne) ClearMobile() *SysUserUpdateOne {
	suuo.mutation.ClearMobile()
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SysUserUpdateOne) SetEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// ClearEmail clears the value of the "email" field.
func (suuo *SysUserUpdateOne) ClearEmail() *SysUserUpdateOne {
	suuo.mutation.ClearEmail()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SysUserUpdateOne) ClearAvatar() *SysUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetDepartmentID sets the "department_id" field.
func (suuo *SysUserUpdateOne) SetDepartmentID(u uint64) *SysUserUpdateOne {
	suuo.mutation.ResetDepartmentID()
	suuo.mutation.SetDepartmentID(u)
	return suuo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDepartmentID(u *uint64) *SysUserUpdateOne {
	if u != nil {
		suuo.SetDepartmentID(*u)
	}
	return suuo
}

// AddDepartmentID adds u to the "department_id" field.
func (suuo *SysUserUpdateOne) AddDepartmentID(u int64) *SysUserUpdateOne {
	suuo.mutation.AddDepartmentID(u)
	return suuo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (suuo *SysUserUpdateOne) ClearDepartmentID() *SysUserUpdateOne {
	suuo.mutation.ClearDepartmentID()
	return suuo
}

// SetCompanyID sets the "company_id" field.
func (suuo *SysUserUpdateOne) SetCompanyID(u uint64) *SysUserUpdateOne {
	suuo.mutation.ResetCompanyID()
	suuo.mutation.SetCompanyID(u)
	return suuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableCompanyID(u *uint64) *SysUserUpdateOne {
	if u != nil {
		suuo.SetCompanyID(*u)
	}
	return suuo
}

// AddCompanyID adds u to the "company_id" field.
func (suuo *SysUserUpdateOne) AddCompanyID(u int64) *SysUserUpdateOne {
	suuo.mutation.AddCompanyID(u)
	return suuo
}

// ClearCompanyID clears the value of the "company_id" field.
func (suuo *SysUserUpdateOne) ClearCompanyID() *SysUserUpdateOne {
	suuo.mutation.ClearCompanyID()
	return suuo
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suuo *SysUserUpdateOne) Where(ps ...predicate.SysUser) *SysUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suuo.mutation.AddedStatus(); ok {
		_spec.AddField(sysuser.FieldStatus, field.TypeUint8, value)
	}
	if suuo.mutation.StatusCleared() {
		_spec.ClearField(sysuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := suuo.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suuo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suuo.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Nickname(); ok {
		_spec.SetField(sysuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Description(); ok {
		_spec.SetField(sysuser.FieldDescription, field.TypeString, value)
	}
	if suuo.mutation.DescriptionCleared() {
		_spec.ClearField(sysuser.FieldDescription, field.TypeString)
	}
	if value, ok := suuo.mutation.HomePath(); ok {
		_spec.SetField(sysuser.FieldHomePath, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Mobile(); ok {
		_spec.SetField(sysuser.FieldMobile, field.TypeString, value)
	}
	if suuo.mutation.MobileCleared() {
		_spec.ClearField(sysuser.FieldMobile, field.TypeString)
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
	}
	if suuo.mutation.EmailCleared() {
		_spec.ClearField(sysuser.FieldEmail, field.TypeString)
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suuo.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suuo.mutation.DepartmentID(); ok {
		_spec.SetField(sysuser.FieldDepartmentID, field.TypeUint64, value)
	}
	if value, ok := suuo.mutation.AddedDepartmentID(); ok {
		_spec.AddField(sysuser.FieldDepartmentID, field.TypeUint64, value)
	}
	if suuo.mutation.DepartmentIDCleared() {
		_spec.ClearField(sysuser.FieldDepartmentID, field.TypeUint64)
	}
	if value, ok := suuo.mutation.CompanyID(); ok {
		_spec.SetField(sysuser.FieldCompanyID, field.TypeUint64, value)
	}
	if value, ok := suuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(sysuser.FieldCompanyID, field.TypeUint64, value)
	}
	if suuo.mutation.CompanyIDCleared() {
		_spec.ClearField(sysuser.FieldCompanyID, field.TypeUint64)
	}
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
