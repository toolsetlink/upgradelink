// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeappdownloadreportlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeAppDownloadReportLog is the model entity for the UpgradeAppDownloadReportLog schema.
type UpgradeAppDownloadReportLog struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 事件发生时间
	Timestamp time.Time `json:"timestamp,omitempty"`
	// 应用Key
	AppKey string `json:"app_key,omitempty"`
	// 应用版本ID
	AppVersionID int `json:"app_version_id,omitempty"`
	// 版本号
	AppVersionCode int `json:"app_version_code,omitempty"`
	// 操作系统:linux、darwin、windows
	AppVersionTarget string `json:"app_version_target,omitempty"`
	// 机器架构:x86_64、i686、aarch64、armv7
	AppVersionArch string `json:"app_version_arch,omitempty"`
	// 创建时间
	CreateAt     time.Time `json:"create_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeAppDownloadReportLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeappdownloadreportlog.FieldID, upgradeappdownloadreportlog.FieldCompanyID, upgradeappdownloadreportlog.FieldAppVersionID, upgradeappdownloadreportlog.FieldAppVersionCode:
			values[i] = new(sql.NullInt64)
		case upgradeappdownloadreportlog.FieldAppKey, upgradeappdownloadreportlog.FieldAppVersionTarget, upgradeappdownloadreportlog.FieldAppVersionArch:
			values[i] = new(sql.NullString)
		case upgradeappdownloadreportlog.FieldTimestamp, upgradeappdownloadreportlog.FieldCreateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeAppDownloadReportLog fields.
func (uadrl *UpgradeAppDownloadReportLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeappdownloadreportlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uadrl.ID = int(value.Int64)
		case upgradeappdownloadreportlog.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				uadrl.CompanyID = int(value.Int64)
			}
		case upgradeappdownloadreportlog.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				uadrl.Timestamp = value.Time
			}
		case upgradeappdownloadreportlog.FieldAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_key", values[i])
			} else if value.Valid {
				uadrl.AppKey = value.String
			}
		case upgradeappdownloadreportlog.FieldAppVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_version_id", values[i])
			} else if value.Valid {
				uadrl.AppVersionID = int(value.Int64)
			}
		case upgradeappdownloadreportlog.FieldAppVersionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_version_code", values[i])
			} else if value.Valid {
				uadrl.AppVersionCode = int(value.Int64)
			}
		case upgradeappdownloadreportlog.FieldAppVersionTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_version_target", values[i])
			} else if value.Valid {
				uadrl.AppVersionTarget = value.String
			}
		case upgradeappdownloadreportlog.FieldAppVersionArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_version_arch", values[i])
			} else if value.Valid {
				uadrl.AppVersionArch = value.String
			}
		case upgradeappdownloadreportlog.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uadrl.CreateAt = value.Time
			}
		default:
			uadrl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeAppDownloadReportLog.
// This includes values selected through modifiers, order, etc.
func (uadrl *UpgradeAppDownloadReportLog) Value(name string) (ent.Value, error) {
	return uadrl.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeAppDownloadReportLog.
// Note that you need to call UpgradeAppDownloadReportLog.Unwrap() before calling this method if this UpgradeAppDownloadReportLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (uadrl *UpgradeAppDownloadReportLog) Update() *UpgradeAppDownloadReportLogUpdateOne {
	return NewUpgradeAppDownloadReportLogClient(uadrl.config).UpdateOne(uadrl)
}

// Unwrap unwraps the UpgradeAppDownloadReportLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uadrl *UpgradeAppDownloadReportLog) Unwrap() *UpgradeAppDownloadReportLog {
	_tx, ok := uadrl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeAppDownloadReportLog is not a transactional entity")
	}
	uadrl.config.driver = _tx.drv
	return uadrl
}

// String implements the fmt.Stringer.
func (uadrl *UpgradeAppDownloadReportLog) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeAppDownloadReportLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uadrl.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", uadrl.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(uadrl.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_key=")
	builder.WriteString(uadrl.AppKey)
	builder.WriteString(", ")
	builder.WriteString("app_version_id=")
	builder.WriteString(fmt.Sprintf("%v", uadrl.AppVersionID))
	builder.WriteString(", ")
	builder.WriteString("app_version_code=")
	builder.WriteString(fmt.Sprintf("%v", uadrl.AppVersionCode))
	builder.WriteString(", ")
	builder.WriteString("app_version_target=")
	builder.WriteString(uadrl.AppVersionTarget)
	builder.WriteString(", ")
	builder.WriteString("app_version_arch=")
	builder.WriteString(uadrl.AppVersionArch)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(uadrl.CreateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeAppDownloadReportLogs is a parsable slice of UpgradeAppDownloadReportLog.
type UpgradeAppDownloadReportLogs []*UpgradeAppDownloadReportLog
