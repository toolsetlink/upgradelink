// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entities.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.Where(ps...)
	return ucusflsu
}

// SetEnable sets the "enable" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ResetEnable()
	ucusflsu.mutation.SetEnable(i)
	return ucusflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ucusflsu.SetEnable(*i)
	}
	return ucusflsu
}

// AddEnable adds i to the "enable" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.AddEnable(i)
	return ucusflsu
}

// SetBeginTime sets the "begin_time" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.SetBeginTime(s)
	return ucusflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ucusflsu.SetBeginTime(*s)
	}
	return ucusflsu
}

// SetEndTime sets the "end_time" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.SetEndTime(s)
	return ucusflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		ucusflsu.SetEndTime(*s)
	}
	return ucusflsu
}

// SetDimension sets the "dimension" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ResetDimension()
	ucusflsu.mutation.SetDimension(i)
	return ucusflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ucusflsu.SetDimension(*i)
	}
	return ucusflsu
}

// AddDimension adds i to the "dimension" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.AddDimension(i)
	return ucusflsu
}

// SetLimit sets the "limit" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ResetLimit()
	ucusflsu.mutation.SetLimit(i)
	return ucusflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ucusflsu.SetLimit(*i)
	}
	return ucusflsu
}

// AddLimit adds i to the "limit" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.AddLimit(i)
	return ucusflsu
}

// SetIsDel sets the "is_del" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ResetIsDel()
	ucusflsu.mutation.SetIsDel(i)
	return ucusflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		ucusflsu.SetIsDel(*i)
	}
	return ucusflsu
}

// AddIsDel adds i to the "is_del" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.AddIsDel(i)
	return ucusflsu
}

// SetCreateAt sets the "create_at" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.SetCreateAt(t)
	return ucusflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ucusflsu.SetCreateAt(*t)
	}
	return ucusflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ClearCreateAt()
	return ucusflsu
}

// SetUpdateAt sets the "update_at" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.SetUpdateAt(t)
	return ucusflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		ucusflsu.SetUpdateAt(*t)
	}
	return ucusflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate {
	ucusflsu.mutation.ClearUpdateAt()
	return ucusflsu
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation {
	return ucusflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucusflsu.sqlSave, ucusflsu.mutation, ucusflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ucusflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ucusflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := ucusflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusflsu *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.Table, upgradeconfigurationupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ucusflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusflsu.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ucusflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ucusflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.Limit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucusflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucusflsu.mutation.done = true
	return n, nil
}

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ResetEnable()
	ucusflsuo.mutation.SetEnable(i)
	return ucusflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ucusflsuo.SetEnable(*i)
	}
	return ucusflsuo
}

// AddEnable adds i to the "enable" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.AddEnable(i)
	return ucusflsuo
}

// SetBeginTime sets the "begin_time" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.SetBeginTime(s)
	return ucusflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ucusflsuo.SetBeginTime(*s)
	}
	return ucusflsuo
}

// SetEndTime sets the "end_time" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.SetEndTime(s)
	return ucusflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		ucusflsuo.SetEndTime(*s)
	}
	return ucusflsuo
}

// SetDimension sets the "dimension" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ResetDimension()
	ucusflsuo.mutation.SetDimension(i)
	return ucusflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ucusflsuo.SetDimension(*i)
	}
	return ucusflsuo
}

// AddDimension adds i to the "dimension" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.AddDimension(i)
	return ucusflsuo
}

// SetLimit sets the "limit" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ResetLimit()
	ucusflsuo.mutation.SetLimit(i)
	return ucusflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ucusflsuo.SetLimit(*i)
	}
	return ucusflsuo
}

// AddLimit adds i to the "limit" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.AddLimit(i)
	return ucusflsuo
}

// SetIsDel sets the "is_del" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ResetIsDel()
	ucusflsuo.mutation.SetIsDel(i)
	return ucusflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		ucusflsuo.SetIsDel(*i)
	}
	return ucusflsuo
}

// AddIsDel adds i to the "is_del" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.AddIsDel(i)
	return ucusflsuo
}

// SetCreateAt sets the "create_at" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.SetCreateAt(t)
	return ucusflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ucusflsuo.SetCreateAt(*t)
	}
	return ucusflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ClearCreateAt()
	return ucusflsuo
}

// SetUpdateAt sets the "update_at" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.SetUpdateAt(t)
	return ucusflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		ucusflsuo.SetUpdateAt(*t)
	}
	return ucusflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.ClearUpdateAt()
	return ucusflsuo
}

// Mutation returns the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation {
	return ucusflsuo.mutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdate builder.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.mutation.Where(ps...)
	return ucusflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne {
	ucusflsuo.fields = append([]string{field}, fields...)
	return ucusflsuo
}

// Save executes the query and returns the updated UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, ucusflsuo.sqlSave, ucusflsuo.mutation, ucusflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategy {
	node, err := ucusflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ucusflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ucusflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucusflsuo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.Table, upgradeconfigurationupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := ucusflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeConfigurationUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucusflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradeconfigurationupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucusflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucusflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := ucusflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := ucusflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ucusflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucusflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ucusflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucusflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ucusflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeConfigurationUpgradeStrategyFlowLimitStrategy{config: ucusflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucusflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfigurationupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucusflsuo.mutation.done = true
	return _node, nil
}
