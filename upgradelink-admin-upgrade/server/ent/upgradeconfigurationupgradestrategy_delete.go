// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpgradeStrategyDelete is the builder for deleting a UpgradeConfigurationUpgradeStrategy entity.
type UpgradeConfigurationUpgradeStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyDelete builder.
func (ucusd *UpgradeConfigurationUpgradeStrategyDelete) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyDelete {
	ucusd.mutation.Where(ps...)
	return ucusd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucusd *UpgradeConfigurationUpgradeStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucusd.sqlExec, ucusd.mutation, ucusd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusd *UpgradeConfigurationUpgradeStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ucusd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucusd *UpgradeConfigurationUpgradeStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeconfigurationupgradestrategy.Table, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategy.FieldID, field.TypeInt))
	if ps := ucusd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucusd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucusd.mutation.done = true
	return affected, err
}

// UpgradeConfigurationUpgradeStrategyDeleteOne is the builder for deleting a single UpgradeConfigurationUpgradeStrategy entity.
type UpgradeConfigurationUpgradeStrategyDeleteOne struct {
	ucusd *UpgradeConfigurationUpgradeStrategyDelete
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyDelete builder.
func (ucusdo *UpgradeConfigurationUpgradeStrategyDeleteOne) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategy) *UpgradeConfigurationUpgradeStrategyDeleteOne {
	ucusdo.ucusd.mutation.Where(ps...)
	return ucusdo
}

// Exec executes the deletion query.
func (ucusdo *UpgradeConfigurationUpgradeStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ucusdo.ucusd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeconfigurationupgradestrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusdo *UpgradeConfigurationUpgradeStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ucusdo.Exec(ctx); err != nil {
		panic(err)
	}
}
