// Code generated by ent, DO NOT EDIT.

package upgradeapkupgradestrategygraystrategy

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldID, id))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldEnable, v))
}

// BeginDatetime applies equality check predicate on the "begin_datetime" field. It's identical to BeginDatetimeEQ.
func BeginDatetime(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldBeginDatetime, v))
}

// EndDatetime applies equality check predicate on the "end_datetime" field. It's identical to EndDatetimeEQ.
func EndDatetime(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldEndDatetime, v))
}

// Limit applies equality check predicate on the "limit" field. It's identical to LimitEQ.
func Limit(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldLimit, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldEnable, v))
}

// EnableIn applies the In predicate on the "enable" field.
func EnableIn(vs ...int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldEnable, vs...))
}

// EnableNotIn applies the NotIn predicate on the "enable" field.
func EnableNotIn(vs ...int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldEnable, vs...))
}

// EnableGT applies the GT predicate on the "enable" field.
func EnableGT(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldEnable, v))
}

// EnableGTE applies the GTE predicate on the "enable" field.
func EnableGTE(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldEnable, v))
}

// EnableLT applies the LT predicate on the "enable" field.
func EnableLT(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldEnable, v))
}

// EnableLTE applies the LTE predicate on the "enable" field.
func EnableLTE(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldEnable, v))
}

// BeginDatetimeEQ applies the EQ predicate on the "begin_datetime" field.
func BeginDatetimeEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldBeginDatetime, v))
}

// BeginDatetimeNEQ applies the NEQ predicate on the "begin_datetime" field.
func BeginDatetimeNEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldBeginDatetime, v))
}

// BeginDatetimeIn applies the In predicate on the "begin_datetime" field.
func BeginDatetimeIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldBeginDatetime, vs...))
}

// BeginDatetimeNotIn applies the NotIn predicate on the "begin_datetime" field.
func BeginDatetimeNotIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldBeginDatetime, vs...))
}

// BeginDatetimeGT applies the GT predicate on the "begin_datetime" field.
func BeginDatetimeGT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldBeginDatetime, v))
}

// BeginDatetimeGTE applies the GTE predicate on the "begin_datetime" field.
func BeginDatetimeGTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldBeginDatetime, v))
}

// BeginDatetimeLT applies the LT predicate on the "begin_datetime" field.
func BeginDatetimeLT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldBeginDatetime, v))
}

// BeginDatetimeLTE applies the LTE predicate on the "begin_datetime" field.
func BeginDatetimeLTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldBeginDatetime, v))
}

// EndDatetimeEQ applies the EQ predicate on the "end_datetime" field.
func EndDatetimeEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldEndDatetime, v))
}

// EndDatetimeNEQ applies the NEQ predicate on the "end_datetime" field.
func EndDatetimeNEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldEndDatetime, v))
}

// EndDatetimeIn applies the In predicate on the "end_datetime" field.
func EndDatetimeIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldEndDatetime, vs...))
}

// EndDatetimeNotIn applies the NotIn predicate on the "end_datetime" field.
func EndDatetimeNotIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldEndDatetime, vs...))
}

// EndDatetimeGT applies the GT predicate on the "end_datetime" field.
func EndDatetimeGT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldEndDatetime, v))
}

// EndDatetimeGTE applies the GTE predicate on the "end_datetime" field.
func EndDatetimeGTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldEndDatetime, v))
}

// EndDatetimeLT applies the LT predicate on the "end_datetime" field.
func EndDatetimeLT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldEndDatetime, v))
}

// EndDatetimeLTE applies the LTE predicate on the "end_datetime" field.
func EndDatetimeLTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldEndDatetime, v))
}

// LimitEQ applies the EQ predicate on the "limit" field.
func LimitEQ(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldLimit, v))
}

// LimitNEQ applies the NEQ predicate on the "limit" field.
func LimitNEQ(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldLimit, v))
}

// LimitIn applies the In predicate on the "limit" field.
func LimitIn(vs ...int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldLimit, vs...))
}

// LimitNotIn applies the NotIn predicate on the "limit" field.
func LimitNotIn(vs ...int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldLimit, vs...))
}

// LimitGT applies the GT predicate on the "limit" field.
func LimitGT(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldLimit, v))
}

// LimitGTE applies the GTE predicate on the "limit" field.
func LimitGTE(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldLimit, v))
}

// LimitLT applies the LT predicate on the "limit" field.
func LimitLT(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldLimit, v))
}

// LimitLTE applies the LTE predicate on the "limit" field.
func LimitLTE(v int) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldLimit, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeApkUpgradeStrategyGrayStrategy) predicate.UpgradeApkUpgradeStrategyGrayStrategy {
	return predicate.UpgradeApkUpgradeStrategyGrayStrategy(sql.NotPredicates(p))
}
