// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete builder.
func (ucusflsd *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete {
	ucusflsd.mutation.Where(ps...)
	return ucusflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucusflsd *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucusflsd.sqlExec, ucusflsd.mutation, ucusflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusflsd *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ucusflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucusflsd *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradeconfigurationupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ucusflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucusflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucusflsd.mutation.done = true
	return affected, err
}

// UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeConfigurationUpgradeStrategyFlowLimitStrategy entity.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	ucusflsd *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDelete builder.
func (ucusflsdo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy) *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne {
	ucusflsdo.ucusflsd.mutation.Where(ps...)
	return ucusflsdo
}

// Exec executes the deletion query.
func (ucusflsdo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ucusflsdo.ucusflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeconfigurationupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucusflsdo *UpgradeConfigurationUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ucusflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
