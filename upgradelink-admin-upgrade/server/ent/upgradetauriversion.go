// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradetauriversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeTauriVersion is the model entity for the UpgradeTauriVersion schema.
type UpgradeTauriVersion struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// tauri应用ID
	TauriID int `json:"tauri_id,omitempty"`
	// 云文件id
	CloudFileID string `json:"cloud_file_id,omitempty"`
	// 云文件id 安装文件
	InstallCloudFileID string `json:"install_cloud_file_id,omitempty"`
	// 版本名
	VersionName string `json:"version_name,omitempty"`
	// 版本号
	VersionCode int `json:"version_code,omitempty"`
	// 操作系统:linux、darwin、windows
	Target string `json:"target,omitempty"`
	// 机器架构:x86_64、i686、aarch64、armv7
	Arch string `json:"arch,omitempty"`
	// 生成的 .sig 文件的内容
	Signature string `json:"signature,omitempty"`
	// 描述信息
	Description string `json:"description,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeTauriVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradetauriversion.FieldID, upgradetauriversion.FieldCompanyID, upgradetauriversion.FieldTauriID, upgradetauriversion.FieldVersionCode, upgradetauriversion.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradetauriversion.FieldCloudFileID, upgradetauriversion.FieldInstallCloudFileID, upgradetauriversion.FieldVersionName, upgradetauriversion.FieldTarget, upgradetauriversion.FieldArch, upgradetauriversion.FieldSignature, upgradetauriversion.FieldDescription:
			values[i] = new(sql.NullString)
		case upgradetauriversion.FieldCreateAt, upgradetauriversion.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeTauriVersion fields.
func (utv *UpgradeTauriVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradetauriversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			utv.ID = int(value.Int64)
		case upgradetauriversion.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				utv.CompanyID = int(value.Int64)
			}
		case upgradetauriversion.FieldTauriID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tauri_id", values[i])
			} else if value.Valid {
				utv.TauriID = int(value.Int64)
			}
		case upgradetauriversion.FieldCloudFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloud_file_id", values[i])
			} else if value.Valid {
				utv.CloudFileID = value.String
			}
		case upgradetauriversion.FieldInstallCloudFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_cloud_file_id", values[i])
			} else if value.Valid {
				utv.InstallCloudFileID = value.String
			}
		case upgradetauriversion.FieldVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_name", values[i])
			} else if value.Valid {
				utv.VersionName = value.String
			}
		case upgradetauriversion.FieldVersionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_code", values[i])
			} else if value.Valid {
				utv.VersionCode = int(value.Int64)
			}
		case upgradetauriversion.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				utv.Target = value.String
			}
		case upgradetauriversion.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				utv.Arch = value.String
			}
		case upgradetauriversion.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				utv.Signature = value.String
			}
		case upgradetauriversion.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				utv.Description = value.String
			}
		case upgradetauriversion.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				utv.IsDel = int32(value.Int64)
			}
		case upgradetauriversion.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				utv.CreateAt = value.Time
			}
		case upgradetauriversion.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				utv.UpdateAt = value.Time
			}
		default:
			utv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeTauriVersion.
// This includes values selected through modifiers, order, etc.
func (utv *UpgradeTauriVersion) Value(name string) (ent.Value, error) {
	return utv.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeTauriVersion.
// Note that you need to call UpgradeTauriVersion.Unwrap() before calling this method if this UpgradeTauriVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (utv *UpgradeTauriVersion) Update() *UpgradeTauriVersionUpdateOne {
	return NewUpgradeTauriVersionClient(utv.config).UpdateOne(utv)
}

// Unwrap unwraps the UpgradeTauriVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (utv *UpgradeTauriVersion) Unwrap() *UpgradeTauriVersion {
	_tx, ok := utv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeTauriVersion is not a transactional entity")
	}
	utv.config.driver = _tx.drv
	return utv
}

// String implements the fmt.Stringer.
func (utv *UpgradeTauriVersion) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeTauriVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", utv.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", utv.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("tauri_id=")
	builder.WriteString(fmt.Sprintf("%v", utv.TauriID))
	builder.WriteString(", ")
	builder.WriteString("cloud_file_id=")
	builder.WriteString(utv.CloudFileID)
	builder.WriteString(", ")
	builder.WriteString("install_cloud_file_id=")
	builder.WriteString(utv.InstallCloudFileID)
	builder.WriteString(", ")
	builder.WriteString("version_name=")
	builder.WriteString(utv.VersionName)
	builder.WriteString(", ")
	builder.WriteString("version_code=")
	builder.WriteString(fmt.Sprintf("%v", utv.VersionCode))
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(utv.Target)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(utv.Arch)
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(utv.Signature)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(utv.Description)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", utv.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(utv.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(utv.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeTauriVersions is a parsable slice of UpgradeTauriVersion.
type UpgradeTauriVersions []*UpgradeTauriVersion
