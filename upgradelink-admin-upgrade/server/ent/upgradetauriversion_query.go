// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradetauriversion"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriVersionQuery is the builder for querying UpgradeTauriVersion entities.
type UpgradeTauriVersionQuery struct {
	config
	ctx        *QueryContext
	order      []upgradetauriversion.OrderOption
	inters     []Interceptor
	predicates []predicate.UpgradeTauriVersion
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpgradeTauriVersionQuery builder.
func (utvq *UpgradeTauriVersionQuery) Where(ps ...predicate.UpgradeTauriVersion) *UpgradeTauriVersionQuery {
	utvq.predicates = append(utvq.predicates, ps...)
	return utvq
}

// Limit the number of records to be returned by this query.
func (utvq *UpgradeTauriVersionQuery) Limit(limit int) *UpgradeTauriVersionQuery {
	utvq.ctx.Limit = &limit
	return utvq
}

// Offset to start from.
func (utvq *UpgradeTauriVersionQuery) Offset(offset int) *UpgradeTauriVersionQuery {
	utvq.ctx.Offset = &offset
	return utvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (utvq *UpgradeTauriVersionQuery) Unique(unique bool) *UpgradeTauriVersionQuery {
	utvq.ctx.Unique = &unique
	return utvq
}

// Order specifies how the records should be ordered.
func (utvq *UpgradeTauriVersionQuery) Order(o ...upgradetauriversion.OrderOption) *UpgradeTauriVersionQuery {
	utvq.order = append(utvq.order, o...)
	return utvq
}

// First returns the first UpgradeTauriVersion entity from the query.
// Returns a *NotFoundError when no UpgradeTauriVersion was found.
func (utvq *UpgradeTauriVersionQuery) First(ctx context.Context) (*UpgradeTauriVersion, error) {
	nodes, err := utvq.Limit(1).All(setContextOp(ctx, utvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upgradetauriversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) FirstX(ctx context.Context) *UpgradeTauriVersion {
	node, err := utvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpgradeTauriVersion ID from the query.
// Returns a *NotFoundError when no UpgradeTauriVersion ID was found.
func (utvq *UpgradeTauriVersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = utvq.Limit(1).IDs(setContextOp(ctx, utvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upgradetauriversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) FirstIDX(ctx context.Context) int {
	id, err := utvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpgradeTauriVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpgradeTauriVersion entity is found.
// Returns a *NotFoundError when no UpgradeTauriVersion entities are found.
func (utvq *UpgradeTauriVersionQuery) Only(ctx context.Context) (*UpgradeTauriVersion, error) {
	nodes, err := utvq.Limit(2).All(setContextOp(ctx, utvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upgradetauriversion.Label}
	default:
		return nil, &NotSingularError{upgradetauriversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) OnlyX(ctx context.Context) *UpgradeTauriVersion {
	node, err := utvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpgradeTauriVersion ID in the query.
// Returns a *NotSingularError when more than one UpgradeTauriVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (utvq *UpgradeTauriVersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = utvq.Limit(2).IDs(setContextOp(ctx, utvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upgradetauriversion.Label}
	default:
		err = &NotSingularError{upgradetauriversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) OnlyIDX(ctx context.Context) int {
	id, err := utvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpgradeTauriVersions.
func (utvq *UpgradeTauriVersionQuery) All(ctx context.Context) ([]*UpgradeTauriVersion, error) {
	ctx = setContextOp(ctx, utvq.ctx, ent.OpQueryAll)
	if err := utvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpgradeTauriVersion, *UpgradeTauriVersionQuery]()
	return withInterceptors[[]*UpgradeTauriVersion](ctx, utvq, qr, utvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) AllX(ctx context.Context) []*UpgradeTauriVersion {
	nodes, err := utvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpgradeTauriVersion IDs.
func (utvq *UpgradeTauriVersionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if utvq.ctx.Unique == nil && utvq.path != nil {
		utvq.Unique(true)
	}
	ctx = setContextOp(ctx, utvq.ctx, ent.OpQueryIDs)
	if err = utvq.Select(upgradetauriversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) IDsX(ctx context.Context) []int {
	ids, err := utvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (utvq *UpgradeTauriVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, utvq.ctx, ent.OpQueryCount)
	if err := utvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, utvq, querierCount[*UpgradeTauriVersionQuery](), utvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) CountX(ctx context.Context) int {
	count, err := utvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (utvq *UpgradeTauriVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, utvq.ctx, ent.OpQueryExist)
	switch _, err := utvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (utvq *UpgradeTauriVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := utvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpgradeTauriVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (utvq *UpgradeTauriVersionQuery) Clone() *UpgradeTauriVersionQuery {
	if utvq == nil {
		return nil
	}
	return &UpgradeTauriVersionQuery{
		config:     utvq.config,
		ctx:        utvq.ctx.Clone(),
		order:      append([]upgradetauriversion.OrderOption{}, utvq.order...),
		inters:     append([]Interceptor{}, utvq.inters...),
		predicates: append([]predicate.UpgradeTauriVersion{}, utvq.predicates...),
		// clone intermediate query.
		sql:  utvq.sql.Clone(),
		path: utvq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UpgradeTauriVersion.Query().
//		GroupBy(upgradetauriversion.FieldCompanyID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (utvq *UpgradeTauriVersionQuery) GroupBy(field string, fields ...string) *UpgradeTauriVersionGroupBy {
	utvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UpgradeTauriVersionGroupBy{build: utvq}
	grbuild.flds = &utvq.ctx.Fields
	grbuild.label = upgradetauriversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CompanyID int `json:"company_id,omitempty"`
//	}
//
//	client.UpgradeTauriVersion.Query().
//		Select(upgradetauriversion.FieldCompanyID).
//		Scan(ctx, &v)
func (utvq *UpgradeTauriVersionQuery) Select(fields ...string) *UpgradeTauriVersionSelect {
	utvq.ctx.Fields = append(utvq.ctx.Fields, fields...)
	sbuild := &UpgradeTauriVersionSelect{UpgradeTauriVersionQuery: utvq}
	sbuild.label = upgradetauriversion.Label
	sbuild.flds, sbuild.scan = &utvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpgradeTauriVersionSelect configured with the given aggregations.
func (utvq *UpgradeTauriVersionQuery) Aggregate(fns ...AggregateFunc) *UpgradeTauriVersionSelect {
	return utvq.Select().Aggregate(fns...)
}

func (utvq *UpgradeTauriVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range utvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, utvq); err != nil {
				return err
			}
		}
	}
	for _, f := range utvq.ctx.Fields {
		if !upgradetauriversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if utvq.path != nil {
		prev, err := utvq.path(ctx)
		if err != nil {
			return err
		}
		utvq.sql = prev
	}
	return nil
}

func (utvq *UpgradeTauriVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpgradeTauriVersion, error) {
	var (
		nodes = []*UpgradeTauriVersion{}
		_spec = utvq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpgradeTauriVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpgradeTauriVersion{config: utvq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, utvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (utvq *UpgradeTauriVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := utvq.querySpec()
	_spec.Node.Columns = utvq.ctx.Fields
	if len(utvq.ctx.Fields) > 0 {
		_spec.Unique = utvq.ctx.Unique != nil && *utvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, utvq.driver, _spec)
}

func (utvq *UpgradeTauriVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(upgradetauriversion.Table, upgradetauriversion.Columns, sqlgraph.NewFieldSpec(upgradetauriversion.FieldID, field.TypeInt))
	_spec.From = utvq.sql
	if unique := utvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if utvq.path != nil {
		_spec.Unique = true
	}
	if fields := utvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauriversion.FieldID)
		for i := range fields {
			if fields[i] != upgradetauriversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := utvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := utvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := utvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := utvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (utvq *UpgradeTauriVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(utvq.driver.Dialect())
	t1 := builder.Table(upgradetauriversion.Table)
	columns := utvq.ctx.Fields
	if len(columns) == 0 {
		columns = upgradetauriversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if utvq.sql != nil {
		selector = utvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if utvq.ctx.Unique != nil && *utvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range utvq.predicates {
		p(selector)
	}
	for _, p := range utvq.order {
		p(selector)
	}
	if offset := utvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := utvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpgradeTauriVersionGroupBy is the group-by builder for UpgradeTauriVersion entities.
type UpgradeTauriVersionGroupBy struct {
	selector
	build *UpgradeTauriVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (utvgb *UpgradeTauriVersionGroupBy) Aggregate(fns ...AggregateFunc) *UpgradeTauriVersionGroupBy {
	utvgb.fns = append(utvgb.fns, fns...)
	return utvgb
}

// Scan applies the selector query and scans the result into the given value.
func (utvgb *UpgradeTauriVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, utvgb.build.ctx, ent.OpQueryGroupBy)
	if err := utvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeTauriVersionQuery, *UpgradeTauriVersionGroupBy](ctx, utvgb.build, utvgb, utvgb.build.inters, v)
}

func (utvgb *UpgradeTauriVersionGroupBy) sqlScan(ctx context.Context, root *UpgradeTauriVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(utvgb.fns))
	for _, fn := range utvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*utvgb.flds)+len(utvgb.fns))
		for _, f := range *utvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*utvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := utvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpgradeTauriVersionSelect is the builder for selecting fields of UpgradeTauriVersion entities.
type UpgradeTauriVersionSelect struct {
	*UpgradeTauriVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (utvs *UpgradeTauriVersionSelect) Aggregate(fns ...AggregateFunc) *UpgradeTauriVersionSelect {
	utvs.fns = append(utvs.fns, fns...)
	return utvs
}

// Scan applies the selector query and scans the result into the given value.
func (utvs *UpgradeTauriVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, utvs.ctx, ent.OpQuerySelect)
	if err := utvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeTauriVersionQuery, *UpgradeTauriVersionSelect](ctx, utvs.UpgradeTauriVersionQuery, utvs, utvs.inters, v)
}

func (utvs *UpgradeTauriVersionSelect) sqlScan(ctx context.Context, root *UpgradeTauriVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(utvs.fns))
	for _, fn := range utvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*utvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := utvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
