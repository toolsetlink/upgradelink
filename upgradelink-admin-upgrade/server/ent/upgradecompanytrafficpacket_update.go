// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradecompanytrafficpacket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeCompanyTrafficPacketUpdate is the builder for updating UpgradeCompanyTrafficPacket entities.
type UpgradeCompanyTrafficPacketUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeCompanyTrafficPacketMutation
}

// Where appends a list predicates to the UpgradeCompanyTrafficPacketUpdate builder.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) Where(ps ...predicate.UpgradeCompanyTrafficPacket) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.Where(ps...)
	return uctpu
}

// SetCompanyID sets the "company_id" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetCompanyID(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ResetCompanyID()
	uctpu.mutation.SetCompanyID(i)
	return uctpu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableCompanyID(i *int) *UpgradeCompanyTrafficPacketUpdate {
	if i != nil {
		uctpu.SetCompanyID(*i)
	}
	return uctpu
}

// AddCompanyID adds i to the "company_id" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) AddCompanyID(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.AddCompanyID(i)
	return uctpu
}

// SetPacketID sets the "packet_id" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetPacketID(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ResetPacketID()
	uctpu.mutation.SetPacketID(i)
	return uctpu
}

// SetNillablePacketID sets the "packet_id" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillablePacketID(i *int) *UpgradeCompanyTrafficPacketUpdate {
	if i != nil {
		uctpu.SetPacketID(*i)
	}
	return uctpu
}

// AddPacketID adds i to the "packet_id" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) AddPacketID(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.AddPacketID(i)
	return uctpu
}

// SetStartTime sets the "start_time" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetStartTime(t time.Time) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.SetStartTime(t)
	return uctpu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableStartTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdate {
	if t != nil {
		uctpu.SetStartTime(*t)
	}
	return uctpu
}

// SetEndTime sets the "end_time" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetEndTime(t time.Time) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.SetEndTime(t)
	return uctpu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableEndTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdate {
	if t != nil {
		uctpu.SetEndTime(*t)
	}
	return uctpu
}

// SetInitialSize sets the "initial_size" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetInitialSize(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ResetInitialSize()
	uctpu.mutation.SetInitialSize(i)
	return uctpu
}

// SetNillableInitialSize sets the "initial_size" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableInitialSize(i *int) *UpgradeCompanyTrafficPacketUpdate {
	if i != nil {
		uctpu.SetInitialSize(*i)
	}
	return uctpu
}

// AddInitialSize adds i to the "initial_size" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) AddInitialSize(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.AddInitialSize(i)
	return uctpu
}

// SetRemainingSize sets the "remaining_size" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetRemainingSize(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ResetRemainingSize()
	uctpu.mutation.SetRemainingSize(i)
	return uctpu
}

// SetNillableRemainingSize sets the "remaining_size" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableRemainingSize(i *int) *UpgradeCompanyTrafficPacketUpdate {
	if i != nil {
		uctpu.SetRemainingSize(*i)
	}
	return uctpu
}

// AddRemainingSize adds i to the "remaining_size" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) AddRemainingSize(i int) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.AddRemainingSize(i)
	return uctpu
}

// SetStatus sets the "status" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetStatus(i int32) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ResetStatus()
	uctpu.mutation.SetStatus(i)
	return uctpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableStatus(i *int32) *UpgradeCompanyTrafficPacketUpdate {
	if i != nil {
		uctpu.SetStatus(*i)
	}
	return uctpu
}

// AddStatus adds i to the "status" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) AddStatus(i int32) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.AddStatus(i)
	return uctpu
}

// SetExchangeTime sets the "exchange_time" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetExchangeTime(t time.Time) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.SetExchangeTime(t)
	return uctpu
}

// SetNillableExchangeTime sets the "exchange_time" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableExchangeTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdate {
	if t != nil {
		uctpu.SetExchangeTime(*t)
	}
	return uctpu
}

// SetCreateAt sets the "create_at" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetCreateAt(t time.Time) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.SetCreateAt(t)
	return uctpu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableCreateAt(t *time.Time) *UpgradeCompanyTrafficPacketUpdate {
	if t != nil {
		uctpu.SetCreateAt(*t)
	}
	return uctpu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) ClearCreateAt() *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ClearCreateAt()
	return uctpu
}

// SetUpdateAt sets the "update_at" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetUpdateAt(t time.Time) *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.SetUpdateAt(t)
	return uctpu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyTrafficPacketUpdate {
	if t != nil {
		uctpu.SetUpdateAt(*t)
	}
	return uctpu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) ClearUpdateAt() *UpgradeCompanyTrafficPacketUpdate {
	uctpu.mutation.ClearUpdateAt()
	return uctpu
}

// Mutation returns the UpgradeCompanyTrafficPacketMutation object of the builder.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) Mutation() *UpgradeCompanyTrafficPacketMutation {
	return uctpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uctpu.sqlSave, uctpu.mutation, uctpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) SaveX(ctx context.Context) int {
	affected, err := uctpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) Exec(ctx context.Context) error {
	_, err := uctpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uctpu *UpgradeCompanyTrafficPacketUpdate) ExecX(ctx context.Context) {
	if err := uctpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uctpu *UpgradeCompanyTrafficPacketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradecompanytrafficpacket.Table, upgradecompanytrafficpacket.Columns, sqlgraph.NewFieldSpec(upgradecompanytrafficpacket.FieldID, field.TypeUint64))
	if ps := uctpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uctpu.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.PacketID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldPacketID, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.AddedPacketID(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldPacketID, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.StartTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := uctpu.mutation.EndTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := uctpu.mutation.InitialSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldInitialSize, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.AddedInitialSize(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldInitialSize, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.RemainingSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldRemainingSize, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.AddedRemainingSize(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldRemainingSize, field.TypeInt, value)
	}
	if value, ok := uctpu.mutation.Status(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uctpu.mutation.AddedStatus(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uctpu.mutation.ExchangeTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldExchangeTime, field.TypeTime, value)
	}
	if value, ok := uctpu.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCreateAt, field.TypeTime, value)
	}
	if uctpu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradecompanytrafficpacket.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uctpu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldUpdateAt, field.TypeTime, value)
	}
	if uctpu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradecompanytrafficpacket.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uctpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradecompanytrafficpacket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uctpu.mutation.done = true
	return n, nil
}

// UpgradeCompanyTrafficPacketUpdateOne is the builder for updating a single UpgradeCompanyTrafficPacket entity.
type UpgradeCompanyTrafficPacketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeCompanyTrafficPacketMutation
}

// SetCompanyID sets the "company_id" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetCompanyID(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ResetCompanyID()
	uctpuo.mutation.SetCompanyID(i)
	return uctpuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableCompanyID(i *int) *UpgradeCompanyTrafficPacketUpdateOne {
	if i != nil {
		uctpuo.SetCompanyID(*i)
	}
	return uctpuo
}

// AddCompanyID adds i to the "company_id" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) AddCompanyID(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.AddCompanyID(i)
	return uctpuo
}

// SetPacketID sets the "packet_id" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetPacketID(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ResetPacketID()
	uctpuo.mutation.SetPacketID(i)
	return uctpuo
}

// SetNillablePacketID sets the "packet_id" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillablePacketID(i *int) *UpgradeCompanyTrafficPacketUpdateOne {
	if i != nil {
		uctpuo.SetPacketID(*i)
	}
	return uctpuo
}

// AddPacketID adds i to the "packet_id" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) AddPacketID(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.AddPacketID(i)
	return uctpuo
}

// SetStartTime sets the "start_time" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetStartTime(t time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.SetStartTime(t)
	return uctpuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableStartTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	if t != nil {
		uctpuo.SetStartTime(*t)
	}
	return uctpuo
}

// SetEndTime sets the "end_time" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetEndTime(t time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.SetEndTime(t)
	return uctpuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableEndTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	if t != nil {
		uctpuo.SetEndTime(*t)
	}
	return uctpuo
}

// SetInitialSize sets the "initial_size" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetInitialSize(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ResetInitialSize()
	uctpuo.mutation.SetInitialSize(i)
	return uctpuo
}

// SetNillableInitialSize sets the "initial_size" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableInitialSize(i *int) *UpgradeCompanyTrafficPacketUpdateOne {
	if i != nil {
		uctpuo.SetInitialSize(*i)
	}
	return uctpuo
}

// AddInitialSize adds i to the "initial_size" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) AddInitialSize(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.AddInitialSize(i)
	return uctpuo
}

// SetRemainingSize sets the "remaining_size" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetRemainingSize(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ResetRemainingSize()
	uctpuo.mutation.SetRemainingSize(i)
	return uctpuo
}

// SetNillableRemainingSize sets the "remaining_size" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableRemainingSize(i *int) *UpgradeCompanyTrafficPacketUpdateOne {
	if i != nil {
		uctpuo.SetRemainingSize(*i)
	}
	return uctpuo
}

// AddRemainingSize adds i to the "remaining_size" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) AddRemainingSize(i int) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.AddRemainingSize(i)
	return uctpuo
}

// SetStatus sets the "status" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetStatus(i int32) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ResetStatus()
	uctpuo.mutation.SetStatus(i)
	return uctpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableStatus(i *int32) *UpgradeCompanyTrafficPacketUpdateOne {
	if i != nil {
		uctpuo.SetStatus(*i)
	}
	return uctpuo
}

// AddStatus adds i to the "status" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) AddStatus(i int32) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.AddStatus(i)
	return uctpuo
}

// SetExchangeTime sets the "exchange_time" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetExchangeTime(t time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.SetExchangeTime(t)
	return uctpuo
}

// SetNillableExchangeTime sets the "exchange_time" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableExchangeTime(t *time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	if t != nil {
		uctpuo.SetExchangeTime(*t)
	}
	return uctpuo
}

// SetCreateAt sets the "create_at" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetCreateAt(t time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.SetCreateAt(t)
	return uctpuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	if t != nil {
		uctpuo.SetCreateAt(*t)
	}
	return uctpuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) ClearCreateAt() *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ClearCreateAt()
	return uctpuo
}

// SetUpdateAt sets the "update_at" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetUpdateAt(t time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.SetUpdateAt(t)
	return uctpuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyTrafficPacketUpdateOne {
	if t != nil {
		uctpuo.SetUpdateAt(*t)
	}
	return uctpuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) ClearUpdateAt() *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.ClearUpdateAt()
	return uctpuo
}

// Mutation returns the UpgradeCompanyTrafficPacketMutation object of the builder.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) Mutation() *UpgradeCompanyTrafficPacketMutation {
	return uctpuo.mutation
}

// Where appends a list predicates to the UpgradeCompanyTrafficPacketUpdate builder.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) Where(ps ...predicate.UpgradeCompanyTrafficPacket) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.mutation.Where(ps...)
	return uctpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) Select(field string, fields ...string) *UpgradeCompanyTrafficPacketUpdateOne {
	uctpuo.fields = append([]string{field}, fields...)
	return uctpuo
}

// Save executes the query and returns the updated UpgradeCompanyTrafficPacket entity.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) Save(ctx context.Context) (*UpgradeCompanyTrafficPacket, error) {
	return withHooks(ctx, uctpuo.sqlSave, uctpuo.mutation, uctpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) SaveX(ctx context.Context) *UpgradeCompanyTrafficPacket {
	node, err := uctpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) Exec(ctx context.Context) error {
	_, err := uctpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) ExecX(ctx context.Context) {
	if err := uctpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uctpuo *UpgradeCompanyTrafficPacketUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeCompanyTrafficPacket, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradecompanytrafficpacket.Table, upgradecompanytrafficpacket.Columns, sqlgraph.NewFieldSpec(upgradecompanytrafficpacket.FieldID, field.TypeUint64))
	id, ok := uctpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeCompanyTrafficPacket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uctpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradecompanytrafficpacket.FieldID)
		for _, f := range fields {
			if !upgradecompanytrafficpacket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradecompanytrafficpacket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uctpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uctpuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.PacketID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldPacketID, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.AddedPacketID(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldPacketID, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.StartTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := uctpuo.mutation.EndTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := uctpuo.mutation.InitialSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldInitialSize, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.AddedInitialSize(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldInitialSize, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.RemainingSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldRemainingSize, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.AddedRemainingSize(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldRemainingSize, field.TypeInt, value)
	}
	if value, ok := uctpuo.mutation.Status(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uctpuo.mutation.AddedStatus(); ok {
		_spec.AddField(upgradecompanytrafficpacket.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := uctpuo.mutation.ExchangeTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldExchangeTime, field.TypeTime, value)
	}
	if value, ok := uctpuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCreateAt, field.TypeTime, value)
	}
	if uctpuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradecompanytrafficpacket.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uctpuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldUpdateAt, field.TypeTime, value)
	}
	if uctpuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradecompanytrafficpacket.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeCompanyTrafficPacket{config: uctpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uctpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradecompanytrafficpacket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uctpuo.mutation.done = true
	return _node, nil
}
