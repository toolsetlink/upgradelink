// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpgradeStrategyUpdate is the builder for updating UpgradeUrlUpgradeStrategy entities.
type UpgradeUrlUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyUpdate builder.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeUrlUpgradeStrategy) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.Where(ps...)
	return uuusu
}

// SetCompanyID sets the "company_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetCompanyID()
	uuusu.mutation.SetCompanyID(i)
	return uuusu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetCompanyID(*i)
	}
	return uuusu
}

// AddCompanyID adds i to the "company_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddCompanyID(i)
	return uuusu
}

// SetEnable sets the "enable" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetEnable()
	uuusu.mutation.SetEnable(i)
	return uuusu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetEnable(*i)
	}
	return uuusu
}

// AddEnable adds i to the "enable" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddEnable(i)
	return uuusu
}

// SetName sets the "name" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetName(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetName(s)
	return uuusu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetName(*s)
	}
	return uuusu
}

// SetDescription sets the "description" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetDescription(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetDescription(s)
	return uuusu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetDescription(*s)
	}
	return uuusu
}

// ClearDescription clears the value of the "description" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) ClearDescription() *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ClearDescription()
	return uuusu
}

// SetURLID sets the "url_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetURLID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetURLID()
	uuusu.mutation.SetURLID(i)
	return uuusu
}

// SetNillableURLID sets the "url_id" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableURLID(i *int) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetURLID(*i)
	}
	return uuusu
}

// AddURLID adds i to the "url_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddURLID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddURLID(i)
	return uuusu
}

// SetURLVersionID sets the "url_version_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetURLVersionID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetURLVersionID()
	uuusu.mutation.SetURLVersionID(i)
	return uuusu
}

// SetNillableURLVersionID sets the "url_version_id" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableURLVersionID(i *int) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetURLVersionID(*i)
	}
	return uuusu
}

// AddURLVersionID adds i to the "url_version_id" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddURLVersionID(i int) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddURLVersionID(i)
	return uuusu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetBeginDatetime(t)
	return uuusu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	if t != nil {
		uuusu.SetBeginDatetime(*t)
	}
	return uuusu
}

// SetEndDatetime sets the "end_datetime" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetEndDatetime(t)
	return uuusu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	if t != nil {
		uuusu.SetEndDatetime(*t)
	}
	return uuusu
}

// SetUpgradeType sets the "upgrade_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetUpgradeType()
	uuusu.mutation.SetUpgradeType(i)
	return uuusu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetUpgradeType(*i)
	}
	return uuusu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddUpgradeType(i)
	return uuusu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetPromptUpgradeContent(s)
	return uuusu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetPromptUpgradeContent(*s)
	}
	return uuusu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ClearPromptUpgradeContent()
	return uuusu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetUpgradeDevType()
	uuusu.mutation.SetUpgradeDevType(i)
	return uuusu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetUpgradeDevType(*i)
	}
	return uuusu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddUpgradeDevType(i)
	return uuusu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetUpgradeDevData(s)
	return uuusu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetUpgradeDevData(*s)
	}
	return uuusu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetUpgradeVersionType()
	uuusu.mutation.SetUpgradeVersionType(i)
	return uuusu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetUpgradeVersionType(*i)
	}
	return uuusu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddUpgradeVersionType(i)
	return uuusu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetUpgradeVersionData(s)
	return uuusu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetUpgradeVersionData(*s)
	}
	return uuusu
}

// SetIsGray sets the "is_gray" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetIsGray()
	uuusu.mutation.SetIsGray(i)
	return uuusu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetIsGray(*i)
	}
	return uuusu
}

// AddIsGray adds i to the "is_gray" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddIsGray(i)
	return uuusu
}

// SetGrayData sets the "gray_data" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetGrayData(s)
	return uuusu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetGrayData(*s)
	}
	return uuusu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetIsFlowLimit()
	uuusu.mutation.SetIsFlowLimit(i)
	return uuusu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetIsFlowLimit(*i)
	}
	return uuusu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddIsFlowLimit(i)
	return uuusu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetFlowLimitData(s)
	return uuusu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeUrlUpgradeStrategyUpdate {
	if s != nil {
		uuusu.SetFlowLimitData(*s)
	}
	return uuusu
}

// SetIsDel sets the "is_del" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ResetIsDel()
	uuusu.mutation.SetIsDel(i)
	return uuusu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyUpdate {
	if i != nil {
		uuusu.SetIsDel(*i)
	}
	return uuusu
}

// AddIsDel adds i to the "is_del" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.AddIsDel(i)
	return uuusu
}

// SetCreateAt sets the "create_at" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetCreateAt(t)
	return uuusu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	if t != nil {
		uuusu.SetCreateAt(*t)
	}
	return uuusu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) ClearCreateAt() *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ClearCreateAt()
	return uuusu
}

// SetUpdateAt sets the "update_at" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.SetUpdateAt(t)
	return uuusu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyUpdate {
	if t != nil {
		uuusu.SetUpdateAt(*t)
	}
	return uuusu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeUrlUpgradeStrategyUpdate {
	uuusu.mutation.ClearUpdateAt()
	return uuusu
}

// Mutation returns the UpgradeUrlUpgradeStrategyMutation object of the builder.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) Mutation() *UpgradeUrlUpgradeStrategyMutation {
	return uuusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuusu.sqlSave, uuusu.mutation, uuusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uuusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uuusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusu *UpgradeUrlUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := uuusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusu *UpgradeUrlUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategy.Table, upgradeurlupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategy.FieldID, field.TypeInt))
	if ps := uuusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.Name(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := uuusu.mutation.Description(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if uuusu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := uuusu.mutation.URLID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.AddedURLID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.URLVersionID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldURLVersionID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.AddedURLVersionID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldURLVersionID, field.TypeInt, value)
	}
	if value, ok := uuusu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uuusu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uuusu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if uuusu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := uuusu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := uuusu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := uuusu.mutation.IsGray(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.GrayData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := uuusu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := uuusu.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuusu.mutation.done = true
	return n, nil
}

// UpgradeUrlUpgradeStrategyUpdateOne is the builder for updating a single UpgradeUrlUpgradeStrategy entity.
type UpgradeUrlUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetCompanyID()
	uuusuo.mutation.SetCompanyID(i)
	return uuusuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetCompanyID(*i)
	}
	return uuusuo
}

// AddCompanyID adds i to the "company_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddCompanyID(i)
	return uuusuo
}

// SetEnable sets the "enable" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetEnable()
	uuusuo.mutation.SetEnable(i)
	return uuusuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetEnable(*i)
	}
	return uuusuo
}

// AddEnable adds i to the "enable" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddEnable(i)
	return uuusuo
}

// SetName sets the "name" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetName(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetName(s)
	return uuusuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetName(*s)
	}
	return uuusuo
}

// SetDescription sets the "description" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetDescription(s)
	return uuusuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetDescription(*s)
	}
	return uuusuo
}

// ClearDescription clears the value of the "description" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) ClearDescription() *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ClearDescription()
	return uuusuo
}

// SetURLID sets the "url_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetURLID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetURLID()
	uuusuo.mutation.SetURLID(i)
	return uuusuo
}

// SetNillableURLID sets the "url_id" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableURLID(i *int) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetURLID(*i)
	}
	return uuusuo
}

// AddURLID adds i to the "url_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddURLID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddURLID(i)
	return uuusuo
}

// SetURLVersionID sets the "url_version_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetURLVersionID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetURLVersionID()
	uuusuo.mutation.SetURLVersionID(i)
	return uuusuo
}

// SetNillableURLVersionID sets the "url_version_id" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableURLVersionID(i *int) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetURLVersionID(*i)
	}
	return uuusuo
}

// AddURLVersionID adds i to the "url_version_id" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddURLVersionID(i int) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddURLVersionID(i)
	return uuusuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetBeginDatetime(t)
	return uuusuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	if t != nil {
		uuusuo.SetBeginDatetime(*t)
	}
	return uuusuo
}

// SetEndDatetime sets the "end_datetime" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetEndDatetime(t)
	return uuusuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	if t != nil {
		uuusuo.SetEndDatetime(*t)
	}
	return uuusuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetUpgradeType()
	uuusuo.mutation.SetUpgradeType(i)
	return uuusuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetUpgradeType(*i)
	}
	return uuusuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddUpgradeType(i)
	return uuusuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetPromptUpgradeContent(s)
	return uuusuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetPromptUpgradeContent(*s)
	}
	return uuusuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ClearPromptUpgradeContent()
	return uuusuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetUpgradeDevType()
	uuusuo.mutation.SetUpgradeDevType(i)
	return uuusuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetUpgradeDevType(*i)
	}
	return uuusuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddUpgradeDevType(i)
	return uuusuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetUpgradeDevData(s)
	return uuusuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetUpgradeDevData(*s)
	}
	return uuusuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetUpgradeVersionType()
	uuusuo.mutation.SetUpgradeVersionType(i)
	return uuusuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetUpgradeVersionType(*i)
	}
	return uuusuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddUpgradeVersionType(i)
	return uuusuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetUpgradeVersionData(s)
	return uuusuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetUpgradeVersionData(*s)
	}
	return uuusuo
}

// SetIsGray sets the "is_gray" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetIsGray()
	uuusuo.mutation.SetIsGray(i)
	return uuusuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetIsGray(*i)
	}
	return uuusuo
}

// AddIsGray adds i to the "is_gray" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddIsGray(i)
	return uuusuo
}

// SetGrayData sets the "gray_data" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetGrayData(s)
	return uuusuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetGrayData(*s)
	}
	return uuusuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetIsFlowLimit()
	uuusuo.mutation.SetIsFlowLimit(i)
	return uuusuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetIsFlowLimit(*i)
	}
	return uuusuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddIsFlowLimit(i)
	return uuusuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetFlowLimitData(s)
	return uuusuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeUrlUpgradeStrategyUpdateOne {
	if s != nil {
		uuusuo.SetFlowLimitData(*s)
	}
	return uuusuo
}

// SetIsDel sets the "is_del" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ResetIsDel()
	uuusuo.mutation.SetIsDel(i)
	return uuusuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	if i != nil {
		uuusuo.SetIsDel(*i)
	}
	return uuusuo
}

// AddIsDel adds i to the "is_del" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.AddIsDel(i)
	return uuusuo
}

// SetCreateAt sets the "create_at" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetCreateAt(t)
	return uuusuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	if t != nil {
		uuusuo.SetCreateAt(*t)
	}
	return uuusuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ClearCreateAt()
	return uuusuo
}

// SetUpdateAt sets the "update_at" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.SetUpdateAt(t)
	return uuusuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyUpdateOne {
	if t != nil {
		uuusuo.SetUpdateAt(*t)
	}
	return uuusuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.ClearUpdateAt()
	return uuusuo
}

// Mutation returns the UpgradeUrlUpgradeStrategyMutation object of the builder.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) Mutation() *UpgradeUrlUpgradeStrategyMutation {
	return uuusuo.mutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyUpdate builder.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeUrlUpgradeStrategy) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.mutation.Where(ps...)
	return uuusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeUrlUpgradeStrategyUpdateOne {
	uuusuo.fields = append([]string{field}, fields...)
	return uuusuo
}

// Save executes the query and returns the updated UpgradeUrlUpgradeStrategy entity.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeUrlUpgradeStrategy, error) {
	return withHooks(ctx, uuusuo.sqlSave, uuusuo.mutation, uuusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeUrlUpgradeStrategy {
	node, err := uuusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uuusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uuusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusuo *UpgradeUrlUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeUrlUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategy.Table, upgradeurlupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategy.FieldID, field.TypeInt))
	id, ok := uuusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeUrlUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeurlupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradeurlupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeurlupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.Name(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := uuusuo.mutation.Description(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if uuusuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := uuusuo.mutation.URLID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.AddedURLID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldURLID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.URLVersionID(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldURLVersionID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.AddedURLVersionID(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldURLVersionID, field.TypeInt, value)
	}
	if value, ok := uuusuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uuusuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uuusuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if uuusuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := uuusuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := uuusuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := uuusuo.mutation.IsGray(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.GrayData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := uuusuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := uuusuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeUrlUpgradeStrategy{config: uuusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuusuo.mutation.done = true
	return _node, nil
}
