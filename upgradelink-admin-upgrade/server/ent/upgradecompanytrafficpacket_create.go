// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradecompanytrafficpacket"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeCompanyTrafficPacketCreate is the builder for creating a UpgradeCompanyTrafficPacket entity.
type UpgradeCompanyTrafficPacketCreate struct {
	config
	mutation *UpgradeCompanyTrafficPacketMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetCompanyID(i int) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetCompanyID(i)
	return uctpc
}

// SetPacketID sets the "packet_id" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetPacketID(i int) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetPacketID(i)
	return uctpc
}

// SetStartTime sets the "start_time" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetStartTime(t time.Time) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetStartTime(t)
	return uctpc
}

// SetEndTime sets the "end_time" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetEndTime(t time.Time) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetEndTime(t)
	return uctpc
}

// SetInitialSize sets the "initial_size" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetInitialSize(i int) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetInitialSize(i)
	return uctpc
}

// SetRemainingSize sets the "remaining_size" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetRemainingSize(i int) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetRemainingSize(i)
	return uctpc
}

// SetStatus sets the "status" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetStatus(i int32) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetStatus(i)
	return uctpc
}

// SetExchangeTime sets the "exchange_time" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetExchangeTime(t time.Time) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetExchangeTime(t)
	return uctpc
}

// SetCreateAt sets the "create_at" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetCreateAt(t time.Time) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetCreateAt(t)
	return uctpc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetNillableCreateAt(t *time.Time) *UpgradeCompanyTrafficPacketCreate {
	if t != nil {
		uctpc.SetCreateAt(*t)
	}
	return uctpc
}

// SetUpdateAt sets the "update_at" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetUpdateAt(t time.Time) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetUpdateAt(t)
	return uctpc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetNillableUpdateAt(t *time.Time) *UpgradeCompanyTrafficPacketCreate {
	if t != nil {
		uctpc.SetUpdateAt(*t)
	}
	return uctpc
}

// SetID sets the "id" field.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SetID(u uint64) *UpgradeCompanyTrafficPacketCreate {
	uctpc.mutation.SetID(u)
	return uctpc
}

// Mutation returns the UpgradeCompanyTrafficPacketMutation object of the builder.
func (uctpc *UpgradeCompanyTrafficPacketCreate) Mutation() *UpgradeCompanyTrafficPacketMutation {
	return uctpc.mutation
}

// Save creates the UpgradeCompanyTrafficPacket in the database.
func (uctpc *UpgradeCompanyTrafficPacketCreate) Save(ctx context.Context) (*UpgradeCompanyTrafficPacket, error) {
	return withHooks(ctx, uctpc.sqlSave, uctpc.mutation, uctpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uctpc *UpgradeCompanyTrafficPacketCreate) SaveX(ctx context.Context) *UpgradeCompanyTrafficPacket {
	v, err := uctpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uctpc *UpgradeCompanyTrafficPacketCreate) Exec(ctx context.Context) error {
	_, err := uctpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uctpc *UpgradeCompanyTrafficPacketCreate) ExecX(ctx context.Context) {
	if err := uctpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uctpc *UpgradeCompanyTrafficPacketCreate) check() error {
	if _, ok := uctpc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.company_id"`)}
	}
	if _, ok := uctpc.mutation.PacketID(); !ok {
		return &ValidationError{Name: "packet_id", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.packet_id"`)}
	}
	if _, ok := uctpc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.start_time"`)}
	}
	if _, ok := uctpc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.end_time"`)}
	}
	if _, ok := uctpc.mutation.InitialSize(); !ok {
		return &ValidationError{Name: "initial_size", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.initial_size"`)}
	}
	if _, ok := uctpc.mutation.RemainingSize(); !ok {
		return &ValidationError{Name: "remaining_size", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.remaining_size"`)}
	}
	if _, ok := uctpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.status"`)}
	}
	if _, ok := uctpc.mutation.ExchangeTime(); !ok {
		return &ValidationError{Name: "exchange_time", err: errors.New(`ent: missing required field "UpgradeCompanyTrafficPacket.exchange_time"`)}
	}
	return nil
}

func (uctpc *UpgradeCompanyTrafficPacketCreate) sqlSave(ctx context.Context) (*UpgradeCompanyTrafficPacket, error) {
	if err := uctpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uctpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uctpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	uctpc.mutation.id = &_node.ID
	uctpc.mutation.done = true
	return _node, nil
}

func (uctpc *UpgradeCompanyTrafficPacketCreate) createSpec() (*UpgradeCompanyTrafficPacket, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeCompanyTrafficPacket{config: uctpc.config}
		_spec = sqlgraph.NewCreateSpec(upgradecompanytrafficpacket.Table, sqlgraph.NewFieldSpec(upgradecompanytrafficpacket.FieldID, field.TypeUint64))
	)
	if id, ok := uctpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uctpc.mutation.CompanyID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := uctpc.mutation.PacketID(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldPacketID, field.TypeInt, value)
		_node.PacketID = value
	}
	if value, ok := uctpc.mutation.StartTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := uctpc.mutation.EndTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := uctpc.mutation.InitialSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldInitialSize, field.TypeInt, value)
		_node.InitialSize = value
	}
	if value, ok := uctpc.mutation.RemainingSize(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldRemainingSize, field.TypeInt, value)
		_node.RemainingSize = value
	}
	if value, ok := uctpc.mutation.Status(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := uctpc.mutation.ExchangeTime(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldExchangeTime, field.TypeTime, value)
		_node.ExchangeTime = value
	}
	if value, ok := uctpc.mutation.CreateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := uctpc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradecompanytrafficpacket.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeCompanyTrafficPacketCreateBulk is the builder for creating many UpgradeCompanyTrafficPacket entities in bulk.
type UpgradeCompanyTrafficPacketCreateBulk struct {
	config
	err      error
	builders []*UpgradeCompanyTrafficPacketCreate
}

// Save creates the UpgradeCompanyTrafficPacket entities in the database.
func (uctpcb *UpgradeCompanyTrafficPacketCreateBulk) Save(ctx context.Context) ([]*UpgradeCompanyTrafficPacket, error) {
	if uctpcb.err != nil {
		return nil, uctpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uctpcb.builders))
	nodes := make([]*UpgradeCompanyTrafficPacket, len(uctpcb.builders))
	mutators := make([]Mutator, len(uctpcb.builders))
	for i := range uctpcb.builders {
		func(i int, root context.Context) {
			builder := uctpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeCompanyTrafficPacketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uctpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uctpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uctpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uctpcb *UpgradeCompanyTrafficPacketCreateBulk) SaveX(ctx context.Context) []*UpgradeCompanyTrafficPacket {
	v, err := uctpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uctpcb *UpgradeCompanyTrafficPacketCreateBulk) Exec(ctx context.Context) error {
	_, err := uctpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uctpcb *UpgradeCompanyTrafficPacketCreateBulk) ExecX(ctx context.Context) {
	if err := uctpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
