// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectron"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronDelete is the builder for deleting a UpgradeElectron entity.
type UpgradeElectronDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronMutation
}

// Where appends a list predicates to the UpgradeElectronDelete builder.
func (ued *UpgradeElectronDelete) Where(ps ...predicate.UpgradeElectron) *UpgradeElectronDelete {
	ued.mutation.Where(ps...)
	return ued
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ued *UpgradeElectronDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ued.sqlExec, ued.mutation, ued.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ued *UpgradeElectronDelete) ExecX(ctx context.Context) int {
	n, err := ued.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ued *UpgradeElectronDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeelectron.Table, sqlgraph.NewFieldSpec(upgradeelectron.FieldID, field.TypeInt))
	if ps := ued.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ued.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ued.mutation.done = true
	return affected, err
}

// UpgradeElectronDeleteOne is the builder for deleting a single UpgradeElectron entity.
type UpgradeElectronDeleteOne struct {
	ued *UpgradeElectronDelete
}

// Where appends a list predicates to the UpgradeElectronDelete builder.
func (uedo *UpgradeElectronDeleteOne) Where(ps ...predicate.UpgradeElectron) *UpgradeElectronDeleteOne {
	uedo.ued.mutation.Where(ps...)
	return uedo
}

// Exec executes the deletion query.
func (uedo *UpgradeElectronDeleteOne) Exec(ctx context.Context) error {
	n, err := uedo.ued.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeelectron.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uedo *UpgradeElectronDeleteOne) ExecX(ctx context.Context) {
	if err := uedo.Exec(ctx); err != nil {
		panic(err)
	}
}
