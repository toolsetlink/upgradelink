// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyGrayStrategyCreate is the builder for creating a UpgradeElectronUpgradeStrategyGrayStrategy entity.
type UpgradeElectronUpgradeStrategyGrayStrategyCreate struct {
	config
	mutation *UpgradeElectronUpgradeStrategyGrayStrategyMutation
	hooks    []Hook
}

// SetEnable sets the "enable" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetEnable(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetEnable(i)
	return ueusgsc
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetBeginDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetBeginDatetime(t)
	return ueusgsc
}

// SetEndDatetime sets the "end_datetime" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetEndDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetEndDatetime(t)
	return ueusgsc
}

// SetLimit sets the "limit" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetLimit(i int) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetLimit(i)
	return ueusgsc
}

// SetIsDel sets the "is_del" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetIsDel(i)
	return ueusgsc
}

// SetCreateAt sets the "create_at" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetCreateAt(t)
	return ueusgsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	if t != nil {
		ueusgsc.SetCreateAt(*t)
	}
	return ueusgsc
}

// SetUpdateAt sets the "update_at" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetUpdateAt(t)
	return ueusgsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	if t != nil {
		ueusgsc.SetUpdateAt(*t)
	}
	return ueusgsc
}

// SetID sets the "id" field.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SetID(i int) *UpgradeElectronUpgradeStrategyGrayStrategyCreate {
	ueusgsc.mutation.SetID(i)
	return ueusgsc
}

// Mutation returns the UpgradeElectronUpgradeStrategyGrayStrategyMutation object of the builder.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) Mutation() *UpgradeElectronUpgradeStrategyGrayStrategyMutation {
	return ueusgsc.mutation
}

// Save creates the UpgradeElectronUpgradeStrategyGrayStrategy in the database.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) Save(ctx context.Context) (*UpgradeElectronUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, ueusgsc.sqlSave, ueusgsc.mutation, ueusgsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) SaveX(ctx context.Context) *UpgradeElectronUpgradeStrategyGrayStrategy {
	v, err := ueusgsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) Exec(ctx context.Context) error {
	_, err := ueusgsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) ExecX(ctx context.Context) {
	if err := ueusgsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) check() error {
	if _, ok := ueusgsc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "UpgradeElectronUpgradeStrategyGrayStrategy.enable"`)}
	}
	if _, ok := ueusgsc.mutation.BeginDatetime(); !ok {
		return &ValidationError{Name: "begin_datetime", err: errors.New(`ent: missing required field "UpgradeElectronUpgradeStrategyGrayStrategy.begin_datetime"`)}
	}
	if _, ok := ueusgsc.mutation.EndDatetime(); !ok {
		return &ValidationError{Name: "end_datetime", err: errors.New(`ent: missing required field "UpgradeElectronUpgradeStrategyGrayStrategy.end_datetime"`)}
	}
	if _, ok := ueusgsc.mutation.Limit(); !ok {
		return &ValidationError{Name: "limit", err: errors.New(`ent: missing required field "UpgradeElectronUpgradeStrategyGrayStrategy.limit"`)}
	}
	if _, ok := ueusgsc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeElectronUpgradeStrategyGrayStrategy.is_del"`)}
	}
	return nil
}

func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) sqlSave(ctx context.Context) (*UpgradeElectronUpgradeStrategyGrayStrategy, error) {
	if err := ueusgsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ueusgsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ueusgsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ueusgsc.mutation.id = &_node.ID
	ueusgsc.mutation.done = true
	return _node, nil
}

func (ueusgsc *UpgradeElectronUpgradeStrategyGrayStrategyCreate) createSpec() (*UpgradeElectronUpgradeStrategyGrayStrategy, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeElectronUpgradeStrategyGrayStrategy{config: ueusgsc.config}
		_spec = sqlgraph.NewCreateSpec(upgradeelectronupgradestrategygraystrategy.Table, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategygraystrategy.FieldID, field.TypeInt))
	)
	if id, ok := ueusgsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ueusgsc.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
		_node.Enable = value
	}
	if value, ok := ueusgsc.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
		_node.BeginDatetime = value
	}
	if value, ok := ueusgsc.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
		_node.EndDatetime = value
	}
	if value, ok := ueusgsc.mutation.Limit(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
		_node.Limit = value
	}
	if value, ok := ueusgsc.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := ueusgsc.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := ueusgsc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk is the builder for creating many UpgradeElectronUpgradeStrategyGrayStrategy entities in bulk.
type UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk struct {
	config
	err      error
	builders []*UpgradeElectronUpgradeStrategyGrayStrategyCreate
}

// Save creates the UpgradeElectronUpgradeStrategyGrayStrategy entities in the database.
func (ueusgscb *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk) Save(ctx context.Context) ([]*UpgradeElectronUpgradeStrategyGrayStrategy, error) {
	if ueusgscb.err != nil {
		return nil, ueusgscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ueusgscb.builders))
	nodes := make([]*UpgradeElectronUpgradeStrategyGrayStrategy, len(ueusgscb.builders))
	mutators := make([]Mutator, len(ueusgscb.builders))
	for i := range ueusgscb.builders {
		func(i int, root context.Context) {
			builder := ueusgscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeElectronUpgradeStrategyGrayStrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ueusgscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ueusgscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ueusgscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ueusgscb *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk) SaveX(ctx context.Context) []*UpgradeElectronUpgradeStrategyGrayStrategy {
	v, err := ueusgscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ueusgscb *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := ueusgscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgscb *UpgradeElectronUpgradeStrategyGrayStrategyCreateBulk) ExecX(ctx context.Context) {
	if err := ueusgscb.Exec(ctx); err != nil {
		panic(err)
	}
}
