// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeUrlUpgradeStrategyFlowLimitStrategy entity.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete builder.
func (uuusflsd *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete {
	uuusflsd.mutation.Where(ps...)
	return uuusflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uuusflsd *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uuusflsd.sqlExec, uuusflsd.mutation, uuusflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusflsd *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := uuusflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uuusflsd *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeurlupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradeurlupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := uuusflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uuusflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uuusflsd.mutation.done = true
	return affected, err
}

// UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeUrlUpgradeStrategyFlowLimitStrategy entity.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	uuusflsd *UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyFlowLimitStrategyDelete builder.
func (uuusflsdo *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne {
	uuusflsdo.uuusflsd.mutation.Where(ps...)
	return uuusflsdo
}

// Exec executes the deletion query.
func (uuusflsdo *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := uuusflsdo.uuusflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeurlupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusflsdo *UpgradeUrlUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := uuusflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
