// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"upgradelink-admin-upgrade/server/ent"
	"upgradelink-admin-upgrade/server/ent/fmscloudfile"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/sysuser"
	"upgradelink-admin-upgrade/server/ent/upgradeapk"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeapkversion"
	"upgradelink-admin-upgrade/server/ent/upgradeappdownloadreportlog"
	"upgradelink-admin-upgrade/server/ent/upgradecompanyincome"
	"upgradelink-admin-upgrade/server/ent/upgradecompanytrafficpacket"
	"upgradelink-admin-upgrade/server/ent/upgradeconfiguration"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationversion"
	"upgradelink-admin-upgrade/server/ent/upgradedev"
	"upgradelink-admin-upgrade/server/ent/upgradedevgroup"
	"upgradelink-admin-upgrade/server/ent/upgradedevgrouprelation"
	"upgradelink-admin-upgrade/server/ent/upgradedevmodel"
	"upgradelink-admin-upgrade/server/ent/upgradeelectron"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronversion"
	"upgradelink-admin-upgrade/server/ent/upgradefile"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradefileversion"
	"upgradelink-admin-upgrade/server/ent/upgradetauri"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradetauriversion"
	"upgradelink-admin-upgrade/server/ent/upgradetrafficpacket"
	"upgradelink-admin-upgrade/server/ent/upgradeurl"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategyflowlimitstrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategygraystrategy"
	"upgradelink-admin-upgrade/server/ent/upgradeurlversion"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The FmsCloudFileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FmsCloudFileFunc func(context.Context, *ent.FmsCloudFileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FmsCloudFileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FmsCloudFileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FmsCloudFileQuery", q)
}

// The TraverseFmsCloudFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFmsCloudFile func(context.Context, *ent.FmsCloudFileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFmsCloudFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFmsCloudFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FmsCloudFileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FmsCloudFileQuery", q)
}

// The SysUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserFunc func(context.Context, *ent.SysUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysUserQuery", q)
}

// The TraverseSysUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUser func(context.Context, *ent.SysUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysUserQuery", q)
}

// The UpgradeApkFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeApkFunc func(context.Context, *ent.UpgradeApkQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeApkFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeApkQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkQuery", q)
}

// The TraverseUpgradeApk type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeApk func(context.Context, *ent.UpgradeApkQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeApk) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeApk) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeApkQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkQuery", q)
}

// The UpgradeApkUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeApkUpgradeStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeApkUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyQuery", q)
}

// The TraverseUpgradeApkUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeApkUpgradeStrategy func(context.Context, *ent.UpgradeApkUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeApkUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeApkUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyQuery", q)
}

// The UpgradeApkUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeApkUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeApkUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeApkUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeApkUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeApkUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeApkUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeApkUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeApkUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeApkUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeApkUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeApkUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeApkUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeApkUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeApkUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeApkUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeApkUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeApkVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeApkVersionFunc func(context.Context, *ent.UpgradeApkVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeApkVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeApkVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkVersionQuery", q)
}

// The TraverseUpgradeApkVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeApkVersion func(context.Context, *ent.UpgradeApkVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeApkVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeApkVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeApkVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeApkVersionQuery", q)
}

// The UpgradeAppDownloadReportLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeAppDownloadReportLogFunc func(context.Context, *ent.UpgradeAppDownloadReportLogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeAppDownloadReportLogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeAppDownloadReportLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeAppDownloadReportLogQuery", q)
}

// The TraverseUpgradeAppDownloadReportLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeAppDownloadReportLog func(context.Context, *ent.UpgradeAppDownloadReportLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeAppDownloadReportLog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeAppDownloadReportLog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeAppDownloadReportLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeAppDownloadReportLogQuery", q)
}

// The UpgradeCompanyIncomeFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeCompanyIncomeFunc func(context.Context, *ent.UpgradeCompanyIncomeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeCompanyIncomeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeCompanyIncomeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeCompanyIncomeQuery", q)
}

// The TraverseUpgradeCompanyIncome type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeCompanyIncome func(context.Context, *ent.UpgradeCompanyIncomeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeCompanyIncome) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeCompanyIncome) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeCompanyIncomeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeCompanyIncomeQuery", q)
}

// The UpgradeCompanyTrafficPacketFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeCompanyTrafficPacketFunc func(context.Context, *ent.UpgradeCompanyTrafficPacketQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeCompanyTrafficPacketFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeCompanyTrafficPacketQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeCompanyTrafficPacketQuery", q)
}

// The TraverseUpgradeCompanyTrafficPacket type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeCompanyTrafficPacket func(context.Context, *ent.UpgradeCompanyTrafficPacketQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeCompanyTrafficPacket) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeCompanyTrafficPacket) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeCompanyTrafficPacketQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeCompanyTrafficPacketQuery", q)
}

// The UpgradeConfigurationFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeConfigurationFunc func(context.Context, *ent.UpgradeConfigurationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeConfigurationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeConfigurationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationQuery", q)
}

// The TraverseUpgradeConfiguration type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeConfiguration func(context.Context, *ent.UpgradeConfigurationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeConfiguration) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeConfiguration) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeConfigurationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationQuery", q)
}

// The UpgradeConfigurationUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeConfigurationUpgradeStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeConfigurationUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyQuery", q)
}

// The TraverseUpgradeConfigurationUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeConfigurationUpgradeStrategy func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeConfigurationUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeConfigurationUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyQuery", q)
}

// The UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeConfigurationUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeConfigurationUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeConfigurationUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeConfigurationUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeConfigurationUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeConfigurationUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeConfigurationUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeConfigurationUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeConfigurationUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeConfigurationUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeConfigurationUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeConfigurationUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeConfigurationVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeConfigurationVersionFunc func(context.Context, *ent.UpgradeConfigurationVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeConfigurationVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeConfigurationVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationVersionQuery", q)
}

// The TraverseUpgradeConfigurationVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeConfigurationVersion func(context.Context, *ent.UpgradeConfigurationVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeConfigurationVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeConfigurationVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeConfigurationVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeConfigurationVersionQuery", q)
}

// The UpgradeDevFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeDevFunc func(context.Context, *ent.UpgradeDevQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeDevFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeDevQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevQuery", q)
}

// The TraverseUpgradeDev type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeDev func(context.Context, *ent.UpgradeDevQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeDev) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeDev) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeDevQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevQuery", q)
}

// The UpgradeDevGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeDevGroupFunc func(context.Context, *ent.UpgradeDevGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeDevGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeDevGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevGroupQuery", q)
}

// The TraverseUpgradeDevGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeDevGroup func(context.Context, *ent.UpgradeDevGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeDevGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeDevGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeDevGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevGroupQuery", q)
}

// The UpgradeDevGroupRelationFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeDevGroupRelationFunc func(context.Context, *ent.UpgradeDevGroupRelationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeDevGroupRelationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeDevGroupRelationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevGroupRelationQuery", q)
}

// The TraverseUpgradeDevGroupRelation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeDevGroupRelation func(context.Context, *ent.UpgradeDevGroupRelationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeDevGroupRelation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeDevGroupRelation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeDevGroupRelationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevGroupRelationQuery", q)
}

// The UpgradeDevModelFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeDevModelFunc func(context.Context, *ent.UpgradeDevModelQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeDevModelFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeDevModelQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevModelQuery", q)
}

// The TraverseUpgradeDevModel type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeDevModel func(context.Context, *ent.UpgradeDevModelQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeDevModel) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeDevModel) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeDevModelQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeDevModelQuery", q)
}

// The UpgradeElectronFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeElectronFunc func(context.Context, *ent.UpgradeElectronQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeElectronFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeElectronQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronQuery", q)
}

// The TraverseUpgradeElectron type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeElectron func(context.Context, *ent.UpgradeElectronQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeElectron) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeElectron) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeElectronQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronQuery", q)
}

// The UpgradeElectronUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeElectronUpgradeStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeElectronUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyQuery", q)
}

// The TraverseUpgradeElectronUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeElectronUpgradeStrategy func(context.Context, *ent.UpgradeElectronUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeElectronUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeElectronUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyQuery", q)
}

// The UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeElectronUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeElectronUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeElectronUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeElectronUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeElectronUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeElectronUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeElectronUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeElectronUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeElectronUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeElectronUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeElectronUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeElectronUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeElectronVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeElectronVersionFunc func(context.Context, *ent.UpgradeElectronVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeElectronVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeElectronVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronVersionQuery", q)
}

// The TraverseUpgradeElectronVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeElectronVersion func(context.Context, *ent.UpgradeElectronVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeElectronVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeElectronVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeElectronVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeElectronVersionQuery", q)
}

// The UpgradeFileFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeFileFunc func(context.Context, *ent.UpgradeFileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeFileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeFileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileQuery", q)
}

// The TraverseUpgradeFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeFile func(context.Context, *ent.UpgradeFileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeFileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileQuery", q)
}

// The UpgradeFileUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeFileUpgradeStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeFileUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyQuery", q)
}

// The TraverseUpgradeFileUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeFileUpgradeStrategy func(context.Context, *ent.UpgradeFileUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeFileUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeFileUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyQuery", q)
}

// The UpgradeFileUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeFileUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeFileUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeFileUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeFileUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeFileUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeFileUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeFileUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeFileUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeFileUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeFileUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeFileUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeFileUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeFileUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeFileUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeFileUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeFileUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeFileVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeFileVersionFunc func(context.Context, *ent.UpgradeFileVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeFileVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeFileVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileVersionQuery", q)
}

// The TraverseUpgradeFileVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeFileVersion func(context.Context, *ent.UpgradeFileVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeFileVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeFileVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeFileVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeFileVersionQuery", q)
}

// The UpgradeTauriFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTauriFunc func(context.Context, *ent.UpgradeTauriQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTauriFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTauriQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriQuery", q)
}

// The TraverseUpgradeTauri type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTauri func(context.Context, *ent.UpgradeTauriQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTauri) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTauri) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTauriQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriQuery", q)
}

// The UpgradeTauriUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTauriUpgradeStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTauriUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyQuery", q)
}

// The TraverseUpgradeTauriUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTauriUpgradeStrategy func(context.Context, *ent.UpgradeTauriUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTauriUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTauriUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyQuery", q)
}

// The UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTauriUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeTauriUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTauriUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTauriUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTauriUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeTauriUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTauriUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTauriUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeTauriUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTauriUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTauriUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTauriUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeTauriVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTauriVersionFunc func(context.Context, *ent.UpgradeTauriVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTauriVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTauriVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriVersionQuery", q)
}

// The TraverseUpgradeTauriVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTauriVersion func(context.Context, *ent.UpgradeTauriVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTauriVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTauriVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTauriVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTauriVersionQuery", q)
}

// The UpgradeTrafficPacketFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeTrafficPacketFunc func(context.Context, *ent.UpgradeTrafficPacketQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeTrafficPacketFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeTrafficPacketQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTrafficPacketQuery", q)
}

// The TraverseUpgradeTrafficPacket type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeTrafficPacket func(context.Context, *ent.UpgradeTrafficPacketQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeTrafficPacket) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeTrafficPacket) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeTrafficPacketQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeTrafficPacketQuery", q)
}

// The UpgradeUrlFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeUrlFunc func(context.Context, *ent.UpgradeUrlQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeUrlFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeUrlQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlQuery", q)
}

// The TraverseUpgradeUrl type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeUrl func(context.Context, *ent.UpgradeUrlQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeUrl) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeUrl) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeUrlQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlQuery", q)
}

// The UpgradeUrlUpgradeStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeUrlUpgradeStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeUrlUpgradeStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyQuery", q)
}

// The TraverseUpgradeUrlUpgradeStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeUrlUpgradeStrategy func(context.Context, *ent.UpgradeUrlUpgradeStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeUrlUpgradeStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeUrlUpgradeStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyQuery", q)
}

// The UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeUrlUpgradeStrategyFlowLimitStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The TraverseUpgradeUrlUpgradeStrategyFlowLimitStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeUrlUpgradeStrategyFlowLimitStrategy func(context.Context, *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeUrlUpgradeStrategyFlowLimitStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeUrlUpgradeStrategyFlowLimitStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery", q)
}

// The UpgradeUrlUpgradeStrategyGrayStrategyFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeUrlUpgradeStrategyGrayStrategyFunc func(context.Context, *ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeUrlUpgradeStrategyGrayStrategyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery", q)
}

// The TraverseUpgradeUrlUpgradeStrategyGrayStrategy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeUrlUpgradeStrategyGrayStrategy func(context.Context, *ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeUrlUpgradeStrategyGrayStrategy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeUrlUpgradeStrategyGrayStrategy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery", q)
}

// The UpgradeUrlVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UpgradeUrlVersionFunc func(context.Context, *ent.UpgradeUrlVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UpgradeUrlVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UpgradeUrlVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlVersionQuery", q)
}

// The TraverseUpgradeUrlVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUpgradeUrlVersion func(context.Context, *ent.UpgradeUrlVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUpgradeUrlVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUpgradeUrlVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UpgradeUrlVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UpgradeUrlVersionQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.FmsCloudFileQuery:
		return &query[*ent.FmsCloudFileQuery, predicate.FmsCloudFile, fmscloudfile.OrderOption]{typ: ent.TypeFmsCloudFile, tq: q}, nil
	case *ent.SysUserQuery:
		return &query[*ent.SysUserQuery, predicate.SysUser, sysuser.OrderOption]{typ: ent.TypeSysUser, tq: q}, nil
	case *ent.UpgradeApkQuery:
		return &query[*ent.UpgradeApkQuery, predicate.UpgradeApk, upgradeapk.OrderOption]{typ: ent.TypeUpgradeApk, tq: q}, nil
	case *ent.UpgradeApkUpgradeStrategyQuery:
		return &query[*ent.UpgradeApkUpgradeStrategyQuery, predicate.UpgradeApkUpgradeStrategy, upgradeapkupgradestrategy.OrderOption]{typ: ent.TypeUpgradeApkUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeApkUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeApkUpgradeStrategyFlowLimitStrategy, upgradeapkupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeApkUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeApkUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeApkUpgradeStrategyGrayStrategyQuery, predicate.UpgradeApkUpgradeStrategyGrayStrategy, upgradeapkupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeApkUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeApkVersionQuery:
		return &query[*ent.UpgradeApkVersionQuery, predicate.UpgradeApkVersion, upgradeapkversion.OrderOption]{typ: ent.TypeUpgradeApkVersion, tq: q}, nil
	case *ent.UpgradeAppDownloadReportLogQuery:
		return &query[*ent.UpgradeAppDownloadReportLogQuery, predicate.UpgradeAppDownloadReportLog, upgradeappdownloadreportlog.OrderOption]{typ: ent.TypeUpgradeAppDownloadReportLog, tq: q}, nil
	case *ent.UpgradeCompanyIncomeQuery:
		return &query[*ent.UpgradeCompanyIncomeQuery, predicate.UpgradeCompanyIncome, upgradecompanyincome.OrderOption]{typ: ent.TypeUpgradeCompanyIncome, tq: q}, nil
	case *ent.UpgradeCompanyTrafficPacketQuery:
		return &query[*ent.UpgradeCompanyTrafficPacketQuery, predicate.UpgradeCompanyTrafficPacket, upgradecompanytrafficpacket.OrderOption]{typ: ent.TypeUpgradeCompanyTrafficPacket, tq: q}, nil
	case *ent.UpgradeConfigurationQuery:
		return &query[*ent.UpgradeConfigurationQuery, predicate.UpgradeConfiguration, upgradeconfiguration.OrderOption]{typ: ent.TypeUpgradeConfiguration, tq: q}, nil
	case *ent.UpgradeConfigurationUpgradeStrategyQuery:
		return &query[*ent.UpgradeConfigurationUpgradeStrategyQuery, predicate.UpgradeConfigurationUpgradeStrategy, upgradeconfigurationupgradestrategy.OrderOption]{typ: ent.TypeUpgradeConfigurationUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeConfigurationUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeConfigurationUpgradeStrategyFlowLimitStrategy, upgradeconfigurationupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeConfigurationUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeConfigurationUpgradeStrategyGrayStrategyQuery, predicate.UpgradeConfigurationUpgradeStrategyGrayStrategy, upgradeconfigurationupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeConfigurationUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeConfigurationVersionQuery:
		return &query[*ent.UpgradeConfigurationVersionQuery, predicate.UpgradeConfigurationVersion, upgradeconfigurationversion.OrderOption]{typ: ent.TypeUpgradeConfigurationVersion, tq: q}, nil
	case *ent.UpgradeDevQuery:
		return &query[*ent.UpgradeDevQuery, predicate.UpgradeDev, upgradedev.OrderOption]{typ: ent.TypeUpgradeDev, tq: q}, nil
	case *ent.UpgradeDevGroupQuery:
		return &query[*ent.UpgradeDevGroupQuery, predicate.UpgradeDevGroup, upgradedevgroup.OrderOption]{typ: ent.TypeUpgradeDevGroup, tq: q}, nil
	case *ent.UpgradeDevGroupRelationQuery:
		return &query[*ent.UpgradeDevGroupRelationQuery, predicate.UpgradeDevGroupRelation, upgradedevgrouprelation.OrderOption]{typ: ent.TypeUpgradeDevGroupRelation, tq: q}, nil
	case *ent.UpgradeDevModelQuery:
		return &query[*ent.UpgradeDevModelQuery, predicate.UpgradeDevModel, upgradedevmodel.OrderOption]{typ: ent.TypeUpgradeDevModel, tq: q}, nil
	case *ent.UpgradeElectronQuery:
		return &query[*ent.UpgradeElectronQuery, predicate.UpgradeElectron, upgradeelectron.OrderOption]{typ: ent.TypeUpgradeElectron, tq: q}, nil
	case *ent.UpgradeElectronUpgradeStrategyQuery:
		return &query[*ent.UpgradeElectronUpgradeStrategyQuery, predicate.UpgradeElectronUpgradeStrategy, upgradeelectronupgradestrategy.OrderOption]{typ: ent.TypeUpgradeElectronUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeElectronUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeElectronUpgradeStrategyFlowLimitStrategy, upgradeelectronupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeElectronUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeElectronUpgradeStrategyGrayStrategyQuery, predicate.UpgradeElectronUpgradeStrategyGrayStrategy, upgradeelectronupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeElectronUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeElectronVersionQuery:
		return &query[*ent.UpgradeElectronVersionQuery, predicate.UpgradeElectronVersion, upgradeelectronversion.OrderOption]{typ: ent.TypeUpgradeElectronVersion, tq: q}, nil
	case *ent.UpgradeFileQuery:
		return &query[*ent.UpgradeFileQuery, predicate.UpgradeFile, upgradefile.OrderOption]{typ: ent.TypeUpgradeFile, tq: q}, nil
	case *ent.UpgradeFileUpgradeStrategyQuery:
		return &query[*ent.UpgradeFileUpgradeStrategyQuery, predicate.UpgradeFileUpgradeStrategy, upgradefileupgradestrategy.OrderOption]{typ: ent.TypeUpgradeFileUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeFileUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeFileUpgradeStrategyFlowLimitStrategy, upgradefileupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeFileUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeFileUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeFileUpgradeStrategyGrayStrategyQuery, predicate.UpgradeFileUpgradeStrategyGrayStrategy, upgradefileupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeFileUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeFileVersionQuery:
		return &query[*ent.UpgradeFileVersionQuery, predicate.UpgradeFileVersion, upgradefileversion.OrderOption]{typ: ent.TypeUpgradeFileVersion, tq: q}, nil
	case *ent.UpgradeTauriQuery:
		return &query[*ent.UpgradeTauriQuery, predicate.UpgradeTauri, upgradetauri.OrderOption]{typ: ent.TypeUpgradeTauri, tq: q}, nil
	case *ent.UpgradeTauriUpgradeStrategyQuery:
		return &query[*ent.UpgradeTauriUpgradeStrategyQuery, predicate.UpgradeTauriUpgradeStrategy, upgradetauriupgradestrategy.OrderOption]{typ: ent.TypeUpgradeTauriUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeTauriUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy, upgradetauriupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeTauriUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeTauriUpgradeStrategyGrayStrategyQuery, predicate.UpgradeTauriUpgradeStrategyGrayStrategy, upgradetauriupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeTauriUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeTauriVersionQuery:
		return &query[*ent.UpgradeTauriVersionQuery, predicate.UpgradeTauriVersion, upgradetauriversion.OrderOption]{typ: ent.TypeUpgradeTauriVersion, tq: q}, nil
	case *ent.UpgradeTrafficPacketQuery:
		return &query[*ent.UpgradeTrafficPacketQuery, predicate.UpgradeTrafficPacket, upgradetrafficpacket.OrderOption]{typ: ent.TypeUpgradeTrafficPacket, tq: q}, nil
	case *ent.UpgradeUrlQuery:
		return &query[*ent.UpgradeUrlQuery, predicate.UpgradeUrl, upgradeurl.OrderOption]{typ: ent.TypeUpgradeUrl, tq: q}, nil
	case *ent.UpgradeUrlUpgradeStrategyQuery:
		return &query[*ent.UpgradeUrlUpgradeStrategyQuery, predicate.UpgradeUrlUpgradeStrategy, upgradeurlupgradestrategy.OrderOption]{typ: ent.TypeUpgradeUrlUpgradeStrategy, tq: q}, nil
	case *ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery:
		return &query[*ent.UpgradeUrlUpgradeStrategyFlowLimitStrategyQuery, predicate.UpgradeUrlUpgradeStrategyFlowLimitStrategy, upgradeurlupgradestrategyflowlimitstrategy.OrderOption]{typ: ent.TypeUpgradeUrlUpgradeStrategyFlowLimitStrategy, tq: q}, nil
	case *ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery:
		return &query[*ent.UpgradeUrlUpgradeStrategyGrayStrategyQuery, predicate.UpgradeUrlUpgradeStrategyGrayStrategy, upgradeurlupgradestrategygraystrategy.OrderOption]{typ: ent.TypeUpgradeUrlUpgradeStrategyGrayStrategy, tq: q}, nil
	case *ent.UpgradeUrlVersionQuery:
		return &query[*ent.UpgradeUrlVersionQuery, predicate.UpgradeUrlVersion, upgradeurlversion.OrderOption]{typ: ent.TypeUpgradeUrlVersion, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
