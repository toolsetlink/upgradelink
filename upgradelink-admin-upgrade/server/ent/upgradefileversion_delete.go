// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradefileversion"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileVersionDelete is the builder for deleting a UpgradeFileVersion entity.
type UpgradeFileVersionDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeFileVersionMutation
}

// Where appends a list predicates to the UpgradeFileVersionDelete builder.
func (ufvd *UpgradeFileVersionDelete) Where(ps ...predicate.UpgradeFileVersion) *UpgradeFileVersionDelete {
	ufvd.mutation.Where(ps...)
	return ufvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufvd *UpgradeFileVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufvd.sqlExec, ufvd.mutation, ufvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufvd *UpgradeFileVersionDelete) ExecX(ctx context.Context) int {
	n, err := ufvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufvd *UpgradeFileVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradefileversion.Table, sqlgraph.NewFieldSpec(upgradefileversion.FieldID, field.TypeInt))
	if ps := ufvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufvd.mutation.done = true
	return affected, err
}

// UpgradeFileVersionDeleteOne is the builder for deleting a single UpgradeFileVersion entity.
type UpgradeFileVersionDeleteOne struct {
	ufvd *UpgradeFileVersionDelete
}

// Where appends a list predicates to the UpgradeFileVersionDelete builder.
func (ufvdo *UpgradeFileVersionDeleteOne) Where(ps ...predicate.UpgradeFileVersion) *UpgradeFileVersionDeleteOne {
	ufvdo.ufvd.mutation.Where(ps...)
	return ufvdo
}

// Exec executes the deletion query.
func (ufvdo *UpgradeFileVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := ufvdo.ufvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradefileversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufvdo *UpgradeFileVersionDeleteOne) ExecX(ctx context.Context) {
	if err := ufvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
