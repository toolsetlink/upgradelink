// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapk"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpdate is the builder for updating UpgradeApk entities.
type UpgradeApkUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeApkMutation
}

// Where appends a list predicates to the UpgradeApkUpdate builder.
func (uau *UpgradeApkUpdate) Where(ps ...predicate.UpgradeApk) *UpgradeApkUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetCompanyID sets the "company_id" field.
func (uau *UpgradeApkUpdate) SetCompanyID(i int) *UpgradeApkUpdate {
	uau.mutation.ResetCompanyID()
	uau.mutation.SetCompanyID(i)
	return uau
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableCompanyID(i *int) *UpgradeApkUpdate {
	if i != nil {
		uau.SetCompanyID(*i)
	}
	return uau
}

// AddCompanyID adds i to the "company_id" field.
func (uau *UpgradeApkUpdate) AddCompanyID(i int) *UpgradeApkUpdate {
	uau.mutation.AddCompanyID(i)
	return uau
}

// SetKey sets the "key" field.
func (uau *UpgradeApkUpdate) SetKey(s string) *UpgradeApkUpdate {
	uau.mutation.SetKey(s)
	return uau
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableKey(s *string) *UpgradeApkUpdate {
	if s != nil {
		uau.SetKey(*s)
	}
	return uau
}

// SetName sets the "name" field.
func (uau *UpgradeApkUpdate) SetName(s string) *UpgradeApkUpdate {
	uau.mutation.SetName(s)
	return uau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableName(s *string) *UpgradeApkUpdate {
	if s != nil {
		uau.SetName(*s)
	}
	return uau
}

// SetPackageName sets the "package_name" field.
func (uau *UpgradeApkUpdate) SetPackageName(s string) *UpgradeApkUpdate {
	uau.mutation.SetPackageName(s)
	return uau
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillablePackageName(s *string) *UpgradeApkUpdate {
	if s != nil {
		uau.SetPackageName(*s)
	}
	return uau
}

// SetDescription sets the "description" field.
func (uau *UpgradeApkUpdate) SetDescription(s string) *UpgradeApkUpdate {
	uau.mutation.SetDescription(s)
	return uau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableDescription(s *string) *UpgradeApkUpdate {
	if s != nil {
		uau.SetDescription(*s)
	}
	return uau
}

// ClearDescription clears the value of the "description" field.
func (uau *UpgradeApkUpdate) ClearDescription() *UpgradeApkUpdate {
	uau.mutation.ClearDescription()
	return uau
}

// SetIsDel sets the "is_del" field.
func (uau *UpgradeApkUpdate) SetIsDel(i int32) *UpgradeApkUpdate {
	uau.mutation.ResetIsDel()
	uau.mutation.SetIsDel(i)
	return uau
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableIsDel(i *int32) *UpgradeApkUpdate {
	if i != nil {
		uau.SetIsDel(*i)
	}
	return uau
}

// AddIsDel adds i to the "is_del" field.
func (uau *UpgradeApkUpdate) AddIsDel(i int32) *UpgradeApkUpdate {
	uau.mutation.AddIsDel(i)
	return uau
}

// SetCreateAt sets the "create_at" field.
func (uau *UpgradeApkUpdate) SetCreateAt(t time.Time) *UpgradeApkUpdate {
	uau.mutation.SetCreateAt(t)
	return uau
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableCreateAt(t *time.Time) *UpgradeApkUpdate {
	if t != nil {
		uau.SetCreateAt(*t)
	}
	return uau
}

// ClearCreateAt clears the value of the "create_at" field.
func (uau *UpgradeApkUpdate) ClearCreateAt() *UpgradeApkUpdate {
	uau.mutation.ClearCreateAt()
	return uau
}

// SetUpdateAt sets the "update_at" field.
func (uau *UpgradeApkUpdate) SetUpdateAt(t time.Time) *UpgradeApkUpdate {
	uau.mutation.SetUpdateAt(t)
	return uau
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uau *UpgradeApkUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpdate {
	if t != nil {
		uau.SetUpdateAt(*t)
	}
	return uau
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uau *UpgradeApkUpdate) ClearUpdateAt() *UpgradeApkUpdate {
	uau.mutation.ClearUpdateAt()
	return uau
}

// Mutation returns the UpgradeApkMutation object of the builder.
func (uau *UpgradeApkUpdate) Mutation() *UpgradeApkMutation {
	return uau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UpgradeApkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UpgradeApkUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UpgradeApkUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UpgradeApkUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uau *UpgradeApkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapk.Table, upgradeapk.Columns, sqlgraph.NewFieldSpec(upgradeapk.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapk.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uau.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapk.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uau.mutation.Key(); ok {
		_spec.SetField(upgradeapk.FieldKey, field.TypeString, value)
	}
	if value, ok := uau.mutation.Name(); ok {
		_spec.SetField(upgradeapk.FieldName, field.TypeString, value)
	}
	if value, ok := uau.mutation.PackageName(); ok {
		_spec.SetField(upgradeapk.FieldPackageName, field.TypeString, value)
	}
	if value, ok := uau.mutation.Description(); ok {
		_spec.SetField(upgradeapk.FieldDescription, field.TypeString, value)
	}
	if uau.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapk.FieldDescription, field.TypeString)
	}
	if value, ok := uau.mutation.IsDel(); ok {
		_spec.SetField(upgradeapk.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uau.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapk.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uau.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapk.FieldCreateAt, field.TypeTime, value)
	}
	if uau.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapk.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uau.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapk.FieldUpdateAt, field.TypeTime, value)
	}
	if uau.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapk.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UpgradeApkUpdateOne is the builder for updating a single UpgradeApk entity.
type UpgradeApkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeApkMutation
}

// SetCompanyID sets the "company_id" field.
func (uauo *UpgradeApkUpdateOne) SetCompanyID(i int) *UpgradeApkUpdateOne {
	uauo.mutation.ResetCompanyID()
	uauo.mutation.SetCompanyID(i)
	return uauo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableCompanyID(i *int) *UpgradeApkUpdateOne {
	if i != nil {
		uauo.SetCompanyID(*i)
	}
	return uauo
}

// AddCompanyID adds i to the "company_id" field.
func (uauo *UpgradeApkUpdateOne) AddCompanyID(i int) *UpgradeApkUpdateOne {
	uauo.mutation.AddCompanyID(i)
	return uauo
}

// SetKey sets the "key" field.
func (uauo *UpgradeApkUpdateOne) SetKey(s string) *UpgradeApkUpdateOne {
	uauo.mutation.SetKey(s)
	return uauo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableKey(s *string) *UpgradeApkUpdateOne {
	if s != nil {
		uauo.SetKey(*s)
	}
	return uauo
}

// SetName sets the "name" field.
func (uauo *UpgradeApkUpdateOne) SetName(s string) *UpgradeApkUpdateOne {
	uauo.mutation.SetName(s)
	return uauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableName(s *string) *UpgradeApkUpdateOne {
	if s != nil {
		uauo.SetName(*s)
	}
	return uauo
}

// SetPackageName sets the "package_name" field.
func (uauo *UpgradeApkUpdateOne) SetPackageName(s string) *UpgradeApkUpdateOne {
	uauo.mutation.SetPackageName(s)
	return uauo
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillablePackageName(s *string) *UpgradeApkUpdateOne {
	if s != nil {
		uauo.SetPackageName(*s)
	}
	return uauo
}

// SetDescription sets the "description" field.
func (uauo *UpgradeApkUpdateOne) SetDescription(s string) *UpgradeApkUpdateOne {
	uauo.mutation.SetDescription(s)
	return uauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableDescription(s *string) *UpgradeApkUpdateOne {
	if s != nil {
		uauo.SetDescription(*s)
	}
	return uauo
}

// ClearDescription clears the value of the "description" field.
func (uauo *UpgradeApkUpdateOne) ClearDescription() *UpgradeApkUpdateOne {
	uauo.mutation.ClearDescription()
	return uauo
}

// SetIsDel sets the "is_del" field.
func (uauo *UpgradeApkUpdateOne) SetIsDel(i int32) *UpgradeApkUpdateOne {
	uauo.mutation.ResetIsDel()
	uauo.mutation.SetIsDel(i)
	return uauo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableIsDel(i *int32) *UpgradeApkUpdateOne {
	if i != nil {
		uauo.SetIsDel(*i)
	}
	return uauo
}

// AddIsDel adds i to the "is_del" field.
func (uauo *UpgradeApkUpdateOne) AddIsDel(i int32) *UpgradeApkUpdateOne {
	uauo.mutation.AddIsDel(i)
	return uauo
}

// SetCreateAt sets the "create_at" field.
func (uauo *UpgradeApkUpdateOne) SetCreateAt(t time.Time) *UpgradeApkUpdateOne {
	uauo.mutation.SetCreateAt(t)
	return uauo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeApkUpdateOne {
	if t != nil {
		uauo.SetCreateAt(*t)
	}
	return uauo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uauo *UpgradeApkUpdateOne) ClearCreateAt() *UpgradeApkUpdateOne {
	uauo.mutation.ClearCreateAt()
	return uauo
}

// SetUpdateAt sets the "update_at" field.
func (uauo *UpgradeApkUpdateOne) SetUpdateAt(t time.Time) *UpgradeApkUpdateOne {
	uauo.mutation.SetUpdateAt(t)
	return uauo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uauo *UpgradeApkUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpdateOne {
	if t != nil {
		uauo.SetUpdateAt(*t)
	}
	return uauo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uauo *UpgradeApkUpdateOne) ClearUpdateAt() *UpgradeApkUpdateOne {
	uauo.mutation.ClearUpdateAt()
	return uauo
}

// Mutation returns the UpgradeApkMutation object of the builder.
func (uauo *UpgradeApkUpdateOne) Mutation() *UpgradeApkMutation {
	return uauo.mutation
}

// Where appends a list predicates to the UpgradeApkUpdate builder.
func (uauo *UpgradeApkUpdateOne) Where(ps ...predicate.UpgradeApk) *UpgradeApkUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UpgradeApkUpdateOne) Select(field string, fields ...string) *UpgradeApkUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UpgradeApk entity.
func (uauo *UpgradeApkUpdateOne) Save(ctx context.Context) (*UpgradeApk, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UpgradeApkUpdateOne) SaveX(ctx context.Context) *UpgradeApk {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UpgradeApkUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UpgradeApkUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uauo *UpgradeApkUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeApk, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapk.Table, upgradeapk.Columns, sqlgraph.NewFieldSpec(upgradeapk.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeApk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapk.FieldID)
		for _, f := range fields {
			if !upgradeapk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeapk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapk.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uauo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapk.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uauo.mutation.Key(); ok {
		_spec.SetField(upgradeapk.FieldKey, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Name(); ok {
		_spec.SetField(upgradeapk.FieldName, field.TypeString, value)
	}
	if value, ok := uauo.mutation.PackageName(); ok {
		_spec.SetField(upgradeapk.FieldPackageName, field.TypeString, value)
	}
	if value, ok := uauo.mutation.Description(); ok {
		_spec.SetField(upgradeapk.FieldDescription, field.TypeString, value)
	}
	if uauo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapk.FieldDescription, field.TypeString)
	}
	if value, ok := uauo.mutation.IsDel(); ok {
		_spec.SetField(upgradeapk.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uauo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapk.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uauo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapk.FieldCreateAt, field.TypeTime, value)
	}
	if uauo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapk.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uauo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapk.FieldUpdateAt, field.TypeTime, value)
	}
	if uauo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapk.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeApk{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
