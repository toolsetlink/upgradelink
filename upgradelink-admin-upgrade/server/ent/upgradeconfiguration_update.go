// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeconfiguration"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeConfigurationUpdate is the builder for updating UpgradeConfiguration entities.
type UpgradeConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeConfigurationMutation
}

// Where appends a list predicates to the UpgradeConfigurationUpdate builder.
func (ucu *UpgradeConfigurationUpdate) Where(ps ...predicate.UpgradeConfiguration) *UpgradeConfigurationUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetCompanyID sets the "company_id" field.
func (ucu *UpgradeConfigurationUpdate) SetCompanyID(i int) *UpgradeConfigurationUpdate {
	ucu.mutation.ResetCompanyID()
	ucu.mutation.SetCompanyID(i)
	return ucu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableCompanyID(i *int) *UpgradeConfigurationUpdate {
	if i != nil {
		ucu.SetCompanyID(*i)
	}
	return ucu
}

// AddCompanyID adds i to the "company_id" field.
func (ucu *UpgradeConfigurationUpdate) AddCompanyID(i int) *UpgradeConfigurationUpdate {
	ucu.mutation.AddCompanyID(i)
	return ucu
}

// SetKey sets the "key" field.
func (ucu *UpgradeConfigurationUpdate) SetKey(s string) *UpgradeConfigurationUpdate {
	ucu.mutation.SetKey(s)
	return ucu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableKey(s *string) *UpgradeConfigurationUpdate {
	if s != nil {
		ucu.SetKey(*s)
	}
	return ucu
}

// SetName sets the "name" field.
func (ucu *UpgradeConfigurationUpdate) SetName(s string) *UpgradeConfigurationUpdate {
	ucu.mutation.SetName(s)
	return ucu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableName(s *string) *UpgradeConfigurationUpdate {
	if s != nil {
		ucu.SetName(*s)
	}
	return ucu
}

// SetDescription sets the "description" field.
func (ucu *UpgradeConfigurationUpdate) SetDescription(s string) *UpgradeConfigurationUpdate {
	ucu.mutation.SetDescription(s)
	return ucu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableDescription(s *string) *UpgradeConfigurationUpdate {
	if s != nil {
		ucu.SetDescription(*s)
	}
	return ucu
}

// ClearDescription clears the value of the "description" field.
func (ucu *UpgradeConfigurationUpdate) ClearDescription() *UpgradeConfigurationUpdate {
	ucu.mutation.ClearDescription()
	return ucu
}

// SetIsDel sets the "is_del" field.
func (ucu *UpgradeConfigurationUpdate) SetIsDel(i int32) *UpgradeConfigurationUpdate {
	ucu.mutation.ResetIsDel()
	ucu.mutation.SetIsDel(i)
	return ucu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableIsDel(i *int32) *UpgradeConfigurationUpdate {
	if i != nil {
		ucu.SetIsDel(*i)
	}
	return ucu
}

// AddIsDel adds i to the "is_del" field.
func (ucu *UpgradeConfigurationUpdate) AddIsDel(i int32) *UpgradeConfigurationUpdate {
	ucu.mutation.AddIsDel(i)
	return ucu
}

// SetCreateAt sets the "create_at" field.
func (ucu *UpgradeConfigurationUpdate) SetCreateAt(t time.Time) *UpgradeConfigurationUpdate {
	ucu.mutation.SetCreateAt(t)
	return ucu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpdate {
	if t != nil {
		ucu.SetCreateAt(*t)
	}
	return ucu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucu *UpgradeConfigurationUpdate) ClearCreateAt() *UpgradeConfigurationUpdate {
	ucu.mutation.ClearCreateAt()
	return ucu
}

// SetUpdateAt sets the "update_at" field.
func (ucu *UpgradeConfigurationUpdate) SetUpdateAt(t time.Time) *UpgradeConfigurationUpdate {
	ucu.mutation.SetUpdateAt(t)
	return ucu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucu *UpgradeConfigurationUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpdate {
	if t != nil {
		ucu.SetUpdateAt(*t)
	}
	return ucu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucu *UpgradeConfigurationUpdate) ClearUpdateAt() *UpgradeConfigurationUpdate {
	ucu.mutation.ClearUpdateAt()
	return ucu
}

// Mutation returns the UpgradeConfigurationMutation object of the builder.
func (ucu *UpgradeConfigurationUpdate) Mutation() *UpgradeConfigurationMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UpgradeConfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UpgradeConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UpgradeConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UpgradeConfigurationUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucu *UpgradeConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfiguration.Table, upgradeconfiguration.Columns, sqlgraph.NewFieldSpec(upgradeconfiguration.FieldID, field.TypeInt))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfiguration.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfiguration.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.Key(); ok {
		_spec.SetField(upgradeconfiguration.FieldKey, field.TypeString, value)
	}
	if value, ok := ucu.mutation.Name(); ok {
		_spec.SetField(upgradeconfiguration.FieldName, field.TypeString, value)
	}
	if value, ok := ucu.mutation.Description(); ok {
		_spec.SetField(upgradeconfiguration.FieldDescription, field.TypeString, value)
	}
	if ucu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfiguration.FieldDescription, field.TypeString)
	}
	if value, ok := ucu.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfiguration.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfiguration.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfiguration.FieldCreateAt, field.TypeTime, value)
	}
	if ucu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfiguration.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfiguration.FieldUpdateAt, field.TypeTime, value)
	}
	if ucu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfiguration.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UpgradeConfigurationUpdateOne is the builder for updating a single UpgradeConfiguration entity.
type UpgradeConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeConfigurationMutation
}

// SetCompanyID sets the "company_id" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetCompanyID(i int) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.ResetCompanyID()
	ucuo.mutation.SetCompanyID(i)
	return ucuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableCompanyID(i *int) *UpgradeConfigurationUpdateOne {
	if i != nil {
		ucuo.SetCompanyID(*i)
	}
	return ucuo
}

// AddCompanyID adds i to the "company_id" field.
func (ucuo *UpgradeConfigurationUpdateOne) AddCompanyID(i int) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.AddCompanyID(i)
	return ucuo
}

// SetKey sets the "key" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetKey(s string) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.SetKey(s)
	return ucuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableKey(s *string) *UpgradeConfigurationUpdateOne {
	if s != nil {
		ucuo.SetKey(*s)
	}
	return ucuo
}

// SetName sets the "name" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetName(s string) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.SetName(s)
	return ucuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableName(s *string) *UpgradeConfigurationUpdateOne {
	if s != nil {
		ucuo.SetName(*s)
	}
	return ucuo
}

// SetDescription sets the "description" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetDescription(s string) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.SetDescription(s)
	return ucuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableDescription(s *string) *UpgradeConfigurationUpdateOne {
	if s != nil {
		ucuo.SetDescription(*s)
	}
	return ucuo
}

// ClearDescription clears the value of the "description" field.
func (ucuo *UpgradeConfigurationUpdateOne) ClearDescription() *UpgradeConfigurationUpdateOne {
	ucuo.mutation.ClearDescription()
	return ucuo
}

// SetIsDel sets the "is_del" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetIsDel(i int32) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.ResetIsDel()
	ucuo.mutation.SetIsDel(i)
	return ucuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableIsDel(i *int32) *UpgradeConfigurationUpdateOne {
	if i != nil {
		ucuo.SetIsDel(*i)
	}
	return ucuo
}

// AddIsDel adds i to the "is_del" field.
func (ucuo *UpgradeConfigurationUpdateOne) AddIsDel(i int32) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.AddIsDel(i)
	return ucuo
}

// SetCreateAt sets the "create_at" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetCreateAt(t time.Time) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.SetCreateAt(t)
	return ucuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeConfigurationUpdateOne {
	if t != nil {
		ucuo.SetCreateAt(*t)
	}
	return ucuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ucuo *UpgradeConfigurationUpdateOne) ClearCreateAt() *UpgradeConfigurationUpdateOne {
	ucuo.mutation.ClearCreateAt()
	return ucuo
}

// SetUpdateAt sets the "update_at" field.
func (ucuo *UpgradeConfigurationUpdateOne) SetUpdateAt(t time.Time) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.SetUpdateAt(t)
	return ucuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ucuo *UpgradeConfigurationUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeConfigurationUpdateOne {
	if t != nil {
		ucuo.SetUpdateAt(*t)
	}
	return ucuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ucuo *UpgradeConfigurationUpdateOne) ClearUpdateAt() *UpgradeConfigurationUpdateOne {
	ucuo.mutation.ClearUpdateAt()
	return ucuo
}

// Mutation returns the UpgradeConfigurationMutation object of the builder.
func (ucuo *UpgradeConfigurationUpdateOne) Mutation() *UpgradeConfigurationMutation {
	return ucuo.mutation
}

// Where appends a list predicates to the UpgradeConfigurationUpdate builder.
func (ucuo *UpgradeConfigurationUpdateOne) Where(ps ...predicate.UpgradeConfiguration) *UpgradeConfigurationUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UpgradeConfigurationUpdateOne) Select(field string, fields ...string) *UpgradeConfigurationUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UpgradeConfiguration entity.
func (ucuo *UpgradeConfigurationUpdateOne) Save(ctx context.Context) (*UpgradeConfiguration, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UpgradeConfigurationUpdateOne) SaveX(ctx context.Context) *UpgradeConfiguration {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UpgradeConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UpgradeConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucuo *UpgradeConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeConfiguration, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeconfiguration.Table, upgradeconfiguration.Columns, sqlgraph.NewFieldSpec(upgradeconfiguration.FieldID, field.TypeInt))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeConfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeconfiguration.FieldID)
		for _, f := range fields {
			if !upgradeconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeconfiguration.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeconfiguration.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.Key(); ok {
		_spec.SetField(upgradeconfiguration.FieldKey, field.TypeString, value)
	}
	if value, ok := ucuo.mutation.Name(); ok {
		_spec.SetField(upgradeconfiguration.FieldName, field.TypeString, value)
	}
	if value, ok := ucuo.mutation.Description(); ok {
		_spec.SetField(upgradeconfiguration.FieldDescription, field.TypeString, value)
	}
	if ucuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeconfiguration.FieldDescription, field.TypeString)
	}
	if value, ok := ucuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeconfiguration.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeconfiguration.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ucuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeconfiguration.FieldCreateAt, field.TypeTime, value)
	}
	if ucuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeconfiguration.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ucuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeconfiguration.FieldUpdateAt, field.TypeTime, value)
	}
	if ucuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeconfiguration.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeConfiguration{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
