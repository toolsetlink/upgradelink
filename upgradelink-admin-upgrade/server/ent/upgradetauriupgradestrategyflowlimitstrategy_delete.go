// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeTauriUpgradeStrategyFlowLimitStrategy entity.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete builder.
func (utusflsd *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete {
	utusflsd.mutation.Where(ps...)
	return utusflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (utusflsd *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, utusflsd.sqlExec, utusflsd.mutation, utusflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (utusflsd *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := utusflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (utusflsd *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradetauriupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradetauriupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := utusflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, utusflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	utusflsd.mutation.done = true
	return affected, err
}

// UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeTauriUpgradeStrategyFlowLimitStrategy entity.
type UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	utusflsd *UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyFlowLimitStrategyDelete builder.
func (utusflsdo *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeTauriUpgradeStrategyFlowLimitStrategy) *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne {
	utusflsdo.utusflsd.mutation.Where(ps...)
	return utusflsdo
}

// Exec executes the deletion query.
func (utusflsdo *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := utusflsdo.utusflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradetauriupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (utusflsdo *UpgradeTauriUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := utusflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
