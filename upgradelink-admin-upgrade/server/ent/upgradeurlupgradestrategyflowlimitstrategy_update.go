// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeurlupgradestrategyflowlimitstrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate is the builder for updating UpgradeUrlUpgradeStrategyFlowLimitStrategy entities.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate builder.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) Where(ps ...predicate.UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.Where(ps...)
	return uuusflsu
}

// SetEnable sets the "enable" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetEnable(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ResetEnable()
	uuusflsu.mutation.SetEnable(i)
	return uuusflsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uuusflsu.SetEnable(*i)
	}
	return uuusflsu
}

// AddEnable adds i to the "enable" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) AddEnable(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.AddEnable(i)
	return uuusflsu
}

// SetBeginTime sets the "begin_time" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetBeginTime(s string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.SetBeginTime(s)
	return uuusflsu
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableBeginTime(s *string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		uuusflsu.SetBeginTime(*s)
	}
	return uuusflsu
}

// SetEndTime sets the "end_time" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetEndTime(s string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.SetEndTime(s)
	return uuusflsu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableEndTime(s *string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if s != nil {
		uuusflsu.SetEndTime(*s)
	}
	return uuusflsu
}

// SetDimension sets the "dimension" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetDimension(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ResetDimension()
	uuusflsu.mutation.SetDimension(i)
	return uuusflsu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableDimension(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uuusflsu.SetDimension(*i)
	}
	return uuusflsu
}

// AddDimension adds i to the "dimension" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) AddDimension(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.AddDimension(i)
	return uuusflsu
}

// SetLimit sets the "limit" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetLimit(i int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ResetLimit()
	uuusflsu.mutation.SetLimit(i)
	return uuusflsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableLimit(i *int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uuusflsu.SetLimit(*i)
	}
	return uuusflsu
}

// AddLimit adds i to the "limit" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) AddLimit(i int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.AddLimit(i)
	return uuusflsu
}

// SetIsDel sets the "is_del" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ResetIsDel()
	uuusflsu.mutation.SetIsDel(i)
	return uuusflsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if i != nil {
		uuusflsu.SetIsDel(*i)
	}
	return uuusflsu
}

// AddIsDel adds i to the "is_del" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.AddIsDel(i)
	return uuusflsu
}

// SetCreateAt sets the "create_at" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.SetCreateAt(t)
	return uuusflsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		uuusflsu.SetCreateAt(*t)
	}
	return uuusflsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) ClearCreateAt() *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ClearCreateAt()
	return uuusflsu
}

// SetUpdateAt sets the "update_at" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.SetUpdateAt(t)
	return uuusflsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	if t != nil {
		uuusflsu.SetUpdateAt(*t)
	}
	return uuusflsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) ClearUpdateAt() *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate {
	uuusflsu.mutation.ClearUpdateAt()
	return uuusflsu
}

// Mutation returns the UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) Mutation() *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation {
	return uuusflsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uuusflsu.sqlSave, uuusflsu.mutation, uuusflsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uuusflsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uuusflsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) ExecX(ctx context.Context) {
	if err := uuusflsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusflsu *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategyflowlimitstrategy.Table, upgradeurlupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := uuusflsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusflsu.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.BeginTime(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := uuusflsu.mutation.EndTime(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := uuusflsu.mutation.Dimension(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.Limit(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusflsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusflsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusflsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusflsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusflsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusflsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uuusflsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uuusflsu.mutation.done = true
	return n, nil
}

// UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne is the builder for updating a single UpgradeUrlUpgradeStrategyFlowLimitStrategy entity.
type UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation
}

// SetEnable sets the "enable" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetEnable(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ResetEnable()
	uuusflsuo.mutation.SetEnable(i)
	return uuusflsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uuusflsuo.SetEnable(*i)
	}
	return uuusflsuo
}

// AddEnable adds i to the "enable" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) AddEnable(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.AddEnable(i)
	return uuusflsuo
}

// SetBeginTime sets the "begin_time" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetBeginTime(s string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.SetBeginTime(s)
	return uuusflsuo
}

// SetNillableBeginTime sets the "begin_time" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableBeginTime(s *string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		uuusflsuo.SetBeginTime(*s)
	}
	return uuusflsuo
}

// SetEndTime sets the "end_time" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetEndTime(s string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.SetEndTime(s)
	return uuusflsuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableEndTime(s *string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if s != nil {
		uuusflsuo.SetEndTime(*s)
	}
	return uuusflsuo
}

// SetDimension sets the "dimension" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetDimension(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ResetDimension()
	uuusflsuo.mutation.SetDimension(i)
	return uuusflsuo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableDimension(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uuusflsuo.SetDimension(*i)
	}
	return uuusflsuo
}

// AddDimension adds i to the "dimension" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) AddDimension(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.AddDimension(i)
	return uuusflsuo
}

// SetLimit sets the "limit" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetLimit(i int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ResetLimit()
	uuusflsuo.mutation.SetLimit(i)
	return uuusflsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uuusflsuo.SetLimit(*i)
	}
	return uuusflsuo
}

// AddLimit adds i to the "limit" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) AddLimit(i int) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.AddLimit(i)
	return uuusflsuo
}

// SetIsDel sets the "is_del" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetIsDel(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ResetIsDel()
	uuusflsuo.mutation.SetIsDel(i)
	return uuusflsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if i != nil {
		uuusflsuo.SetIsDel(*i)
	}
	return uuusflsuo
}

// AddIsDel adds i to the "is_del" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) AddIsDel(i int32) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.AddIsDel(i)
	return uuusflsuo
}

// SetCreateAt sets the "create_at" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.SetCreateAt(t)
	return uuusflsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		uuusflsuo.SetCreateAt(*t)
	}
	return uuusflsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) ClearCreateAt() *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ClearCreateAt()
	return uuusflsuo
}

// SetUpdateAt sets the "update_at" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.SetUpdateAt(t)
	return uuusflsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	if t != nil {
		uuusflsuo.SetUpdateAt(*t)
	}
	return uuusflsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) ClearUpdateAt() *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.ClearUpdateAt()
	return uuusflsuo
}

// Mutation returns the UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation object of the builder.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) Mutation() *UpgradeUrlUpgradeStrategyFlowLimitStrategyMutation {
	return uuusflsuo.mutation
}

// Where appends a list predicates to the UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdate builder.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) Where(ps ...predicate.UpgradeUrlUpgradeStrategyFlowLimitStrategy) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.mutation.Where(ps...)
	return uuusflsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) Select(field string, fields ...string) *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne {
	uuusflsuo.fields = append([]string{field}, fields...)
	return uuusflsuo
}

// Save executes the query and returns the updated UpgradeUrlUpgradeStrategyFlowLimitStrategy entity.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) Save(ctx context.Context) (*UpgradeUrlUpgradeStrategyFlowLimitStrategy, error) {
	return withHooks(ctx, uuusflsuo.sqlSave, uuusflsuo.mutation, uuusflsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeUrlUpgradeStrategyFlowLimitStrategy {
	node, err := uuusflsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uuusflsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uuusflsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuusflsuo *UpgradeUrlUpgradeStrategyFlowLimitStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeUrlUpgradeStrategyFlowLimitStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeurlupgradestrategyflowlimitstrategy.Table, upgradeurlupgradestrategyflowlimitstrategy.Columns, sqlgraph.NewFieldSpec(upgradeurlupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	id, ok := uuusflsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeUrlUpgradeStrategyFlowLimitStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuusflsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeurlupgradestrategyflowlimitstrategy.FieldID)
		for _, f := range fields {
			if !upgradeurlupgradestrategyflowlimitstrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeurlupgradestrategyflowlimitstrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuusflsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuusflsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.BeginTime(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldBeginTime, field.TypeString, value)
	}
	if value, ok := uuusflsuo.mutation.EndTime(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldEndTime, field.TypeString, value)
	}
	if value, ok := uuusflsuo.mutation.Dimension(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.AddedDimension(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldDimension, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusflsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uuusflsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeurlupgradestrategyflowlimitstrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uuusflsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uuusflsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategyflowlimitstrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uuusflsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeurlupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uuusflsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeurlupgradestrategyflowlimitstrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeUrlUpgradeStrategyFlowLimitStrategy{config: uuusflsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuusflsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeurlupgradestrategyflowlimitstrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuusflsuo.mutation.done = true
	return _node, nil
}
