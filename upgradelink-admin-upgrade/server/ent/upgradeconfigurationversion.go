// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeconfigurationversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeConfigurationVersion is the model entity for the UpgradeConfigurationVersion schema.
type UpgradeConfigurationVersion struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 配置ID
	ConfigurationID int `json:"configuration_id,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 版本名
	VersionName string `json:"version_name,omitempty"`
	// 版本号
	VersionCode int `json:"version_code,omitempty"`
	// 描述信息
	Description string `json:"description,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeConfigurationVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeconfigurationversion.FieldID, upgradeconfigurationversion.FieldCompanyID, upgradeconfigurationversion.FieldConfigurationID, upgradeconfigurationversion.FieldVersionCode, upgradeconfigurationversion.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeconfigurationversion.FieldContent, upgradeconfigurationversion.FieldVersionName, upgradeconfigurationversion.FieldDescription:
			values[i] = new(sql.NullString)
		case upgradeconfigurationversion.FieldCreateAt, upgradeconfigurationversion.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeConfigurationVersion fields.
func (ucv *UpgradeConfigurationVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeconfigurationversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ucv.ID = int(value.Int64)
		case upgradeconfigurationversion.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				ucv.CompanyID = int(value.Int64)
			}
		case upgradeconfigurationversion.FieldConfigurationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field configuration_id", values[i])
			} else if value.Valid {
				ucv.ConfigurationID = int(value.Int64)
			}
		case upgradeconfigurationversion.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ucv.Content = value.String
			}
		case upgradeconfigurationversion.FieldVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_name", values[i])
			} else if value.Valid {
				ucv.VersionName = value.String
			}
		case upgradeconfigurationversion.FieldVersionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_code", values[i])
			} else if value.Valid {
				ucv.VersionCode = int(value.Int64)
			}
		case upgradeconfigurationversion.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ucv.Description = value.String
			}
		case upgradeconfigurationversion.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				ucv.IsDel = int32(value.Int64)
			}
		case upgradeconfigurationversion.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ucv.CreateAt = value.Time
			}
		case upgradeconfigurationversion.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ucv.UpdateAt = value.Time
			}
		default:
			ucv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeConfigurationVersion.
// This includes values selected through modifiers, order, etc.
func (ucv *UpgradeConfigurationVersion) Value(name string) (ent.Value, error) {
	return ucv.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeConfigurationVersion.
// Note that you need to call UpgradeConfigurationVersion.Unwrap() before calling this method if this UpgradeConfigurationVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (ucv *UpgradeConfigurationVersion) Update() *UpgradeConfigurationVersionUpdateOne {
	return NewUpgradeConfigurationVersionClient(ucv.config).UpdateOne(ucv)
}

// Unwrap unwraps the UpgradeConfigurationVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ucv *UpgradeConfigurationVersion) Unwrap() *UpgradeConfigurationVersion {
	_tx, ok := ucv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeConfigurationVersion is not a transactional entity")
	}
	ucv.config.driver = _tx.drv
	return ucv
}

// String implements the fmt.Stringer.
func (ucv *UpgradeConfigurationVersion) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeConfigurationVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ucv.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", ucv.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("configuration_id=")
	builder.WriteString(fmt.Sprintf("%v", ucv.ConfigurationID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ucv.Content)
	builder.WriteString(", ")
	builder.WriteString("version_name=")
	builder.WriteString(ucv.VersionName)
	builder.WriteString(", ")
	builder.WriteString("version_code=")
	builder.WriteString(fmt.Sprintf("%v", ucv.VersionCode))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ucv.Description)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", ucv.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(ucv.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(ucv.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeConfigurationVersions is a parsable slice of UpgradeConfigurationVersion.
type UpgradeConfigurationVersions []*UpgradeConfigurationVersion
