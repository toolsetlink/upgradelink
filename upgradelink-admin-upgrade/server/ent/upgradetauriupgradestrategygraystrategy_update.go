// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradetauriupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeTauriUpgradeStrategyGrayStrategy entities.
type UpgradeTauriUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyGrayStrategyUpdate builder.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeTauriUpgradeStrategyGrayStrategy) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.Where(ps...)
	return utusgsu
}

// SetEnable sets the "enable" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.ResetEnable()
	utusgsu.mutation.SetEnable(i)
	return utusgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		utusgsu.SetEnable(*i)
	}
	return utusgsu
}

// AddEnable adds i to the "enable" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.AddEnable(i)
	return utusgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.SetBeginDatetime(t)
	return utusgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		utusgsu.SetBeginDatetime(*t)
	}
	return utusgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.SetEndDatetime(t)
	return utusgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		utusgsu.SetEndDatetime(*t)
	}
	return utusgsu
}

// SetLimit sets the "limit" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.ResetLimit()
	utusgsu.mutation.SetLimit(i)
	return utusgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		utusgsu.SetLimit(*i)
	}
	return utusgsu
}

// AddLimit adds i to the "limit" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.AddLimit(i)
	return utusgsu
}

// SetIsDel sets the "is_del" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.ResetIsDel()
	utusgsu.mutation.SetIsDel(i)
	return utusgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		utusgsu.SetIsDel(*i)
	}
	return utusgsu
}

// AddIsDel adds i to the "is_del" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.AddIsDel(i)
	return utusgsu
}

// SetCreateAt sets the "create_at" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.SetCreateAt(t)
	return utusgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		utusgsu.SetCreateAt(*t)
	}
	return utusgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.ClearCreateAt()
	return utusgsu
}

// SetUpdateAt sets the "update_at" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.SetUpdateAt(t)
	return utusgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		utusgsu.SetUpdateAt(*t)
	}
	return utusgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeTauriUpgradeStrategyGrayStrategyUpdate {
	utusgsu.mutation.ClearUpdateAt()
	return utusgsu
}

// Mutation returns the UpgradeTauriUpgradeStrategyGrayStrategyMutation object of the builder.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeTauriUpgradeStrategyGrayStrategyMutation {
	return utusgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utusgsu.sqlSave, utusgsu.mutation, utusgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := utusgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := utusgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := utusgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusgsu *UpgradeTauriUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategygraystrategy.Table, upgradetauriupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := utusgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusgsu.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := utusgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := utusgsu.mutation.Limit(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utusgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utusgsu.mutation.done = true
	return n, nil
}

// UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeTauriUpgradeStrategyGrayStrategy entity.
type UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTauriUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.ResetEnable()
	utusgsuo.mutation.SetEnable(i)
	return utusgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		utusgsuo.SetEnable(*i)
	}
	return utusgsuo
}

// AddEnable adds i to the "enable" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.AddEnable(i)
	return utusgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.SetBeginDatetime(t)
	return utusgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		utusgsuo.SetBeginDatetime(*t)
	}
	return utusgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.SetEndDatetime(t)
	return utusgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		utusgsuo.SetEndDatetime(*t)
	}
	return utusgsuo
}

// SetLimit sets the "limit" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.ResetLimit()
	utusgsuo.mutation.SetLimit(i)
	return utusgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		utusgsuo.SetLimit(*i)
	}
	return utusgsuo
}

// AddLimit adds i to the "limit" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.AddLimit(i)
	return utusgsuo
}

// SetIsDel sets the "is_del" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.ResetIsDel()
	utusgsuo.mutation.SetIsDel(i)
	return utusgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		utusgsuo.SetIsDel(*i)
	}
	return utusgsuo
}

// AddIsDel adds i to the "is_del" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.AddIsDel(i)
	return utusgsuo
}

// SetCreateAt sets the "create_at" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.SetCreateAt(t)
	return utusgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		utusgsuo.SetCreateAt(*t)
	}
	return utusgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.ClearCreateAt()
	return utusgsuo
}

// SetUpdateAt sets the "update_at" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.SetUpdateAt(t)
	return utusgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		utusgsuo.SetUpdateAt(*t)
	}
	return utusgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.ClearUpdateAt()
	return utusgsuo
}

// Mutation returns the UpgradeTauriUpgradeStrategyGrayStrategyMutation object of the builder.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeTauriUpgradeStrategyGrayStrategyMutation {
	return utusgsuo.mutation
}

// Where appends a list predicates to the UpgradeTauriUpgradeStrategyGrayStrategyUpdate builder.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeTauriUpgradeStrategyGrayStrategy) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.mutation.Where(ps...)
	return utusgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne {
	utusgsuo.fields = append([]string{field}, fields...)
	return utusgsuo
}

// Save executes the query and returns the updated UpgradeTauriUpgradeStrategyGrayStrategy entity.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeTauriUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, utusgsuo.sqlSave, utusgsuo.mutation, utusgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeTauriUpgradeStrategyGrayStrategy {
	node, err := utusgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := utusgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := utusgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utusgsuo *UpgradeTauriUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTauriUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriupgradestrategygraystrategy.Table, upgradetauriupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradetauriupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := utusgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTauriUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utusgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauriupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradetauriupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetauriupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utusgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utusgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := utusgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := utusgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := utusgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := utusgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utusgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if utusgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utusgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if utusgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTauriUpgradeStrategyGrayStrategy{config: utusgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utusgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utusgsuo.mutation.done = true
	return _node, nil
}
