// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategyflowlimitstrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpgradeStrategyFlowLimitStrategyDelete is the builder for deleting a UpgradeFileUpgradeStrategyFlowLimitStrategy entity.
type UpgradeFileUpgradeStrategyFlowLimitStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyFlowLimitStrategyMutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyFlowLimitStrategyDelete builder.
func (ufusflsd *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete) Where(ps ...predicate.UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete {
	ufusflsd.mutation.Where(ps...)
	return ufusflsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufusflsd *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufusflsd.sqlExec, ufusflsd.mutation, ufusflsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusflsd *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ufusflsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ufusflsd *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradefileupgradestrategyflowlimitstrategy.Table, sqlgraph.NewFieldSpec(upgradefileupgradestrategyflowlimitstrategy.FieldID, field.TypeInt))
	if ps := ufusflsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufusflsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufusflsd.mutation.done = true
	return affected, err
}

// UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne is the builder for deleting a single UpgradeFileUpgradeStrategyFlowLimitStrategy entity.
type UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne struct {
	ufusflsd *UpgradeFileUpgradeStrategyFlowLimitStrategyDelete
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyFlowLimitStrategyDelete builder.
func (ufusflsdo *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne) Where(ps ...predicate.UpgradeFileUpgradeStrategyFlowLimitStrategy) *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne {
	ufusflsdo.ufusflsd.mutation.Where(ps...)
	return ufusflsdo
}

// Exec executes the deletion query.
func (ufusflsdo *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ufusflsdo.ufusflsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradefileupgradestrategyflowlimitstrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusflsdo *UpgradeFileUpgradeStrategyFlowLimitStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ufusflsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
