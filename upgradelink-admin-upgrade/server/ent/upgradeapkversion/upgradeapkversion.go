// Code generated by ent, DO NOT EDIT.

package upgradeapkversion

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradeapkversion type in the database.
	Label = "upgrade_apk_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldApkID holds the string denoting the apk_id field in the database.
	FieldApkID = "apk_id"
	// FieldCloudFileID holds the string denoting the cloud_file_id field in the database.
	FieldCloudFileID = "cloud_file_id"
	// FieldVersionName holds the string denoting the version_name field in the database.
	FieldVersionName = "version_name"
	// FieldVersionCode holds the string denoting the version_code field in the database.
	FieldVersionCode = "version_code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradeapkversion in the database.
	Table = "upgrade_apk_version"
)

// Columns holds all SQL columns for upgradeapkversion fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldApkID,
	FieldCloudFileID,
	FieldVersionName,
	FieldVersionCode,
	FieldDescription,
	FieldIsDel,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeApkVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByApkID orders the results by the apk_id field.
func ByApkID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApkID, opts...).ToFunc()
}

// ByCloudFileID orders the results by the cloud_file_id field.
func ByCloudFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudFileID, opts...).ToFunc()
}

// ByVersionName orders the results by the version_name field.
func ByVersionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionName, opts...).ToFunc()
}

// ByVersionCode orders the results by the version_code field.
func ByVersionCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
