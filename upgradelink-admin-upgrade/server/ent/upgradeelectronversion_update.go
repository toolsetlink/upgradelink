// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronVersionUpdate is the builder for updating UpgradeElectronVersion entities.
type UpgradeElectronVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronVersionMutation
}

// Where appends a list predicates to the UpgradeElectronVersionUpdate builder.
func (uevu *UpgradeElectronVersionUpdate) Where(ps ...predicate.UpgradeElectronVersion) *UpgradeElectronVersionUpdate {
	uevu.mutation.Where(ps...)
	return uevu
}

// SetCompanyID sets the "company_id" field.
func (uevu *UpgradeElectronVersionUpdate) SetCompanyID(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.ResetCompanyID()
	uevu.mutation.SetCompanyID(i)
	return uevu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableCompanyID(i *int) *UpgradeElectronVersionUpdate {
	if i != nil {
		uevu.SetCompanyID(*i)
	}
	return uevu
}

// AddCompanyID adds i to the "company_id" field.
func (uevu *UpgradeElectronVersionUpdate) AddCompanyID(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.AddCompanyID(i)
	return uevu
}

// SetElectronID sets the "electron_id" field.
func (uevu *UpgradeElectronVersionUpdate) SetElectronID(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.ResetElectronID()
	uevu.mutation.SetElectronID(i)
	return uevu
}

// SetNillableElectronID sets the "electron_id" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableElectronID(i *int) *UpgradeElectronVersionUpdate {
	if i != nil {
		uevu.SetElectronID(*i)
	}
	return uevu
}

// AddElectronID adds i to the "electron_id" field.
func (uevu *UpgradeElectronVersionUpdate) AddElectronID(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.AddElectronID(i)
	return uevu
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uevu *UpgradeElectronVersionUpdate) SetCloudFileID(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetCloudFileID(s)
	return uevu
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableCloudFileID(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetCloudFileID(*s)
	}
	return uevu
}

// SetSha512 sets the "sha512" field.
func (uevu *UpgradeElectronVersionUpdate) SetSha512(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetSha512(s)
	return uevu
}

// SetNillableSha512 sets the "sha512" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableSha512(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetSha512(*s)
	}
	return uevu
}

// SetInstallCloudFileID sets the "install_cloud_file_id" field.
func (uevu *UpgradeElectronVersionUpdate) SetInstallCloudFileID(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetInstallCloudFileID(s)
	return uevu
}

// SetNillableInstallCloudFileID sets the "install_cloud_file_id" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableInstallCloudFileID(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetInstallCloudFileID(*s)
	}
	return uevu
}

// SetInstallSha512 sets the "install_sha512" field.
func (uevu *UpgradeElectronVersionUpdate) SetInstallSha512(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetInstallSha512(s)
	return uevu
}

// SetNillableInstallSha512 sets the "install_sha512" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableInstallSha512(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetInstallSha512(*s)
	}
	return uevu
}

// SetVersionName sets the "version_name" field.
func (uevu *UpgradeElectronVersionUpdate) SetVersionName(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetVersionName(s)
	return uevu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableVersionName(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetVersionName(*s)
	}
	return uevu
}

// SetVersionCode sets the "version_code" field.
func (uevu *UpgradeElectronVersionUpdate) SetVersionCode(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.ResetVersionCode()
	uevu.mutation.SetVersionCode(i)
	return uevu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableVersionCode(i *int) *UpgradeElectronVersionUpdate {
	if i != nil {
		uevu.SetVersionCode(*i)
	}
	return uevu
}

// AddVersionCode adds i to the "version_code" field.
func (uevu *UpgradeElectronVersionUpdate) AddVersionCode(i int) *UpgradeElectronVersionUpdate {
	uevu.mutation.AddVersionCode(i)
	return uevu
}

// SetPlatform sets the "platform" field.
func (uevu *UpgradeElectronVersionUpdate) SetPlatform(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetPlatform(s)
	return uevu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillablePlatform(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetPlatform(*s)
	}
	return uevu
}

// SetArch sets the "arch" field.
func (uevu *UpgradeElectronVersionUpdate) SetArch(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetArch(s)
	return uevu
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableArch(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetArch(*s)
	}
	return uevu
}

// SetDescription sets the "description" field.
func (uevu *UpgradeElectronVersionUpdate) SetDescription(s string) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetDescription(s)
	return uevu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableDescription(s *string) *UpgradeElectronVersionUpdate {
	if s != nil {
		uevu.SetDescription(*s)
	}
	return uevu
}

// ClearDescription clears the value of the "description" field.
func (uevu *UpgradeElectronVersionUpdate) ClearDescription() *UpgradeElectronVersionUpdate {
	uevu.mutation.ClearDescription()
	return uevu
}

// SetIsDel sets the "is_del" field.
func (uevu *UpgradeElectronVersionUpdate) SetIsDel(i int32) *UpgradeElectronVersionUpdate {
	uevu.mutation.ResetIsDel()
	uevu.mutation.SetIsDel(i)
	return uevu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableIsDel(i *int32) *UpgradeElectronVersionUpdate {
	if i != nil {
		uevu.SetIsDel(*i)
	}
	return uevu
}

// AddIsDel adds i to the "is_del" field.
func (uevu *UpgradeElectronVersionUpdate) AddIsDel(i int32) *UpgradeElectronVersionUpdate {
	uevu.mutation.AddIsDel(i)
	return uevu
}

// SetCreateAt sets the "create_at" field.
func (uevu *UpgradeElectronVersionUpdate) SetCreateAt(t time.Time) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetCreateAt(t)
	return uevu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeElectronVersionUpdate {
	if t != nil {
		uevu.SetCreateAt(*t)
	}
	return uevu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uevu *UpgradeElectronVersionUpdate) ClearCreateAt() *UpgradeElectronVersionUpdate {
	uevu.mutation.ClearCreateAt()
	return uevu
}

// SetUpdateAt sets the "update_at" field.
func (uevu *UpgradeElectronVersionUpdate) SetUpdateAt(t time.Time) *UpgradeElectronVersionUpdate {
	uevu.mutation.SetUpdateAt(t)
	return uevu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uevu *UpgradeElectronVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronVersionUpdate {
	if t != nil {
		uevu.SetUpdateAt(*t)
	}
	return uevu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uevu *UpgradeElectronVersionUpdate) ClearUpdateAt() *UpgradeElectronVersionUpdate {
	uevu.mutation.ClearUpdateAt()
	return uevu
}

// Mutation returns the UpgradeElectronVersionMutation object of the builder.
func (uevu *UpgradeElectronVersionUpdate) Mutation() *UpgradeElectronVersionMutation {
	return uevu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uevu *UpgradeElectronVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uevu.sqlSave, uevu.mutation, uevu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uevu *UpgradeElectronVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := uevu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uevu *UpgradeElectronVersionUpdate) Exec(ctx context.Context) error {
	_, err := uevu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uevu *UpgradeElectronVersionUpdate) ExecX(ctx context.Context) {
	if err := uevu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uevu *UpgradeElectronVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronversion.Table, upgradeelectronversion.Columns, sqlgraph.NewFieldSpec(upgradeelectronversion.FieldID, field.TypeInt))
	if ps := uevu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uevu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectronversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.ElectronID(); ok {
		_spec.SetField(upgradeelectronversion.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.AddedElectronID(); ok {
		_spec.AddField(upgradeelectronversion.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := uevu.mutation.Sha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldSha512, field.TypeString, value)
	}
	if value, ok := uevu.mutation.InstallCloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallCloudFileID, field.TypeString, value)
	}
	if value, ok := uevu.mutation.InstallSha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallSha512, field.TypeString, value)
	}
	if value, ok := uevu.mutation.VersionName(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uevu.mutation.VersionCode(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeelectronversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uevu.mutation.Platform(); ok {
		_spec.SetField(upgradeelectronversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uevu.mutation.Arch(); ok {
		_spec.SetField(upgradeelectronversion.FieldArch, field.TypeString, value)
	}
	if value, ok := uevu.mutation.Description(); ok {
		_spec.SetField(upgradeelectronversion.FieldDescription, field.TypeString, value)
	}
	if uevu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectronversion.FieldDescription, field.TypeString)
	}
	if value, ok := uevu.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uevu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uevu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldCreateAt, field.TypeTime, value)
	}
	if uevu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uevu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uevu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uevu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uevu.mutation.done = true
	return n, nil
}

// UpgradeElectronVersionUpdateOne is the builder for updating a single UpgradeElectronVersion entity.
type UpgradeElectronVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeElectronVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetCompanyID(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ResetCompanyID()
	uevuo.mutation.SetCompanyID(i)
	return uevuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeElectronVersionUpdateOne {
	if i != nil {
		uevuo.SetCompanyID(*i)
	}
	return uevuo
}

// AddCompanyID adds i to the "company_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) AddCompanyID(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.AddCompanyID(i)
	return uevuo
}

// SetElectronID sets the "electron_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetElectronID(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ResetElectronID()
	uevuo.mutation.SetElectronID(i)
	return uevuo
}

// SetNillableElectronID sets the "electron_id" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableElectronID(i *int) *UpgradeElectronVersionUpdateOne {
	if i != nil {
		uevuo.SetElectronID(*i)
	}
	return uevuo
}

// AddElectronID adds i to the "electron_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) AddElectronID(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.AddElectronID(i)
	return uevuo
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetCloudFileID(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetCloudFileID(s)
	return uevuo
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableCloudFileID(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetCloudFileID(*s)
	}
	return uevuo
}

// SetSha512 sets the "sha512" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetSha512(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetSha512(s)
	return uevuo
}

// SetNillableSha512 sets the "sha512" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableSha512(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetSha512(*s)
	}
	return uevuo
}

// SetInstallCloudFileID sets the "install_cloud_file_id" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetInstallCloudFileID(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetInstallCloudFileID(s)
	return uevuo
}

// SetNillableInstallCloudFileID sets the "install_cloud_file_id" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableInstallCloudFileID(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetInstallCloudFileID(*s)
	}
	return uevuo
}

// SetInstallSha512 sets the "install_sha512" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetInstallSha512(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetInstallSha512(s)
	return uevuo
}

// SetNillableInstallSha512 sets the "install_sha512" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableInstallSha512(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetInstallSha512(*s)
	}
	return uevuo
}

// SetVersionName sets the "version_name" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetVersionName(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetVersionName(s)
	return uevuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetVersionName(*s)
	}
	return uevuo
}

// SetVersionCode sets the "version_code" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetVersionCode(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ResetVersionCode()
	uevuo.mutation.SetVersionCode(i)
	return uevuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeElectronVersionUpdateOne {
	if i != nil {
		uevuo.SetVersionCode(*i)
	}
	return uevuo
}

// AddVersionCode adds i to the "version_code" field.
func (uevuo *UpgradeElectronVersionUpdateOne) AddVersionCode(i int) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.AddVersionCode(i)
	return uevuo
}

// SetPlatform sets the "platform" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetPlatform(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetPlatform(s)
	return uevuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillablePlatform(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetPlatform(*s)
	}
	return uevuo
}

// SetArch sets the "arch" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetArch(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetArch(s)
	return uevuo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableArch(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetArch(*s)
	}
	return uevuo
}

// SetDescription sets the "description" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetDescription(s string) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetDescription(s)
	return uevuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableDescription(s *string) *UpgradeElectronVersionUpdateOne {
	if s != nil {
		uevuo.SetDescription(*s)
	}
	return uevuo
}

// ClearDescription clears the value of the "description" field.
func (uevuo *UpgradeElectronVersionUpdateOne) ClearDescription() *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ClearDescription()
	return uevuo
}

// SetIsDel sets the "is_del" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetIsDel(i int32) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ResetIsDel()
	uevuo.mutation.SetIsDel(i)
	return uevuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeElectronVersionUpdateOne {
	if i != nil {
		uevuo.SetIsDel(*i)
	}
	return uevuo
}

// AddIsDel adds i to the "is_del" field.
func (uevuo *UpgradeElectronVersionUpdateOne) AddIsDel(i int32) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.AddIsDel(i)
	return uevuo
}

// SetCreateAt sets the "create_at" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetCreateAt(t)
	return uevuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeElectronVersionUpdateOne {
	if t != nil {
		uevuo.SetCreateAt(*t)
	}
	return uevuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uevuo *UpgradeElectronVersionUpdateOne) ClearCreateAt() *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ClearCreateAt()
	return uevuo
}

// SetUpdateAt sets the "update_at" field.
func (uevuo *UpgradeElectronVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.SetUpdateAt(t)
	return uevuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uevuo *UpgradeElectronVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeElectronVersionUpdateOne {
	if t != nil {
		uevuo.SetUpdateAt(*t)
	}
	return uevuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uevuo *UpgradeElectronVersionUpdateOne) ClearUpdateAt() *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.ClearUpdateAt()
	return uevuo
}

// Mutation returns the UpgradeElectronVersionMutation object of the builder.
func (uevuo *UpgradeElectronVersionUpdateOne) Mutation() *UpgradeElectronVersionMutation {
	return uevuo.mutation
}

// Where appends a list predicates to the UpgradeElectronVersionUpdate builder.
func (uevuo *UpgradeElectronVersionUpdateOne) Where(ps ...predicate.UpgradeElectronVersion) *UpgradeElectronVersionUpdateOne {
	uevuo.mutation.Where(ps...)
	return uevuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uevuo *UpgradeElectronVersionUpdateOne) Select(field string, fields ...string) *UpgradeElectronVersionUpdateOne {
	uevuo.fields = append([]string{field}, fields...)
	return uevuo
}

// Save executes the query and returns the updated UpgradeElectronVersion entity.
func (uevuo *UpgradeElectronVersionUpdateOne) Save(ctx context.Context) (*UpgradeElectronVersion, error) {
	return withHooks(ctx, uevuo.sqlSave, uevuo.mutation, uevuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uevuo *UpgradeElectronVersionUpdateOne) SaveX(ctx context.Context) *UpgradeElectronVersion {
	node, err := uevuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uevuo *UpgradeElectronVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := uevuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uevuo *UpgradeElectronVersionUpdateOne) ExecX(ctx context.Context) {
	if err := uevuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uevuo *UpgradeElectronVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeElectronVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronversion.Table, upgradeelectronversion.Columns, sqlgraph.NewFieldSpec(upgradeelectronversion.FieldID, field.TypeInt))
	id, ok := uevuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeElectronVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uevuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectronversion.FieldID)
		for _, f := range fields {
			if !upgradeelectronversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeelectronversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uevuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uevuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeelectronversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.ElectronID(); ok {
		_spec.SetField(upgradeelectronversion.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.AddedElectronID(); ok {
		_spec.AddField(upgradeelectronversion.FieldElectronID, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.Sha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldSha512, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.InstallCloudFileID(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallCloudFileID, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.InstallSha512(); ok {
		_spec.SetField(upgradeelectronversion.FieldInstallSha512, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.VersionName(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradeelectronversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradeelectronversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := uevuo.mutation.Platform(); ok {
		_spec.SetField(upgradeelectronversion.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.Arch(); ok {
		_spec.SetField(upgradeelectronversion.FieldArch, field.TypeString, value)
	}
	if value, ok := uevuo.mutation.Description(); ok {
		_spec.SetField(upgradeelectronversion.FieldDescription, field.TypeString, value)
	}
	if uevuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeelectronversion.FieldDescription, field.TypeString)
	}
	if value, ok := uevuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uevuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uevuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldCreateAt, field.TypeTime, value)
	}
	if uevuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uevuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronversion.FieldUpdateAt, field.TypeTime, value)
	}
	if uevuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeElectronVersion{config: uevuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uevuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uevuo.mutation.done = true
	return _node, nil
}
