// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserCreate is the builder for creating a SysUser entity.
type SysUserCreate struct {
	config
	mutation *SysUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (suc *SysUserCreate) SetCreatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *SysUserCreate) SetUpdatedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetStatus sets the "status" field.
func (suc *SysUserCreate) SetStatus(u uint8) *SysUserCreate {
	suc.mutation.SetStatus(u)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableStatus(u *uint8) *SysUserCreate {
	if u != nil {
		suc.SetStatus(*u)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *SysUserCreate) SetDeletedAt(t time.Time) *SysUserCreate {
	suc.mutation.SetDeletedAt(t)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDeletedAt(t *time.Time) *SysUserCreate {
	if t != nil {
		suc.SetDeletedAt(*t)
	}
	return suc
}

// SetUsername sets the "username" field.
func (suc *SysUserCreate) SetUsername(s string) *SysUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetPassword sets the "password" field.
func (suc *SysUserCreate) SetPassword(s string) *SysUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetNickname sets the "nickname" field.
func (suc *SysUserCreate) SetNickname(s string) *SysUserCreate {
	suc.mutation.SetNickname(s)
	return suc
}

// SetDescription sets the "description" field.
func (suc *SysUserCreate) SetDescription(s string) *SysUserCreate {
	suc.mutation.SetDescription(s)
	return suc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDescription(s *string) *SysUserCreate {
	if s != nil {
		suc.SetDescription(*s)
	}
	return suc
}

// SetHomePath sets the "home_path" field.
func (suc *SysUserCreate) SetHomePath(s string) *SysUserCreate {
	suc.mutation.SetHomePath(s)
	return suc
}

// SetMobile sets the "mobile" field.
func (suc *SysUserCreate) SetMobile(s string) *SysUserCreate {
	suc.mutation.SetMobile(s)
	return suc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableMobile(s *string) *SysUserCreate {
	if s != nil {
		suc.SetMobile(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *SysUserCreate) SetEmail(s string) *SysUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableEmail(s *string) *SysUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SysUserCreate) SetAvatar(s string) *SysUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableAvatar(s *string) *SysUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetDepartmentID sets the "department_id" field.
func (suc *SysUserCreate) SetDepartmentID(u uint64) *SysUserCreate {
	suc.mutation.SetDepartmentID(u)
	return suc
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableDepartmentID(u *uint64) *SysUserCreate {
	if u != nil {
		suc.SetDepartmentID(*u)
	}
	return suc
}

// SetCompanyID sets the "company_id" field.
func (suc *SysUserCreate) SetCompanyID(u uint64) *SysUserCreate {
	suc.mutation.SetCompanyID(u)
	return suc
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (suc *SysUserCreate) SetNillableCompanyID(u *uint64) *SysUserCreate {
	if u != nil {
		suc.SetCompanyID(*u)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *SysUserCreate) SetID(s string) *SysUserCreate {
	suc.mutation.SetID(s)
	return suc
}

// Mutation returns the SysUserMutation object of the builder.
func (suc *SysUserCreate) Mutation() *SysUserMutation {
	return suc.mutation
}

// Save creates the SysUser in the database.
func (suc *SysUserCreate) Save(ctx context.Context) (*SysUser, error) {
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SysUserCreate) SaveX(ctx context.Context) *SysUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SysUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SysUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SysUserCreate) check() error {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysUser.updated_at"`)}
	}
	if _, ok := suc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "SysUser.username"`)}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "SysUser.password"`)}
	}
	if _, ok := suc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "SysUser.nickname"`)}
	}
	if _, ok := suc.mutation.HomePath(); !ok {
		return &ValidationError{Name: "home_path", err: errors.New(`ent: missing required field "SysUser.home_path"`)}
	}
	return nil
}

func (suc *SysUserCreate) sqlSave(ctx context.Context) (*SysUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysUser.ID type: %T", _spec.ID.Value)
		}
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *SysUserCreate) createSpec() (*SysUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(sysuser.Table, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString))
	)
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(sysuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(sysuser.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.SetField(sysuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.SetField(sysuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.SetField(sysuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := suc.mutation.Nickname(); ok {
		_spec.SetField(sysuser.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := suc.mutation.Description(); ok {
		_spec.SetField(sysuser.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := suc.mutation.HomePath(); ok {
		_spec.SetField(sysuser.FieldHomePath, field.TypeString, value)
		_node.HomePath = value
	}
	if value, ok := suc.mutation.Mobile(); ok {
		_spec.SetField(sysuser.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(sysuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := suc.mutation.DepartmentID(); ok {
		_spec.SetField(sysuser.FieldDepartmentID, field.TypeUint64, value)
		_node.DepartmentID = value
	}
	if value, ok := suc.mutation.CompanyID(); ok {
		_spec.SetField(sysuser.FieldCompanyID, field.TypeUint64, value)
		_node.CompanyID = value
	}
	return _node, _spec
}

// SysUserCreateBulk is the builder for creating many SysUser entities in bulk.
type SysUserCreateBulk struct {
	config
	err      error
	builders []*SysUserCreate
}

// Save creates the SysUser entities in the database.
func (sucb *SysUserCreateBulk) Save(ctx context.Context) ([]*SysUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SysUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SysUserCreateBulk) SaveX(ctx context.Context) []*SysUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SysUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SysUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
