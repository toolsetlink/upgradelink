// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradetauriversion"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeTauriVersionUpdate is the builder for updating UpgradeTauriVersion entities.
type UpgradeTauriVersionUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeTauriVersionMutation
}

// Where appends a list predicates to the UpgradeTauriVersionUpdate builder.
func (utvu *UpgradeTauriVersionUpdate) Where(ps ...predicate.UpgradeTauriVersion) *UpgradeTauriVersionUpdate {
	utvu.mutation.Where(ps...)
	return utvu
}

// SetCompanyID sets the "company_id" field.
func (utvu *UpgradeTauriVersionUpdate) SetCompanyID(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.ResetCompanyID()
	utvu.mutation.SetCompanyID(i)
	return utvu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableCompanyID(i *int) *UpgradeTauriVersionUpdate {
	if i != nil {
		utvu.SetCompanyID(*i)
	}
	return utvu
}

// AddCompanyID adds i to the "company_id" field.
func (utvu *UpgradeTauriVersionUpdate) AddCompanyID(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.AddCompanyID(i)
	return utvu
}

// SetTauriID sets the "tauri_id" field.
func (utvu *UpgradeTauriVersionUpdate) SetTauriID(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.ResetTauriID()
	utvu.mutation.SetTauriID(i)
	return utvu
}

// SetNillableTauriID sets the "tauri_id" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableTauriID(i *int) *UpgradeTauriVersionUpdate {
	if i != nil {
		utvu.SetTauriID(*i)
	}
	return utvu
}

// AddTauriID adds i to the "tauri_id" field.
func (utvu *UpgradeTauriVersionUpdate) AddTauriID(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.AddTauriID(i)
	return utvu
}

// SetCloudFileID sets the "cloud_file_id" field.
func (utvu *UpgradeTauriVersionUpdate) SetCloudFileID(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetCloudFileID(s)
	return utvu
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableCloudFileID(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetCloudFileID(*s)
	}
	return utvu
}

// SetInstallCloudFileID sets the "install_cloud_file_id" field.
func (utvu *UpgradeTauriVersionUpdate) SetInstallCloudFileID(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetInstallCloudFileID(s)
	return utvu
}

// SetNillableInstallCloudFileID sets the "install_cloud_file_id" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableInstallCloudFileID(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetInstallCloudFileID(*s)
	}
	return utvu
}

// SetVersionName sets the "version_name" field.
func (utvu *UpgradeTauriVersionUpdate) SetVersionName(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetVersionName(s)
	return utvu
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableVersionName(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetVersionName(*s)
	}
	return utvu
}

// SetVersionCode sets the "version_code" field.
func (utvu *UpgradeTauriVersionUpdate) SetVersionCode(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.ResetVersionCode()
	utvu.mutation.SetVersionCode(i)
	return utvu
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableVersionCode(i *int) *UpgradeTauriVersionUpdate {
	if i != nil {
		utvu.SetVersionCode(*i)
	}
	return utvu
}

// AddVersionCode adds i to the "version_code" field.
func (utvu *UpgradeTauriVersionUpdate) AddVersionCode(i int) *UpgradeTauriVersionUpdate {
	utvu.mutation.AddVersionCode(i)
	return utvu
}

// SetTarget sets the "target" field.
func (utvu *UpgradeTauriVersionUpdate) SetTarget(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetTarget(s)
	return utvu
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableTarget(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetTarget(*s)
	}
	return utvu
}

// SetArch sets the "arch" field.
func (utvu *UpgradeTauriVersionUpdate) SetArch(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetArch(s)
	return utvu
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableArch(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetArch(*s)
	}
	return utvu
}

// SetSignature sets the "signature" field.
func (utvu *UpgradeTauriVersionUpdate) SetSignature(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetSignature(s)
	return utvu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableSignature(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetSignature(*s)
	}
	return utvu
}

// SetDescription sets the "description" field.
func (utvu *UpgradeTauriVersionUpdate) SetDescription(s string) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetDescription(s)
	return utvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableDescription(s *string) *UpgradeTauriVersionUpdate {
	if s != nil {
		utvu.SetDescription(*s)
	}
	return utvu
}

// ClearDescription clears the value of the "description" field.
func (utvu *UpgradeTauriVersionUpdate) ClearDescription() *UpgradeTauriVersionUpdate {
	utvu.mutation.ClearDescription()
	return utvu
}

// SetIsDel sets the "is_del" field.
func (utvu *UpgradeTauriVersionUpdate) SetIsDel(i int32) *UpgradeTauriVersionUpdate {
	utvu.mutation.ResetIsDel()
	utvu.mutation.SetIsDel(i)
	return utvu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableIsDel(i *int32) *UpgradeTauriVersionUpdate {
	if i != nil {
		utvu.SetIsDel(*i)
	}
	return utvu
}

// AddIsDel adds i to the "is_del" field.
func (utvu *UpgradeTauriVersionUpdate) AddIsDel(i int32) *UpgradeTauriVersionUpdate {
	utvu.mutation.AddIsDel(i)
	return utvu
}

// SetCreateAt sets the "create_at" field.
func (utvu *UpgradeTauriVersionUpdate) SetCreateAt(t time.Time) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetCreateAt(t)
	return utvu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableCreateAt(t *time.Time) *UpgradeTauriVersionUpdate {
	if t != nil {
		utvu.SetCreateAt(*t)
	}
	return utvu
}

// ClearCreateAt clears the value of the "create_at" field.
func (utvu *UpgradeTauriVersionUpdate) ClearCreateAt() *UpgradeTauriVersionUpdate {
	utvu.mutation.ClearCreateAt()
	return utvu
}

// SetUpdateAt sets the "update_at" field.
func (utvu *UpgradeTauriVersionUpdate) SetUpdateAt(t time.Time) *UpgradeTauriVersionUpdate {
	utvu.mutation.SetUpdateAt(t)
	return utvu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utvu *UpgradeTauriVersionUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeTauriVersionUpdate {
	if t != nil {
		utvu.SetUpdateAt(*t)
	}
	return utvu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utvu *UpgradeTauriVersionUpdate) ClearUpdateAt() *UpgradeTauriVersionUpdate {
	utvu.mutation.ClearUpdateAt()
	return utvu
}

// Mutation returns the UpgradeTauriVersionMutation object of the builder.
func (utvu *UpgradeTauriVersionUpdate) Mutation() *UpgradeTauriVersionMutation {
	return utvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utvu *UpgradeTauriVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utvu.sqlSave, utvu.mutation, utvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utvu *UpgradeTauriVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := utvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utvu *UpgradeTauriVersionUpdate) Exec(ctx context.Context) error {
	_, err := utvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utvu *UpgradeTauriVersionUpdate) ExecX(ctx context.Context) {
	if err := utvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utvu *UpgradeTauriVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriversion.Table, upgradetauriversion.Columns, sqlgraph.NewFieldSpec(upgradetauriversion.FieldID, field.TypeInt))
	if ps := utvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utvu.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauriversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauriversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.TauriID(); ok {
		_spec.SetField(upgradetauriversion.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.AddedTauriID(); ok {
		_spec.AddField(upgradetauriversion.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.CloudFileID(); ok {
		_spec.SetField(upgradetauriversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := utvu.mutation.InstallCloudFileID(); ok {
		_spec.SetField(upgradetauriversion.FieldInstallCloudFileID, field.TypeString, value)
	}
	if value, ok := utvu.mutation.VersionName(); ok {
		_spec.SetField(upgradetauriversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := utvu.mutation.VersionCode(); ok {
		_spec.SetField(upgradetauriversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradetauriversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := utvu.mutation.Target(); ok {
		_spec.SetField(upgradetauriversion.FieldTarget, field.TypeString, value)
	}
	if value, ok := utvu.mutation.Arch(); ok {
		_spec.SetField(upgradetauriversion.FieldArch, field.TypeString, value)
	}
	if value, ok := utvu.mutation.Signature(); ok {
		_spec.SetField(upgradetauriversion.FieldSignature, field.TypeString, value)
	}
	if value, ok := utvu.mutation.Description(); ok {
		_spec.SetField(upgradetauriversion.FieldDescription, field.TypeString, value)
	}
	if utvu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauriversion.FieldDescription, field.TypeString)
	}
	if value, ok := utvu.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utvu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utvu.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriversion.FieldCreateAt, field.TypeTime, value)
	}
	if utvu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utvu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriversion.FieldUpdateAt, field.TypeTime, value)
	}
	if utvu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriversion.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utvu.mutation.done = true
	return n, nil
}

// UpgradeTauriVersionUpdateOne is the builder for updating a single UpgradeTauriVersion entity.
type UpgradeTauriVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeTauriVersionMutation
}

// SetCompanyID sets the "company_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetCompanyID(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ResetCompanyID()
	utvuo.mutation.SetCompanyID(i)
	return utvuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableCompanyID(i *int) *UpgradeTauriVersionUpdateOne {
	if i != nil {
		utvuo.SetCompanyID(*i)
	}
	return utvuo
}

// AddCompanyID adds i to the "company_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) AddCompanyID(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.AddCompanyID(i)
	return utvuo
}

// SetTauriID sets the "tauri_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetTauriID(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ResetTauriID()
	utvuo.mutation.SetTauriID(i)
	return utvuo
}

// SetNillableTauriID sets the "tauri_id" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableTauriID(i *int) *UpgradeTauriVersionUpdateOne {
	if i != nil {
		utvuo.SetTauriID(*i)
	}
	return utvuo
}

// AddTauriID adds i to the "tauri_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) AddTauriID(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.AddTauriID(i)
	return utvuo
}

// SetCloudFileID sets the "cloud_file_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetCloudFileID(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetCloudFileID(s)
	return utvuo
}

// SetNillableCloudFileID sets the "cloud_file_id" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableCloudFileID(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetCloudFileID(*s)
	}
	return utvuo
}

// SetInstallCloudFileID sets the "install_cloud_file_id" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetInstallCloudFileID(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetInstallCloudFileID(s)
	return utvuo
}

// SetNillableInstallCloudFileID sets the "install_cloud_file_id" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableInstallCloudFileID(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetInstallCloudFileID(*s)
	}
	return utvuo
}

// SetVersionName sets the "version_name" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetVersionName(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetVersionName(s)
	return utvuo
}

// SetNillableVersionName sets the "version_name" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableVersionName(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetVersionName(*s)
	}
	return utvuo
}

// SetVersionCode sets the "version_code" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetVersionCode(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ResetVersionCode()
	utvuo.mutation.SetVersionCode(i)
	return utvuo
}

// SetNillableVersionCode sets the "version_code" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableVersionCode(i *int) *UpgradeTauriVersionUpdateOne {
	if i != nil {
		utvuo.SetVersionCode(*i)
	}
	return utvuo
}

// AddVersionCode adds i to the "version_code" field.
func (utvuo *UpgradeTauriVersionUpdateOne) AddVersionCode(i int) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.AddVersionCode(i)
	return utvuo
}

// SetTarget sets the "target" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetTarget(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetTarget(s)
	return utvuo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableTarget(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetTarget(*s)
	}
	return utvuo
}

// SetArch sets the "arch" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetArch(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetArch(s)
	return utvuo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableArch(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetArch(*s)
	}
	return utvuo
}

// SetSignature sets the "signature" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetSignature(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetSignature(s)
	return utvuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableSignature(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetSignature(*s)
	}
	return utvuo
}

// SetDescription sets the "description" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetDescription(s string) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetDescription(s)
	return utvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableDescription(s *string) *UpgradeTauriVersionUpdateOne {
	if s != nil {
		utvuo.SetDescription(*s)
	}
	return utvuo
}

// ClearDescription clears the value of the "description" field.
func (utvuo *UpgradeTauriVersionUpdateOne) ClearDescription() *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ClearDescription()
	return utvuo
}

// SetIsDel sets the "is_del" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetIsDel(i int32) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ResetIsDel()
	utvuo.mutation.SetIsDel(i)
	return utvuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableIsDel(i *int32) *UpgradeTauriVersionUpdateOne {
	if i != nil {
		utvuo.SetIsDel(*i)
	}
	return utvuo
}

// AddIsDel adds i to the "is_del" field.
func (utvuo *UpgradeTauriVersionUpdateOne) AddIsDel(i int32) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.AddIsDel(i)
	return utvuo
}

// SetCreateAt sets the "create_at" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetCreateAt(t time.Time) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetCreateAt(t)
	return utvuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeTauriVersionUpdateOne {
	if t != nil {
		utvuo.SetCreateAt(*t)
	}
	return utvuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (utvuo *UpgradeTauriVersionUpdateOne) ClearCreateAt() *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ClearCreateAt()
	return utvuo
}

// SetUpdateAt sets the "update_at" field.
func (utvuo *UpgradeTauriVersionUpdateOne) SetUpdateAt(t time.Time) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.SetUpdateAt(t)
	return utvuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (utvuo *UpgradeTauriVersionUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeTauriVersionUpdateOne {
	if t != nil {
		utvuo.SetUpdateAt(*t)
	}
	return utvuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (utvuo *UpgradeTauriVersionUpdateOne) ClearUpdateAt() *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.ClearUpdateAt()
	return utvuo
}

// Mutation returns the UpgradeTauriVersionMutation object of the builder.
func (utvuo *UpgradeTauriVersionUpdateOne) Mutation() *UpgradeTauriVersionMutation {
	return utvuo.mutation
}

// Where appends a list predicates to the UpgradeTauriVersionUpdate builder.
func (utvuo *UpgradeTauriVersionUpdateOne) Where(ps ...predicate.UpgradeTauriVersion) *UpgradeTauriVersionUpdateOne {
	utvuo.mutation.Where(ps...)
	return utvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utvuo *UpgradeTauriVersionUpdateOne) Select(field string, fields ...string) *UpgradeTauriVersionUpdateOne {
	utvuo.fields = append([]string{field}, fields...)
	return utvuo
}

// Save executes the query and returns the updated UpgradeTauriVersion entity.
func (utvuo *UpgradeTauriVersionUpdateOne) Save(ctx context.Context) (*UpgradeTauriVersion, error) {
	return withHooks(ctx, utvuo.sqlSave, utvuo.mutation, utvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utvuo *UpgradeTauriVersionUpdateOne) SaveX(ctx context.Context) *UpgradeTauriVersion {
	node, err := utvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utvuo *UpgradeTauriVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := utvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utvuo *UpgradeTauriVersionUpdateOne) ExecX(ctx context.Context) {
	if err := utvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utvuo *UpgradeTauriVersionUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeTauriVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradetauriversion.Table, upgradetauriversion.Columns, sqlgraph.NewFieldSpec(upgradetauriversion.FieldID, field.TypeInt))
	id, ok := utvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeTauriVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradetauriversion.FieldID)
		for _, f := range fields {
			if !upgradetauriversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradetauriversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utvuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradetauriversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradetauriversion.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.TauriID(); ok {
		_spec.SetField(upgradetauriversion.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.AddedTauriID(); ok {
		_spec.AddField(upgradetauriversion.FieldTauriID, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.CloudFileID(); ok {
		_spec.SetField(upgradetauriversion.FieldCloudFileID, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.InstallCloudFileID(); ok {
		_spec.SetField(upgradetauriversion.FieldInstallCloudFileID, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.VersionName(); ok {
		_spec.SetField(upgradetauriversion.FieldVersionName, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.VersionCode(); ok {
		_spec.SetField(upgradetauriversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.AddedVersionCode(); ok {
		_spec.AddField(upgradetauriversion.FieldVersionCode, field.TypeInt, value)
	}
	if value, ok := utvuo.mutation.Target(); ok {
		_spec.SetField(upgradetauriversion.FieldTarget, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.Arch(); ok {
		_spec.SetField(upgradetauriversion.FieldArch, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.Signature(); ok {
		_spec.SetField(upgradetauriversion.FieldSignature, field.TypeString, value)
	}
	if value, ok := utvuo.mutation.Description(); ok {
		_spec.SetField(upgradetauriversion.FieldDescription, field.TypeString, value)
	}
	if utvuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradetauriversion.FieldDescription, field.TypeString)
	}
	if value, ok := utvuo.mutation.IsDel(); ok {
		_spec.SetField(upgradetauriversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utvuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradetauriversion.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := utvuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradetauriversion.FieldCreateAt, field.TypeTime, value)
	}
	if utvuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradetauriversion.FieldCreateAt, field.TypeTime)
	}
	if value, ok := utvuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradetauriversion.FieldUpdateAt, field.TypeTime, value)
	}
	if utvuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradetauriversion.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeTauriVersion{config: utvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradetauriversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utvuo.mutation.done = true
	return _node, nil
}
