// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradecompanyincome"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeCompanyIncome is the model entity for the UpgradeCompanyIncome schema.
type UpgradeCompanyIncome struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// 收入类型：0 - 广告收入；
	IncomeType int8 `json:"income_type,omitempty"`
	// 收入金额（单位分）
	IncomeAmount int `json:"income_amount,omitempty"`
	// 收入产生时间
	IncomeTime time.Time `json:"income_time,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 收入状态：0 - 待结算；1 - 已结算；2 - 失效（如订单取消导致收入作废）
	Status int32 `json:"status,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeCompanyIncome) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradecompanyincome.FieldID, upgradecompanyincome.FieldCompanyID, upgradecompanyincome.FieldIncomeType, upgradecompanyincome.FieldIncomeAmount, upgradecompanyincome.FieldStatus, upgradecompanyincome.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradecompanyincome.FieldRemark:
			values[i] = new(sql.NullString)
		case upgradecompanyincome.FieldIncomeTime, upgradecompanyincome.FieldCreateAt, upgradecompanyincome.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeCompanyIncome fields.
func (uci *UpgradeCompanyIncome) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradecompanyincome.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uci.ID = int(value.Int64)
		case upgradecompanyincome.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				uci.CompanyID = int(value.Int64)
			}
		case upgradecompanyincome.FieldIncomeType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field income_type", values[i])
			} else if value.Valid {
				uci.IncomeType = int8(value.Int64)
			}
		case upgradecompanyincome.FieldIncomeAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field income_amount", values[i])
			} else if value.Valid {
				uci.IncomeAmount = int(value.Int64)
			}
		case upgradecompanyincome.FieldIncomeTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field income_time", values[i])
			} else if value.Valid {
				uci.IncomeTime = value.Time
			}
		case upgradecompanyincome.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				uci.Remark = value.String
			}
		case upgradecompanyincome.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uci.Status = int32(value.Int64)
			}
		case upgradecompanyincome.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				uci.IsDel = int32(value.Int64)
			}
		case upgradecompanyincome.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uci.CreateAt = value.Time
			}
		case upgradecompanyincome.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uci.UpdateAt = value.Time
			}
		default:
			uci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeCompanyIncome.
// This includes values selected through modifiers, order, etc.
func (uci *UpgradeCompanyIncome) Value(name string) (ent.Value, error) {
	return uci.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeCompanyIncome.
// Note that you need to call UpgradeCompanyIncome.Unwrap() before calling this method if this UpgradeCompanyIncome
// was returned from a transaction, and the transaction was committed or rolled back.
func (uci *UpgradeCompanyIncome) Update() *UpgradeCompanyIncomeUpdateOne {
	return NewUpgradeCompanyIncomeClient(uci.config).UpdateOne(uci)
}

// Unwrap unwraps the UpgradeCompanyIncome entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uci *UpgradeCompanyIncome) Unwrap() *UpgradeCompanyIncome {
	_tx, ok := uci.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeCompanyIncome is not a transactional entity")
	}
	uci.config.driver = _tx.drv
	return uci
}

// String implements the fmt.Stringer.
func (uci *UpgradeCompanyIncome) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeCompanyIncome(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uci.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", uci.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("income_type=")
	builder.WriteString(fmt.Sprintf("%v", uci.IncomeType))
	builder.WriteString(", ")
	builder.WriteString("income_amount=")
	builder.WriteString(fmt.Sprintf("%v", uci.IncomeAmount))
	builder.WriteString(", ")
	builder.WriteString("income_time=")
	builder.WriteString(uci.IncomeTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(uci.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", uci.Status))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", uci.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(uci.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(uci.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeCompanyIncomes is a parsable slice of UpgradeCompanyIncome.
type UpgradeCompanyIncomes []*UpgradeCompanyIncome
