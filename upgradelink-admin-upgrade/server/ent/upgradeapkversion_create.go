// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeapkversion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkVersionCreate is the builder for creating a UpgradeApkVersion entity.
type UpgradeApkVersionCreate struct {
	config
	mutation *UpgradeApkVersionMutation
	hooks    []Hook
}

// SetCompanyID sets the "company_id" field.
func (uavc *UpgradeApkVersionCreate) SetCompanyID(i int) *UpgradeApkVersionCreate {
	uavc.mutation.SetCompanyID(i)
	return uavc
}

// SetApkID sets the "apk_id" field.
func (uavc *UpgradeApkVersionCreate) SetApkID(i int) *UpgradeApkVersionCreate {
	uavc.mutation.SetApkID(i)
	return uavc
}

// SetCloudFileID sets the "cloud_file_id" field.
func (uavc *UpgradeApkVersionCreate) SetCloudFileID(s string) *UpgradeApkVersionCreate {
	uavc.mutation.SetCloudFileID(s)
	return uavc
}

// SetVersionName sets the "version_name" field.
func (uavc *UpgradeApkVersionCreate) SetVersionName(s string) *UpgradeApkVersionCreate {
	uavc.mutation.SetVersionName(s)
	return uavc
}

// SetVersionCode sets the "version_code" field.
func (uavc *UpgradeApkVersionCreate) SetVersionCode(i int) *UpgradeApkVersionCreate {
	uavc.mutation.SetVersionCode(i)
	return uavc
}

// SetDescription sets the "description" field.
func (uavc *UpgradeApkVersionCreate) SetDescription(s string) *UpgradeApkVersionCreate {
	uavc.mutation.SetDescription(s)
	return uavc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uavc *UpgradeApkVersionCreate) SetNillableDescription(s *string) *UpgradeApkVersionCreate {
	if s != nil {
		uavc.SetDescription(*s)
	}
	return uavc
}

// SetIsDel sets the "is_del" field.
func (uavc *UpgradeApkVersionCreate) SetIsDel(i int32) *UpgradeApkVersionCreate {
	uavc.mutation.SetIsDel(i)
	return uavc
}

// SetCreateAt sets the "create_at" field.
func (uavc *UpgradeApkVersionCreate) SetCreateAt(t time.Time) *UpgradeApkVersionCreate {
	uavc.mutation.SetCreateAt(t)
	return uavc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uavc *UpgradeApkVersionCreate) SetNillableCreateAt(t *time.Time) *UpgradeApkVersionCreate {
	if t != nil {
		uavc.SetCreateAt(*t)
	}
	return uavc
}

// SetUpdateAt sets the "update_at" field.
func (uavc *UpgradeApkVersionCreate) SetUpdateAt(t time.Time) *UpgradeApkVersionCreate {
	uavc.mutation.SetUpdateAt(t)
	return uavc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uavc *UpgradeApkVersionCreate) SetNillableUpdateAt(t *time.Time) *UpgradeApkVersionCreate {
	if t != nil {
		uavc.SetUpdateAt(*t)
	}
	return uavc
}

// SetID sets the "id" field.
func (uavc *UpgradeApkVersionCreate) SetID(i int) *UpgradeApkVersionCreate {
	uavc.mutation.SetID(i)
	return uavc
}

// Mutation returns the UpgradeApkVersionMutation object of the builder.
func (uavc *UpgradeApkVersionCreate) Mutation() *UpgradeApkVersionMutation {
	return uavc.mutation
}

// Save creates the UpgradeApkVersion in the database.
func (uavc *UpgradeApkVersionCreate) Save(ctx context.Context) (*UpgradeApkVersion, error) {
	return withHooks(ctx, uavc.sqlSave, uavc.mutation, uavc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uavc *UpgradeApkVersionCreate) SaveX(ctx context.Context) *UpgradeApkVersion {
	v, err := uavc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uavc *UpgradeApkVersionCreate) Exec(ctx context.Context) error {
	_, err := uavc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uavc *UpgradeApkVersionCreate) ExecX(ctx context.Context) {
	if err := uavc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uavc *UpgradeApkVersionCreate) check() error {
	if _, ok := uavc.mutation.CompanyID(); !ok {
		return &ValidationError{Name: "company_id", err: errors.New(`ent: missing required field "UpgradeApkVersion.company_id"`)}
	}
	if _, ok := uavc.mutation.ApkID(); !ok {
		return &ValidationError{Name: "apk_id", err: errors.New(`ent: missing required field "UpgradeApkVersion.apk_id"`)}
	}
	if _, ok := uavc.mutation.CloudFileID(); !ok {
		return &ValidationError{Name: "cloud_file_id", err: errors.New(`ent: missing required field "UpgradeApkVersion.cloud_file_id"`)}
	}
	if _, ok := uavc.mutation.VersionName(); !ok {
		return &ValidationError{Name: "version_name", err: errors.New(`ent: missing required field "UpgradeApkVersion.version_name"`)}
	}
	if _, ok := uavc.mutation.VersionCode(); !ok {
		return &ValidationError{Name: "version_code", err: errors.New(`ent: missing required field "UpgradeApkVersion.version_code"`)}
	}
	if _, ok := uavc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "UpgradeApkVersion.is_del"`)}
	}
	return nil
}

func (uavc *UpgradeApkVersionCreate) sqlSave(ctx context.Context) (*UpgradeApkVersion, error) {
	if err := uavc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uavc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uavc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uavc.mutation.id = &_node.ID
	uavc.mutation.done = true
	return _node, nil
}

func (uavc *UpgradeApkVersionCreate) createSpec() (*UpgradeApkVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &UpgradeApkVersion{config: uavc.config}
		_spec = sqlgraph.NewCreateSpec(upgradeapkversion.Table, sqlgraph.NewFieldSpec(upgradeapkversion.FieldID, field.TypeInt))
	)
	if id, ok := uavc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uavc.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapkversion.FieldCompanyID, field.TypeInt, value)
		_node.CompanyID = value
	}
	if value, ok := uavc.mutation.ApkID(); ok {
		_spec.SetField(upgradeapkversion.FieldApkID, field.TypeInt, value)
		_node.ApkID = value
	}
	if value, ok := uavc.mutation.CloudFileID(); ok {
		_spec.SetField(upgradeapkversion.FieldCloudFileID, field.TypeString, value)
		_node.CloudFileID = value
	}
	if value, ok := uavc.mutation.VersionName(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionName, field.TypeString, value)
		_node.VersionName = value
	}
	if value, ok := uavc.mutation.VersionCode(); ok {
		_spec.SetField(upgradeapkversion.FieldVersionCode, field.TypeInt, value)
		_node.VersionCode = value
	}
	if value, ok := uavc.mutation.Description(); ok {
		_spec.SetField(upgradeapkversion.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := uavc.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkversion.FieldIsDel, field.TypeInt32, value)
		_node.IsDel = value
	}
	if value, ok := uavc.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := uavc.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkversion.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// UpgradeApkVersionCreateBulk is the builder for creating many UpgradeApkVersion entities in bulk.
type UpgradeApkVersionCreateBulk struct {
	config
	err      error
	builders []*UpgradeApkVersionCreate
}

// Save creates the UpgradeApkVersion entities in the database.
func (uavcb *UpgradeApkVersionCreateBulk) Save(ctx context.Context) ([]*UpgradeApkVersion, error) {
	if uavcb.err != nil {
		return nil, uavcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uavcb.builders))
	nodes := make([]*UpgradeApkVersion, len(uavcb.builders))
	mutators := make([]Mutator, len(uavcb.builders))
	for i := range uavcb.builders {
		func(i int, root context.Context) {
			builder := uavcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpgradeApkVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uavcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uavcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uavcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uavcb *UpgradeApkVersionCreateBulk) SaveX(ctx context.Context) []*UpgradeApkVersion {
	v, err := uavcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uavcb *UpgradeApkVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := uavcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uavcb *UpgradeApkVersionCreateBulk) ExecX(ctx context.Context) {
	if err := uavcb.Exec(ctx); err != nil {
		panic(err)
	}
}
