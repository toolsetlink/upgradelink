// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradefileupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeFileUpgradeStrategyUpdate is the builder for updating UpgradeFileUpgradeStrategy entities.
type UpgradeFileUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyUpdate builder.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.Where(ps...)
	return ufusu
}

// SetCompanyID sets the "company_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetCompanyID()
	ufusu.mutation.SetCompanyID(i)
	return ufusu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetCompanyID(*i)
	}
	return ufusu
}

// AddCompanyID adds i to the "company_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddCompanyID(i)
	return ufusu
}

// SetEnable sets the "enable" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetEnable()
	ufusu.mutation.SetEnable(i)
	return ufusu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetEnable(*i)
	}
	return ufusu
}

// AddEnable adds i to the "enable" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddEnable(i)
	return ufusu
}

// SetName sets the "name" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetName(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetName(s)
	return ufusu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetName(*s)
	}
	return ufusu
}

// SetDescription sets the "description" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetDescription(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetDescription(s)
	return ufusu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetDescription(*s)
	}
	return ufusu
}

// ClearDescription clears the value of the "description" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) ClearDescription() *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ClearDescription()
	return ufusu
}

// SetFileID sets the "file_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetFileID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetFileID()
	ufusu.mutation.SetFileID(i)
	return ufusu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableFileID(i *int) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetFileID(*i)
	}
	return ufusu
}

// AddFileID adds i to the "file_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddFileID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddFileID(i)
	return ufusu
}

// SetFileVersionID sets the "file_version_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetFileVersionID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetFileVersionID()
	ufusu.mutation.SetFileVersionID(i)
	return ufusu
}

// SetNillableFileVersionID sets the "file_version_id" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableFileVersionID(i *int) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetFileVersionID(*i)
	}
	return ufusu
}

// AddFileVersionID adds i to the "file_version_id" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddFileVersionID(i int) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddFileVersionID(i)
	return ufusu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetBeginDatetime(t)
	return ufusu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeFileUpgradeStrategyUpdate {
	if t != nil {
		ufusu.SetBeginDatetime(*t)
	}
	return ufusu
}

// SetEndDatetime sets the "end_datetime" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetEndDatetime(t)
	return ufusu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeFileUpgradeStrategyUpdate {
	if t != nil {
		ufusu.SetEndDatetime(*t)
	}
	return ufusu
}

// SetUpgradeType sets the "upgrade_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetUpgradeType()
	ufusu.mutation.SetUpgradeType(i)
	return ufusu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetUpgradeType(*i)
	}
	return ufusu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddUpgradeType(i)
	return ufusu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetPromptUpgradeContent(s)
	return ufusu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetPromptUpgradeContent(*s)
	}
	return ufusu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ClearPromptUpgradeContent()
	return ufusu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetUpgradeDevType()
	ufusu.mutation.SetUpgradeDevType(i)
	return ufusu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetUpgradeDevType(*i)
	}
	return ufusu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddUpgradeDevType(i)
	return ufusu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetUpgradeDevData(s)
	return ufusu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetUpgradeDevData(*s)
	}
	return ufusu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetUpgradeVersionType()
	ufusu.mutation.SetUpgradeVersionType(i)
	return ufusu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetUpgradeVersionType(*i)
	}
	return ufusu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddUpgradeVersionType(i)
	return ufusu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetUpgradeVersionData(s)
	return ufusu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetUpgradeVersionData(*s)
	}
	return ufusu
}

// SetIsGray sets the "is_gray" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetIsGray()
	ufusu.mutation.SetIsGray(i)
	return ufusu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetIsGray(*i)
	}
	return ufusu
}

// AddIsGray adds i to the "is_gray" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddIsGray(i)
	return ufusu
}

// SetGrayData sets the "gray_data" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetGrayData(s)
	return ufusu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetGrayData(*s)
	}
	return ufusu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetIsFlowLimit()
	ufusu.mutation.SetIsFlowLimit(i)
	return ufusu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetIsFlowLimit(*i)
	}
	return ufusu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddIsFlowLimit(i)
	return ufusu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetFlowLimitData(s)
	return ufusu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeFileUpgradeStrategyUpdate {
	if s != nil {
		ufusu.SetFlowLimitData(*s)
	}
	return ufusu
}

// SetIsDel sets the "is_del" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ResetIsDel()
	ufusu.mutation.SetIsDel(i)
	return ufusu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyUpdate {
	if i != nil {
		ufusu.SetIsDel(*i)
	}
	return ufusu
}

// AddIsDel adds i to the "is_del" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.AddIsDel(i)
	return ufusu
}

// SetCreateAt sets the "create_at" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetCreateAt(t)
	return ufusu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyUpdate {
	if t != nil {
		ufusu.SetCreateAt(*t)
	}
	return ufusu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) ClearCreateAt() *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ClearCreateAt()
	return ufusu
}

// SetUpdateAt sets the "update_at" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.SetUpdateAt(t)
	return ufusu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyUpdate {
	if t != nil {
		ufusu.SetUpdateAt(*t)
	}
	return ufusu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeFileUpgradeStrategyUpdate {
	ufusu.mutation.ClearUpdateAt()
	return ufusu
}

// Mutation returns the UpgradeFileUpgradeStrategyMutation object of the builder.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) Mutation() *UpgradeFileUpgradeStrategyMutation {
	return ufusu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufusu.sqlSave, ufusu.mutation, ufusu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ufusu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ufusu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusu *UpgradeFileUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := ufusu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusu *UpgradeFileUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategy.Table, upgradefileupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategy.FieldID, field.TypeInt))
	if ps := ufusu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusu.mutation.CompanyID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.Name(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ufusu.mutation.Description(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ufusu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ufusu.mutation.FileID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.AddedFileID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.FileVersionID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFileVersionID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.AddedFileVersionID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldFileVersionID, field.TypeInt, value)
	}
	if value, ok := ufusu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ufusu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ufusu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ufusu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ufusu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ufusu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ufusu.mutation.IsGray(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.GrayData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ufusu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ufusu.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusu.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufusu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufusu.mutation.done = true
	return n, nil
}

// UpgradeFileUpgradeStrategyUpdateOne is the builder for updating a single UpgradeFileUpgradeStrategy entity.
type UpgradeFileUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeFileUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetCompanyID()
	ufusuo.mutation.SetCompanyID(i)
	return ufusuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetCompanyID(*i)
	}
	return ufusuo
}

// AddCompanyID adds i to the "company_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddCompanyID(i)
	return ufusuo
}

// SetEnable sets the "enable" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetEnable()
	ufusuo.mutation.SetEnable(i)
	return ufusuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetEnable(*i)
	}
	return ufusuo
}

// AddEnable adds i to the "enable" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddEnable(i)
	return ufusuo
}

// SetName sets the "name" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetName(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetName(s)
	return ufusuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetName(*s)
	}
	return ufusuo
}

// SetDescription sets the "description" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetDescription(s)
	return ufusuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetDescription(*s)
	}
	return ufusuo
}

// ClearDescription clears the value of the "description" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) ClearDescription() *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ClearDescription()
	return ufusuo
}

// SetFileID sets the "file_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetFileID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetFileID()
	ufusuo.mutation.SetFileID(i)
	return ufusuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableFileID(i *int) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetFileID(*i)
	}
	return ufusuo
}

// AddFileID adds i to the "file_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddFileID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddFileID(i)
	return ufusuo
}

// SetFileVersionID sets the "file_version_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetFileVersionID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetFileVersionID()
	ufusuo.mutation.SetFileVersionID(i)
	return ufusuo
}

// SetNillableFileVersionID sets the "file_version_id" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableFileVersionID(i *int) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetFileVersionID(*i)
	}
	return ufusuo
}

// AddFileVersionID adds i to the "file_version_id" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddFileVersionID(i int) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddFileVersionID(i)
	return ufusuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetBeginDatetime(t)
	return ufusuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	if t != nil {
		ufusuo.SetBeginDatetime(*t)
	}
	return ufusuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetEndDatetime(t)
	return ufusuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	if t != nil {
		ufusuo.SetEndDatetime(*t)
	}
	return ufusuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetUpgradeType()
	ufusuo.mutation.SetUpgradeType(i)
	return ufusuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetUpgradeType(*i)
	}
	return ufusuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddUpgradeType(i)
	return ufusuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetPromptUpgradeContent(s)
	return ufusuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetPromptUpgradeContent(*s)
	}
	return ufusuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ClearPromptUpgradeContent()
	return ufusuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetUpgradeDevType()
	ufusuo.mutation.SetUpgradeDevType(i)
	return ufusuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetUpgradeDevType(*i)
	}
	return ufusuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddUpgradeDevType(i)
	return ufusuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetUpgradeDevData(s)
	return ufusuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetUpgradeDevData(*s)
	}
	return ufusuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetUpgradeVersionType()
	ufusuo.mutation.SetUpgradeVersionType(i)
	return ufusuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetUpgradeVersionType(*i)
	}
	return ufusuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddUpgradeVersionType(i)
	return ufusuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetUpgradeVersionData(s)
	return ufusuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetUpgradeVersionData(*s)
	}
	return ufusuo
}

// SetIsGray sets the "is_gray" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetIsGray()
	ufusuo.mutation.SetIsGray(i)
	return ufusuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetIsGray(*i)
	}
	return ufusuo
}

// AddIsGray adds i to the "is_gray" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddIsGray(i)
	return ufusuo
}

// SetGrayData sets the "gray_data" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetGrayData(s)
	return ufusuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetGrayData(*s)
	}
	return ufusuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetIsFlowLimit()
	ufusuo.mutation.SetIsFlowLimit(i)
	return ufusuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetIsFlowLimit(*i)
	}
	return ufusuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddIsFlowLimit(i)
	return ufusuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetFlowLimitData(s)
	return ufusuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeFileUpgradeStrategyUpdateOne {
	if s != nil {
		ufusuo.SetFlowLimitData(*s)
	}
	return ufusuo
}

// SetIsDel sets the "is_del" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ResetIsDel()
	ufusuo.mutation.SetIsDel(i)
	return ufusuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeFileUpgradeStrategyUpdateOne {
	if i != nil {
		ufusuo.SetIsDel(*i)
	}
	return ufusuo
}

// AddIsDel adds i to the "is_del" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.AddIsDel(i)
	return ufusuo
}

// SetCreateAt sets the "create_at" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetCreateAt(t)
	return ufusuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	if t != nil {
		ufusuo.SetCreateAt(*t)
	}
	return ufusuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ClearCreateAt()
	return ufusuo
}

// SetUpdateAt sets the "update_at" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.SetUpdateAt(t)
	return ufusuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeFileUpgradeStrategyUpdateOne {
	if t != nil {
		ufusuo.SetUpdateAt(*t)
	}
	return ufusuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.ClearUpdateAt()
	return ufusuo
}

// Mutation returns the UpgradeFileUpgradeStrategyMutation object of the builder.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) Mutation() *UpgradeFileUpgradeStrategyMutation {
	return ufusuo.mutation
}

// Where appends a list predicates to the UpgradeFileUpgradeStrategyUpdate builder.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeFileUpgradeStrategy) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.mutation.Where(ps...)
	return ufusuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeFileUpgradeStrategyUpdateOne {
	ufusuo.fields = append([]string{field}, fields...)
	return ufusuo
}

// Save executes the query and returns the updated UpgradeFileUpgradeStrategy entity.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeFileUpgradeStrategy, error) {
	return withHooks(ctx, ufusuo.sqlSave, ufusuo.mutation, ufusuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeFileUpgradeStrategy {
	node, err := ufusuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ufusuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ufusuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufusuo *UpgradeFileUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeFileUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradefileupgradestrategy.Table, upgradefileupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradefileupgradestrategy.FieldID, field.TypeInt))
	id, ok := ufusuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeFileUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufusuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradefileupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradefileupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradefileupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufusuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufusuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.Enable(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.Name(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := ufusuo.mutation.Description(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if ufusuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := ufusuo.mutation.FileID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.AddedFileID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldFileID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.FileVersionID(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFileVersionID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.AddedFileVersionID(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldFileVersionID, field.TypeInt, value)
	}
	if value, ok := ufusuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ufusuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ufusuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if ufusuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := ufusuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := ufusuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := ufusuo.mutation.IsGray(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.GrayData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := ufusuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := ufusuo.mutation.IsDel(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradefileupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ufusuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ufusuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ufusuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradefileupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ufusuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradefileupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeFileUpgradeStrategy{config: ufusuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufusuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradefileupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufusuo.mutation.done = true
	return _node, nil
}
