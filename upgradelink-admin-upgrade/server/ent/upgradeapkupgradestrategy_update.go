// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyUpdate is the builder for updating UpgradeApkUpgradeStrategy entities.
type UpgradeApkUpgradeStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyUpdate builder.
func (uausu *UpgradeApkUpgradeStrategyUpdate) Where(ps ...predicate.UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.Where(ps...)
	return uausu
}

// SetCompanyID sets the "company_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetCompanyID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetCompanyID()
	uausu.mutation.SetCompanyID(i)
	return uausu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableCompanyID(i *int) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetCompanyID(*i)
	}
	return uausu
}

// AddCompanyID adds i to the "company_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddCompanyID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddCompanyID(i)
	return uausu
}

// SetEnable sets the "enable" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetEnable(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetEnable()
	uausu.mutation.SetEnable(i)
	return uausu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetEnable(*i)
	}
	return uausu
}

// AddEnable adds i to the "enable" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddEnable(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddEnable(i)
	return uausu
}

// SetName sets the "name" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetName(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetName(s)
	return uausu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableName(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetName(*s)
	}
	return uausu
}

// SetDescription sets the "description" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetDescription(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetDescription(s)
	return uausu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableDescription(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetDescription(*s)
	}
	return uausu
}

// ClearDescription clears the value of the "description" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) ClearDescription() *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ClearDescription()
	return uausu
}

// SetApkID sets the "apk_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetApkID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetApkID()
	uausu.mutation.SetApkID(i)
	return uausu
}

// SetNillableApkID sets the "apk_id" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableApkID(i *int) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetApkID(*i)
	}
	return uausu
}

// AddApkID adds i to the "apk_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddApkID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddApkID(i)
	return uausu
}

// SetApkVersionID sets the "apk_version_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetApkVersionID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetApkVersionID()
	uausu.mutation.SetApkVersionID(i)
	return uausu
}

// SetNillableApkVersionID sets the "apk_version_id" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableApkVersionID(i *int) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetApkVersionID(*i)
	}
	return uausu
}

// AddApkVersionID adds i to the "apk_version_id" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddApkVersionID(i int) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddApkVersionID(i)
	return uausu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetBeginDatetime(t)
	return uausu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeApkUpgradeStrategyUpdate {
	if t != nil {
		uausu.SetBeginDatetime(*t)
	}
	return uausu
}

// SetEndDatetime sets the "end_datetime" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetEndDatetime(t)
	return uausu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeApkUpgradeStrategyUpdate {
	if t != nil {
		uausu.SetEndDatetime(*t)
	}
	return uausu
}

// SetUpgradeType sets the "upgrade_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpgradeType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetUpgradeType()
	uausu.mutation.SetUpgradeType(i)
	return uausu
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpgradeType(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetUpgradeType(*i)
	}
	return uausu
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddUpgradeType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddUpgradeType(i)
	return uausu
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetPromptUpgradeContent(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetPromptUpgradeContent(s)
	return uausu
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillablePromptUpgradeContent(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetPromptUpgradeContent(*s)
	}
	return uausu
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) ClearPromptUpgradeContent() *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ClearPromptUpgradeContent()
	return uausu
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpgradeDevType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetUpgradeDevType()
	uausu.mutation.SetUpgradeDevType(i)
	return uausu
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpgradeDevType(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetUpgradeDevType(*i)
	}
	return uausu
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddUpgradeDevType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddUpgradeDevType(i)
	return uausu
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpgradeDevData(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetUpgradeDevData(s)
	return uausu
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpgradeDevData(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetUpgradeDevData(*s)
	}
	return uausu
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpgradeVersionType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetUpgradeVersionType()
	uausu.mutation.SetUpgradeVersionType(i)
	return uausu
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpgradeVersionType(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetUpgradeVersionType(*i)
	}
	return uausu
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddUpgradeVersionType(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddUpgradeVersionType(i)
	return uausu
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpgradeVersionData(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetUpgradeVersionData(s)
	return uausu
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpgradeVersionData(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetUpgradeVersionData(*s)
	}
	return uausu
}

// SetIsGray sets the "is_gray" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetIsGray(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetIsGray()
	uausu.mutation.SetIsGray(i)
	return uausu
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableIsGray(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetIsGray(*i)
	}
	return uausu
}

// AddIsGray adds i to the "is_gray" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddIsGray(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddIsGray(i)
	return uausu
}

// SetGrayData sets the "gray_data" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetGrayData(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetGrayData(s)
	return uausu
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableGrayData(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetGrayData(*s)
	}
	return uausu
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetIsFlowLimit(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetIsFlowLimit()
	uausu.mutation.SetIsFlowLimit(i)
	return uausu
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableIsFlowLimit(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetIsFlowLimit(*i)
	}
	return uausu
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddIsFlowLimit(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddIsFlowLimit(i)
	return uausu
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetFlowLimitData(s string) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetFlowLimitData(s)
	return uausu
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableFlowLimitData(s *string) *UpgradeApkUpgradeStrategyUpdate {
	if s != nil {
		uausu.SetFlowLimitData(*s)
	}
	return uausu
}

// SetIsDel sets the "is_del" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetIsDel(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ResetIsDel()
	uausu.mutation.SetIsDel(i)
	return uausu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyUpdate {
	if i != nil {
		uausu.SetIsDel(*i)
	}
	return uausu
}

// AddIsDel adds i to the "is_del" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) AddIsDel(i int32) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.AddIsDel(i)
	return uausu
}

// SetCreateAt sets the "create_at" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetCreateAt(t)
	return uausu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyUpdate {
	if t != nil {
		uausu.SetCreateAt(*t)
	}
	return uausu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) ClearCreateAt() *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ClearCreateAt()
	return uausu
}

// SetUpdateAt sets the "update_at" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.SetUpdateAt(t)
	return uausu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyUpdate {
	if t != nil {
		uausu.SetUpdateAt(*t)
	}
	return uausu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausu *UpgradeApkUpgradeStrategyUpdate) ClearUpdateAt() *UpgradeApkUpgradeStrategyUpdate {
	uausu.mutation.ClearUpdateAt()
	return uausu
}

// Mutation returns the UpgradeApkUpgradeStrategyMutation object of the builder.
func (uausu *UpgradeApkUpgradeStrategyUpdate) Mutation() *UpgradeApkUpgradeStrategyMutation {
	return uausu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uausu *UpgradeApkUpgradeStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uausu.sqlSave, uausu.mutation, uausu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausu *UpgradeApkUpgradeStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uausu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uausu *UpgradeApkUpgradeStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uausu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausu *UpgradeApkUpgradeStrategyUpdate) ExecX(ctx context.Context) {
	if err := uausu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausu *UpgradeApkUpgradeStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategy.Table, upgradeapkupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategy.FieldID, field.TypeInt))
	if ps := uausu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausu.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.Name(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := uausu.mutation.Description(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if uausu.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := uausu.mutation.ApkID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.AddedApkID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.ApkVersionID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldApkVersionID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.AddedApkVersionID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldApkVersionID, field.TypeInt, value)
	}
	if value, ok := uausu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uausu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uausu.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if uausu.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := uausu.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := uausu.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := uausu.mutation.IsGray(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.GrayData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := uausu.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := uausu.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uausu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uausu.mutation.done = true
	return n, nil
}

// UpgradeApkUpgradeStrategyUpdateOne is the builder for updating a single UpgradeApkUpgradeStrategy entity.
type UpgradeApkUpgradeStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyMutation
}

// SetCompanyID sets the "company_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetCompanyID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetCompanyID()
	uausuo.mutation.SetCompanyID(i)
	return uausuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableCompanyID(i *int) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetCompanyID(*i)
	}
	return uausuo
}

// AddCompanyID adds i to the "company_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddCompanyID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddCompanyID(i)
	return uausuo
}

// SetEnable sets the "enable" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetEnable(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetEnable()
	uausuo.mutation.SetEnable(i)
	return uausuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetEnable(*i)
	}
	return uausuo
}

// AddEnable adds i to the "enable" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddEnable(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddEnable(i)
	return uausuo
}

// SetName sets the "name" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetName(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetName(s)
	return uausuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableName(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetName(*s)
	}
	return uausuo
}

// SetDescription sets the "description" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetDescription(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetDescription(s)
	return uausuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableDescription(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetDescription(*s)
	}
	return uausuo
}

// ClearDescription clears the value of the "description" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) ClearDescription() *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ClearDescription()
	return uausuo
}

// SetApkID sets the "apk_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetApkID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetApkID()
	uausuo.mutation.SetApkID(i)
	return uausuo
}

// SetNillableApkID sets the "apk_id" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableApkID(i *int) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetApkID(*i)
	}
	return uausuo
}

// AddApkID adds i to the "apk_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddApkID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddApkID(i)
	return uausuo
}

// SetApkVersionID sets the "apk_version_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetApkVersionID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetApkVersionID()
	uausuo.mutation.SetApkVersionID(i)
	return uausuo
}

// SetNillableApkVersionID sets the "apk_version_id" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableApkVersionID(i *int) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetApkVersionID(*i)
	}
	return uausuo
}

// AddApkVersionID adds i to the "apk_version_id" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddApkVersionID(i int) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddApkVersionID(i)
	return uausuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetBeginDatetime(t)
	return uausuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	if t != nil {
		uausuo.SetBeginDatetime(*t)
	}
	return uausuo
}

// SetEndDatetime sets the "end_datetime" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetEndDatetime(t)
	return uausuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	if t != nil {
		uausuo.SetEndDatetime(*t)
	}
	return uausuo
}

// SetUpgradeType sets the "upgrade_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpgradeType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetUpgradeType()
	uausuo.mutation.SetUpgradeType(i)
	return uausuo
}

// SetNillableUpgradeType sets the "upgrade_type" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpgradeType(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetUpgradeType(*i)
	}
	return uausuo
}

// AddUpgradeType adds i to the "upgrade_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddUpgradeType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddUpgradeType(i)
	return uausuo
}

// SetPromptUpgradeContent sets the "prompt_upgrade_content" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetPromptUpgradeContent(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetPromptUpgradeContent(s)
	return uausuo
}

// SetNillablePromptUpgradeContent sets the "prompt_upgrade_content" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillablePromptUpgradeContent(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetPromptUpgradeContent(*s)
	}
	return uausuo
}

// ClearPromptUpgradeContent clears the value of the "prompt_upgrade_content" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) ClearPromptUpgradeContent() *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ClearPromptUpgradeContent()
	return uausuo
}

// SetUpgradeDevType sets the "upgrade_dev_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpgradeDevType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetUpgradeDevType()
	uausuo.mutation.SetUpgradeDevType(i)
	return uausuo
}

// SetNillableUpgradeDevType sets the "upgrade_dev_type" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpgradeDevType(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetUpgradeDevType(*i)
	}
	return uausuo
}

// AddUpgradeDevType adds i to the "upgrade_dev_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddUpgradeDevType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddUpgradeDevType(i)
	return uausuo
}

// SetUpgradeDevData sets the "upgrade_dev_data" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpgradeDevData(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetUpgradeDevData(s)
	return uausuo
}

// SetNillableUpgradeDevData sets the "upgrade_dev_data" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpgradeDevData(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetUpgradeDevData(*s)
	}
	return uausuo
}

// SetUpgradeVersionType sets the "upgrade_version_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpgradeVersionType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetUpgradeVersionType()
	uausuo.mutation.SetUpgradeVersionType(i)
	return uausuo
}

// SetNillableUpgradeVersionType sets the "upgrade_version_type" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpgradeVersionType(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetUpgradeVersionType(*i)
	}
	return uausuo
}

// AddUpgradeVersionType adds i to the "upgrade_version_type" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddUpgradeVersionType(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddUpgradeVersionType(i)
	return uausuo
}

// SetUpgradeVersionData sets the "upgrade_version_data" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpgradeVersionData(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetUpgradeVersionData(s)
	return uausuo
}

// SetNillableUpgradeVersionData sets the "upgrade_version_data" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpgradeVersionData(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetUpgradeVersionData(*s)
	}
	return uausuo
}

// SetIsGray sets the "is_gray" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetIsGray(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetIsGray()
	uausuo.mutation.SetIsGray(i)
	return uausuo
}

// SetNillableIsGray sets the "is_gray" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableIsGray(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetIsGray(*i)
	}
	return uausuo
}

// AddIsGray adds i to the "is_gray" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddIsGray(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddIsGray(i)
	return uausuo
}

// SetGrayData sets the "gray_data" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetGrayData(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetGrayData(s)
	return uausuo
}

// SetNillableGrayData sets the "gray_data" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableGrayData(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetGrayData(*s)
	}
	return uausuo
}

// SetIsFlowLimit sets the "is_flow_limit" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetIsFlowLimit(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetIsFlowLimit()
	uausuo.mutation.SetIsFlowLimit(i)
	return uausuo
}

// SetNillableIsFlowLimit sets the "is_flow_limit" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableIsFlowLimit(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetIsFlowLimit(*i)
	}
	return uausuo
}

// AddIsFlowLimit adds i to the "is_flow_limit" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddIsFlowLimit(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddIsFlowLimit(i)
	return uausuo
}

// SetFlowLimitData sets the "flow_limit_data" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetFlowLimitData(s string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetFlowLimitData(s)
	return uausuo
}

// SetNillableFlowLimitData sets the "flow_limit_data" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableFlowLimitData(s *string) *UpgradeApkUpgradeStrategyUpdateOne {
	if s != nil {
		uausuo.SetFlowLimitData(*s)
	}
	return uausuo
}

// SetIsDel sets the "is_del" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetIsDel(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ResetIsDel()
	uausuo.mutation.SetIsDel(i)
	return uausuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyUpdateOne {
	if i != nil {
		uausuo.SetIsDel(*i)
	}
	return uausuo
}

// AddIsDel adds i to the "is_del" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) AddIsDel(i int32) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.AddIsDel(i)
	return uausuo
}

// SetCreateAt sets the "create_at" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetCreateAt(t)
	return uausuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	if t != nil {
		uausuo.SetCreateAt(*t)
	}
	return uausuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) ClearCreateAt() *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ClearCreateAt()
	return uausuo
}

// SetUpdateAt sets the "update_at" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.SetUpdateAt(t)
	return uausuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyUpdateOne {
	if t != nil {
		uausuo.SetUpdateAt(*t)
	}
	return uausuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) ClearUpdateAt() *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.ClearUpdateAt()
	return uausuo
}

// Mutation returns the UpgradeApkUpgradeStrategyMutation object of the builder.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) Mutation() *UpgradeApkUpgradeStrategyMutation {
	return uausuo.mutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyUpdate builder.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) Where(ps ...predicate.UpgradeApkUpgradeStrategy) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.mutation.Where(ps...)
	return uausuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) Select(field string, fields ...string) *UpgradeApkUpgradeStrategyUpdateOne {
	uausuo.fields = append([]string{field}, fields...)
	return uausuo
}

// Save executes the query and returns the updated UpgradeApkUpgradeStrategy entity.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) Save(ctx context.Context) (*UpgradeApkUpgradeStrategy, error) {
	return withHooks(ctx, uausuo.sqlSave, uausuo.mutation, uausuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeApkUpgradeStrategy {
	node, err := uausuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uausuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uausuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausuo *UpgradeApkUpgradeStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeApkUpgradeStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategy.Table, upgradeapkupgradestrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategy.FieldID, field.TypeInt))
	id, ok := uausuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeApkUpgradeStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uausuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapkupgradestrategy.FieldID)
		for _, f := range fields {
			if !upgradeapkupgradestrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeapkupgradestrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uausuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausuo.mutation.CompanyID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldCompanyID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.Name(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldName, field.TypeString, value)
	}
	if value, ok := uausuo.mutation.Description(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldDescription, field.TypeString, value)
	}
	if uausuo.mutation.DescriptionCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldDescription, field.TypeString)
	}
	if value, ok := uausuo.mutation.ApkID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.AddedApkID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldApkID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.ApkVersionID(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldApkVersionID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.AddedApkVersionID(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldApkVersionID, field.TypeInt, value)
	}
	if value, ok := uausuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uausuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uausuo.mutation.UpgradeType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedUpgradeType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.PromptUpgradeContent(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldPromptUpgradeContent, field.TypeString, value)
	}
	if uausuo.mutation.PromptUpgradeContentCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldPromptUpgradeContent, field.TypeString)
	}
	if value, ok := uausuo.mutation.UpgradeDevType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedUpgradeDevType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeDevType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.UpgradeDevData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeDevData, field.TypeString, value)
	}
	if value, ok := uausuo.mutation.UpgradeVersionType(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedUpgradeVersionType(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldUpgradeVersionType, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.UpgradeVersionData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpgradeVersionData, field.TypeString, value)
	}
	if value, ok := uausuo.mutation.IsGray(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedIsGray(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsGray, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.GrayData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldGrayData, field.TypeString, value)
	}
	if value, ok := uausuo.mutation.IsFlowLimit(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedIsFlowLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsFlowLimit, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.FlowLimitData(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldFlowLimitData, field.TypeString, value)
	}
	if value, ok := uausuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeApkUpgradeStrategy{config: uausuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uausuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uausuo.mutation.done = true
	return _node, nil
}
