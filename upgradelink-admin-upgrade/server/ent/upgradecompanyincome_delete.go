// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradecompanyincome"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeCompanyIncomeDelete is the builder for deleting a UpgradeCompanyIncome entity.
type UpgradeCompanyIncomeDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeCompanyIncomeMutation
}

// Where appends a list predicates to the UpgradeCompanyIncomeDelete builder.
func (ucid *UpgradeCompanyIncomeDelete) Where(ps ...predicate.UpgradeCompanyIncome) *UpgradeCompanyIncomeDelete {
	ucid.mutation.Where(ps...)
	return ucid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucid *UpgradeCompanyIncomeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucid.sqlExec, ucid.mutation, ucid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucid *UpgradeCompanyIncomeDelete) ExecX(ctx context.Context) int {
	n, err := ucid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucid *UpgradeCompanyIncomeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradecompanyincome.Table, sqlgraph.NewFieldSpec(upgradecompanyincome.FieldID, field.TypeInt))
	if ps := ucid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucid.mutation.done = true
	return affected, err
}

// UpgradeCompanyIncomeDeleteOne is the builder for deleting a single UpgradeCompanyIncome entity.
type UpgradeCompanyIncomeDeleteOne struct {
	ucid *UpgradeCompanyIncomeDelete
}

// Where appends a list predicates to the UpgradeCompanyIncomeDelete builder.
func (ucido *UpgradeCompanyIncomeDeleteOne) Where(ps ...predicate.UpgradeCompanyIncome) *UpgradeCompanyIncomeDeleteOne {
	ucido.ucid.mutation.Where(ps...)
	return ucido
}

// Exec executes the deletion query.
func (ucido *UpgradeCompanyIncomeDeleteOne) Exec(ctx context.Context) error {
	n, err := ucido.ucid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradecompanyincome.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucido *UpgradeCompanyIncomeDeleteOne) ExecX(ctx context.Context) {
	if err := ucido.Exec(ctx); err != nil {
		panic(err)
	}
}
