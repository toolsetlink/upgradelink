// Code generated by ent, DO NOT EDIT.

package upgradedevgrouprelation

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldID, id))
}

// DevID applies equality check predicate on the "dev_id" field. It's identical to DevIDEQ.
func DevID(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldDevID, v))
}

// DevGroupID applies equality check predicate on the "dev_group_id" field. It's identical to DevGroupIDEQ.
func DevGroupID(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldDevGroupID, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldUpdateAt, v))
}

// DevIDEQ applies the EQ predicate on the "dev_id" field.
func DevIDEQ(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldDevID, v))
}

// DevIDNEQ applies the NEQ predicate on the "dev_id" field.
func DevIDNEQ(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldDevID, v))
}

// DevIDIn applies the In predicate on the "dev_id" field.
func DevIDIn(vs ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldDevID, vs...))
}

// DevIDNotIn applies the NotIn predicate on the "dev_id" field.
func DevIDNotIn(vs ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldDevID, vs...))
}

// DevIDGT applies the GT predicate on the "dev_id" field.
func DevIDGT(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldDevID, v))
}

// DevIDGTE applies the GTE predicate on the "dev_id" field.
func DevIDGTE(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldDevID, v))
}

// DevIDLT applies the LT predicate on the "dev_id" field.
func DevIDLT(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldDevID, v))
}

// DevIDLTE applies the LTE predicate on the "dev_id" field.
func DevIDLTE(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldDevID, v))
}

// DevGroupIDEQ applies the EQ predicate on the "dev_group_id" field.
func DevGroupIDEQ(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldDevGroupID, v))
}

// DevGroupIDNEQ applies the NEQ predicate on the "dev_group_id" field.
func DevGroupIDNEQ(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldDevGroupID, v))
}

// DevGroupIDIn applies the In predicate on the "dev_group_id" field.
func DevGroupIDIn(vs ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldDevGroupID, vs...))
}

// DevGroupIDNotIn applies the NotIn predicate on the "dev_group_id" field.
func DevGroupIDNotIn(vs ...int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldDevGroupID, vs...))
}

// DevGroupIDGT applies the GT predicate on the "dev_group_id" field.
func DevGroupIDGT(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldDevGroupID, v))
}

// DevGroupIDGTE applies the GTE predicate on the "dev_group_id" field.
func DevGroupIDGTE(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldDevGroupID, v))
}

// DevGroupIDLT applies the LT predicate on the "dev_group_id" field.
func DevGroupIDLT(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldDevGroupID, v))
}

// DevGroupIDLTE applies the LTE predicate on the "dev_group_id" field.
func DevGroupIDLTE(v int) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldDevGroupID, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeDevGroupRelation) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeDevGroupRelation) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeDevGroupRelation) predicate.UpgradeDevGroupRelation {
	return predicate.UpgradeDevGroupRelation(sql.NotPredicates(p))
}
