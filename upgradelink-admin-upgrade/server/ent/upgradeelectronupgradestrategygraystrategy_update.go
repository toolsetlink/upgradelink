// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeElectronUpgradeStrategyGrayStrategy entities.
type UpgradeElectronUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyGrayStrategyUpdate builder.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.Where(ps...)
	return ueusgsu
}

// SetEnable sets the "enable" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.ResetEnable()
	ueusgsu.mutation.SetEnable(i)
	return ueusgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ueusgsu.SetEnable(*i)
	}
	return ueusgsu
}

// AddEnable adds i to the "enable" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.AddEnable(i)
	return ueusgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.SetBeginDatetime(t)
	return ueusgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ueusgsu.SetBeginDatetime(*t)
	}
	return ueusgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.SetEndDatetime(t)
	return ueusgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ueusgsu.SetEndDatetime(*t)
	}
	return ueusgsu
}

// SetLimit sets the "limit" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.ResetLimit()
	ueusgsu.mutation.SetLimit(i)
	return ueusgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ueusgsu.SetLimit(*i)
	}
	return ueusgsu
}

// AddLimit adds i to the "limit" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.AddLimit(i)
	return ueusgsu
}

// SetIsDel sets the "is_del" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.ResetIsDel()
	ueusgsu.mutation.SetIsDel(i)
	return ueusgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		ueusgsu.SetIsDel(*i)
	}
	return ueusgsu
}

// AddIsDel adds i to the "is_del" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.AddIsDel(i)
	return ueusgsu
}

// SetCreateAt sets the "create_at" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.SetCreateAt(t)
	return ueusgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ueusgsu.SetCreateAt(*t)
	}
	return ueusgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.ClearCreateAt()
	return ueusgsu
}

// SetUpdateAt sets the "update_at" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.SetUpdateAt(t)
	return ueusgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		ueusgsu.SetUpdateAt(*t)
	}
	return ueusgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeElectronUpgradeStrategyGrayStrategyUpdate {
	ueusgsu.mutation.ClearUpdateAt()
	return ueusgsu
}

// Mutation returns the UpgradeElectronUpgradeStrategyGrayStrategyMutation object of the builder.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeElectronUpgradeStrategyGrayStrategyMutation {
	return ueusgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusgsu.sqlSave, ueusgsu.mutation, ueusgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := ueusgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := ueusgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := ueusgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusgsu *UpgradeElectronUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategygraystrategy.Table, upgradeelectronupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := ueusgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusgsu.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ueusgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ueusgsu.mutation.Limit(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueusgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ueusgsu.mutation.done = true
	return n, nil
}

// UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeElectronUpgradeStrategyGrayStrategy entity.
type UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.ResetEnable()
	ueusgsuo.mutation.SetEnable(i)
	return ueusgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ueusgsuo.SetEnable(*i)
	}
	return ueusgsuo
}

// AddEnable adds i to the "enable" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.AddEnable(i)
	return ueusgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.SetBeginDatetime(t)
	return ueusgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ueusgsuo.SetBeginDatetime(*t)
	}
	return ueusgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.SetEndDatetime(t)
	return ueusgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ueusgsuo.SetEndDatetime(*t)
	}
	return ueusgsuo
}

// SetLimit sets the "limit" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.ResetLimit()
	ueusgsuo.mutation.SetLimit(i)
	return ueusgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ueusgsuo.SetLimit(*i)
	}
	return ueusgsuo
}

// AddLimit adds i to the "limit" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.AddLimit(i)
	return ueusgsuo
}

// SetIsDel sets the "is_del" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.ResetIsDel()
	ueusgsuo.mutation.SetIsDel(i)
	return ueusgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		ueusgsuo.SetIsDel(*i)
	}
	return ueusgsuo
}

// AddIsDel adds i to the "is_del" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.AddIsDel(i)
	return ueusgsuo
}

// SetCreateAt sets the "create_at" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.SetCreateAt(t)
	return ueusgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ueusgsuo.SetCreateAt(*t)
	}
	return ueusgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.ClearCreateAt()
	return ueusgsuo
}

// SetUpdateAt sets the "update_at" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.SetUpdateAt(t)
	return ueusgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		ueusgsuo.SetUpdateAt(*t)
	}
	return ueusgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.ClearUpdateAt()
	return ueusgsuo
}

// Mutation returns the UpgradeElectronUpgradeStrategyGrayStrategyMutation object of the builder.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeElectronUpgradeStrategyGrayStrategyMutation {
	return ueusgsuo.mutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyGrayStrategyUpdate builder.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.mutation.Where(ps...)
	return ueusgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne {
	ueusgsuo.fields = append([]string{field}, fields...)
	return ueusgsuo
}

// Save executes the query and returns the updated UpgradeElectronUpgradeStrategyGrayStrategy entity.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeElectronUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, ueusgsuo.sqlSave, ueusgsuo.mutation, ueusgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeElectronUpgradeStrategyGrayStrategy {
	node, err := ueusgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := ueusgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := ueusgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ueusgsuo *UpgradeElectronUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeElectronUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeelectronupgradestrategygraystrategy.Table, upgradeelectronupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := ueusgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeElectronUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ueusgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeelectronupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradeelectronupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeelectronupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueusgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueusgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := ueusgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := ueusgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := ueusgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := ueusgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeelectronupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := ueusgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if ueusgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := ueusgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeelectronupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if ueusgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeelectronupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeElectronUpgradeStrategyGrayStrategy{config: ueusgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueusgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeelectronupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ueusgsuo.mutation.done = true
	return _node, nil
}
