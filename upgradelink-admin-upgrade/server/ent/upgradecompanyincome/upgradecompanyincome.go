// Code generated by ent, DO NOT EDIT.

package upgradecompanyincome

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradecompanyincome type in the database.
	Label = "upgrade_company_income"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldIncomeType holds the string denoting the income_type field in the database.
	FieldIncomeType = "income_type"
	// FieldIncomeAmount holds the string denoting the income_amount field in the database.
	FieldIncomeAmount = "income_amount"
	// FieldIncomeTime holds the string denoting the income_time field in the database.
	FieldIncomeTime = "income_time"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradecompanyincome in the database.
	Table = "upgrade_company_income"
)

// Columns holds all SQL columns for upgradecompanyincome fields.
var Columns = []string{
	FieldID,
	FieldCompanyID,
	FieldIncomeType,
	FieldIncomeAmount,
	FieldIncomeTime,
	FieldRemark,
	FieldStatus,
	FieldIsDel,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeCompanyIncome queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByIncomeType orders the results by the income_type field.
func ByIncomeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncomeType, opts...).ToFunc()
}

// ByIncomeAmount orders the results by the income_amount field.
func ByIncomeAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncomeAmount, opts...).ToFunc()
}

// ByIncomeTime orders the results by the income_time field.
func ByIncomeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncomeTime, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
