// Code generated by ent, DO NOT EDIT.

package upgradecompanyincome

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldID, id))
}

// CompanyID applies equality check predicate on the "company_id" field. It's identical to CompanyIDEQ.
func CompanyID(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldCompanyID, v))
}

// IncomeType applies equality check predicate on the "income_type" field. It's identical to IncomeTypeEQ.
func IncomeType(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeType, v))
}

// IncomeAmount applies equality check predicate on the "income_amount" field. It's identical to IncomeAmountEQ.
func IncomeAmount(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeAmount, v))
}

// IncomeTime applies equality check predicate on the "income_time" field. It's identical to IncomeTimeEQ.
func IncomeTime(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeTime, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldStatus, v))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIsDel, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldUpdateAt, v))
}

// CompanyIDEQ applies the EQ predicate on the "company_id" field.
func CompanyIDEQ(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldCompanyID, v))
}

// CompanyIDNEQ applies the NEQ predicate on the "company_id" field.
func CompanyIDNEQ(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldCompanyID, v))
}

// CompanyIDIn applies the In predicate on the "company_id" field.
func CompanyIDIn(vs ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldCompanyID, vs...))
}

// CompanyIDNotIn applies the NotIn predicate on the "company_id" field.
func CompanyIDNotIn(vs ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldCompanyID, vs...))
}

// CompanyIDGT applies the GT predicate on the "company_id" field.
func CompanyIDGT(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldCompanyID, v))
}

// CompanyIDGTE applies the GTE predicate on the "company_id" field.
func CompanyIDGTE(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldCompanyID, v))
}

// CompanyIDLT applies the LT predicate on the "company_id" field.
func CompanyIDLT(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldCompanyID, v))
}

// CompanyIDLTE applies the LTE predicate on the "company_id" field.
func CompanyIDLTE(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldCompanyID, v))
}

// IncomeTypeEQ applies the EQ predicate on the "income_type" field.
func IncomeTypeEQ(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeType, v))
}

// IncomeTypeNEQ applies the NEQ predicate on the "income_type" field.
func IncomeTypeNEQ(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldIncomeType, v))
}

// IncomeTypeIn applies the In predicate on the "income_type" field.
func IncomeTypeIn(vs ...int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldIncomeType, vs...))
}

// IncomeTypeNotIn applies the NotIn predicate on the "income_type" field.
func IncomeTypeNotIn(vs ...int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldIncomeType, vs...))
}

// IncomeTypeGT applies the GT predicate on the "income_type" field.
func IncomeTypeGT(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldIncomeType, v))
}

// IncomeTypeGTE applies the GTE predicate on the "income_type" field.
func IncomeTypeGTE(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldIncomeType, v))
}

// IncomeTypeLT applies the LT predicate on the "income_type" field.
func IncomeTypeLT(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldIncomeType, v))
}

// IncomeTypeLTE applies the LTE predicate on the "income_type" field.
func IncomeTypeLTE(v int8) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldIncomeType, v))
}

// IncomeAmountEQ applies the EQ predicate on the "income_amount" field.
func IncomeAmountEQ(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeAmount, v))
}

// IncomeAmountNEQ applies the NEQ predicate on the "income_amount" field.
func IncomeAmountNEQ(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldIncomeAmount, v))
}

// IncomeAmountIn applies the In predicate on the "income_amount" field.
func IncomeAmountIn(vs ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldIncomeAmount, vs...))
}

// IncomeAmountNotIn applies the NotIn predicate on the "income_amount" field.
func IncomeAmountNotIn(vs ...int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldIncomeAmount, vs...))
}

// IncomeAmountGT applies the GT predicate on the "income_amount" field.
func IncomeAmountGT(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldIncomeAmount, v))
}

// IncomeAmountGTE applies the GTE predicate on the "income_amount" field.
func IncomeAmountGTE(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldIncomeAmount, v))
}

// IncomeAmountLT applies the LT predicate on the "income_amount" field.
func IncomeAmountLT(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldIncomeAmount, v))
}

// IncomeAmountLTE applies the LTE predicate on the "income_amount" field.
func IncomeAmountLTE(v int) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldIncomeAmount, v))
}

// IncomeTimeEQ applies the EQ predicate on the "income_time" field.
func IncomeTimeEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIncomeTime, v))
}

// IncomeTimeNEQ applies the NEQ predicate on the "income_time" field.
func IncomeTimeNEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldIncomeTime, v))
}

// IncomeTimeIn applies the In predicate on the "income_time" field.
func IncomeTimeIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldIncomeTime, vs...))
}

// IncomeTimeNotIn applies the NotIn predicate on the "income_time" field.
func IncomeTimeNotIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldIncomeTime, vs...))
}

// IncomeTimeGT applies the GT predicate on the "income_time" field.
func IncomeTimeGT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldIncomeTime, v))
}

// IncomeTimeGTE applies the GTE predicate on the "income_time" field.
func IncomeTimeGTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldIncomeTime, v))
}

// IncomeTimeLT applies the LT predicate on the "income_time" field.
func IncomeTimeLT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldIncomeTime, v))
}

// IncomeTimeLTE applies the LTE predicate on the "income_time" field.
func IncomeTimeLTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldIncomeTime, v))
}

// IncomeTimeIsNil applies the IsNil predicate on the "income_time" field.
func IncomeTimeIsNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIsNull(FieldIncomeTime))
}

// IncomeTimeNotNil applies the NotNil predicate on the "income_time" field.
func IncomeTimeNotNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotNull(FieldIncomeTime))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldStatus, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldIsDel, v))
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldIsDel, vs...))
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldIsDel, vs...))
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldIsDel, v))
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldIsDel, v))
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldIsDel, v))
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int32) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldIsDel, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeCompanyIncome) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeCompanyIncome) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeCompanyIncome) predicate.UpgradeCompanyIncome {
	return predicate.UpgradeCompanyIncome(sql.NotPredicates(p))
}
