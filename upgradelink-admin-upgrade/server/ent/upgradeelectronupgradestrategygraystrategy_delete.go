// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronupgradestrategygraystrategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeElectronUpgradeStrategyGrayStrategyDelete is the builder for deleting a UpgradeElectronUpgradeStrategyGrayStrategy entity.
type UpgradeElectronUpgradeStrategyGrayStrategyDelete struct {
	config
	hooks    []Hook
	mutation *UpgradeElectronUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyGrayStrategyDelete builder.
func (ueusgsd *UpgradeElectronUpgradeStrategyGrayStrategyDelete) Where(ps ...predicate.UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyDelete {
	ueusgsd.mutation.Where(ps...)
	return ueusgsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ueusgsd *UpgradeElectronUpgradeStrategyGrayStrategyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ueusgsd.sqlExec, ueusgsd.mutation, ueusgsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgsd *UpgradeElectronUpgradeStrategyGrayStrategyDelete) ExecX(ctx context.Context) int {
	n, err := ueusgsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ueusgsd *UpgradeElectronUpgradeStrategyGrayStrategyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upgradeelectronupgradestrategygraystrategy.Table, sqlgraph.NewFieldSpec(upgradeelectronupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := ueusgsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ueusgsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ueusgsd.mutation.done = true
	return affected, err
}

// UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne is the builder for deleting a single UpgradeElectronUpgradeStrategyGrayStrategy entity.
type UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne struct {
	ueusgsd *UpgradeElectronUpgradeStrategyGrayStrategyDelete
}

// Where appends a list predicates to the UpgradeElectronUpgradeStrategyGrayStrategyDelete builder.
func (ueusgsdo *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne) Where(ps ...predicate.UpgradeElectronUpgradeStrategyGrayStrategy) *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne {
	ueusgsdo.ueusgsd.mutation.Where(ps...)
	return ueusgsdo
}

// Exec executes the deletion query.
func (ueusgsdo *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne) Exec(ctx context.Context) error {
	n, err := ueusgsdo.ueusgsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upgradeelectronupgradestrategygraystrategy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ueusgsdo *UpgradeElectronUpgradeStrategyGrayStrategyDeleteOne) ExecX(ctx context.Context) {
	if err := ueusgsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
