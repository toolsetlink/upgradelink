// Code generated by ent, DO NOT EDIT.

package upgradetrafficpacket

import (
	"upgradelink-admin-upgrade/server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldName, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldKey, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldSize, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldPrice, v))
}

// ValidDays applies equality check predicate on the "valid_days" field. It's identical to ValidDaysEQ.
func ValidDays(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldValidDays, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldStatus, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldDescription, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldUpdateAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContainsFold(FieldName, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContainsFold(FieldKey, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldSize, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldPrice, v))
}

// ValidDaysEQ applies the EQ predicate on the "valid_days" field.
func ValidDaysEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldValidDays, v))
}

// ValidDaysNEQ applies the NEQ predicate on the "valid_days" field.
func ValidDaysNEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldValidDays, v))
}

// ValidDaysIn applies the In predicate on the "valid_days" field.
func ValidDaysIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldValidDays, vs...))
}

// ValidDaysNotIn applies the NotIn predicate on the "valid_days" field.
func ValidDaysNotIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldValidDays, vs...))
}

// ValidDaysGT applies the GT predicate on the "valid_days" field.
func ValidDaysGT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldValidDays, v))
}

// ValidDaysGTE applies the GTE predicate on the "valid_days" field.
func ValidDaysGTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldValidDays, v))
}

// ValidDaysLT applies the LT predicate on the "valid_days" field.
func ValidDaysLT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldValidDays, v))
}

// ValidDaysLTE applies the LTE predicate on the "valid_days" field.
func ValidDaysLTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldValidDays, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldStatus, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldContainsFold(FieldDescription, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldCreateAt, v))
}

// CreateAtIsNil applies the IsNil predicate on the "create_at" field.
func CreateAtIsNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIsNull(FieldCreateAt))
}

// CreateAtNotNil applies the NotNil predicate on the "create_at" field.
func CreateAtNotNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotNull(FieldCreateAt))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.FieldNotNull(FieldUpdateAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpgradeTrafficPacket) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpgradeTrafficPacket) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpgradeTrafficPacket) predicate.UpgradeTrafficPacket {
	return predicate.UpgradeTrafficPacket(sql.NotPredicates(p))
}
