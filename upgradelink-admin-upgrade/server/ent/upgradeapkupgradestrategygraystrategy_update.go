// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategygraystrategy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyGrayStrategyUpdate is the builder for updating UpgradeApkUpgradeStrategyGrayStrategy entities.
type UpgradeApkUpgradeStrategyGrayStrategyUpdate struct {
	config
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyGrayStrategyMutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyGrayStrategyUpdate builder.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) Where(ps ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.Where(ps...)
	return uausgsu
}

// SetEnable sets the "enable" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetEnable(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.ResetEnable()
	uausgsu.mutation.SetEnable(i)
	return uausgsu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uausgsu.SetEnable(*i)
	}
	return uausgsu
}

// AddEnable adds i to the "enable" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) AddEnable(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.AddEnable(i)
	return uausgsu
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetBeginDatetime(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.SetBeginDatetime(t)
	return uausgsu
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableBeginDatetime(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uausgsu.SetBeginDatetime(*t)
	}
	return uausgsu
}

// SetEndDatetime sets the "end_datetime" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetEndDatetime(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.SetEndDatetime(t)
	return uausgsu
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableEndDatetime(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uausgsu.SetEndDatetime(*t)
	}
	return uausgsu
}

// SetLimit sets the "limit" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetLimit(i int) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.ResetLimit()
	uausgsu.mutation.SetLimit(i)
	return uausgsu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableLimit(i *int) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uausgsu.SetLimit(*i)
	}
	return uausgsu
}

// AddLimit adds i to the "limit" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) AddLimit(i int) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.AddLimit(i)
	return uausgsu
}

// SetIsDel sets the "is_del" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetIsDel(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.ResetIsDel()
	uausgsu.mutation.SetIsDel(i)
	return uausgsu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if i != nil {
		uausgsu.SetIsDel(*i)
	}
	return uausgsu
}

// AddIsDel adds i to the "is_del" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) AddIsDel(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.AddIsDel(i)
	return uausgsu
}

// SetCreateAt sets the "create_at" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.SetCreateAt(t)
	return uausgsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uausgsu.SetCreateAt(*t)
	}
	return uausgsu
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) ClearCreateAt() *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.ClearCreateAt()
	return uausgsu
}

// SetUpdateAt sets the "update_at" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.SetUpdateAt(t)
	return uausgsu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	if t != nil {
		uausgsu.SetUpdateAt(*t)
	}
	return uausgsu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) ClearUpdateAt() *UpgradeApkUpgradeStrategyGrayStrategyUpdate {
	uausgsu.mutation.ClearUpdateAt()
	return uausgsu
}

// Mutation returns the UpgradeApkUpgradeStrategyGrayStrategyMutation object of the builder.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) Mutation() *UpgradeApkUpgradeStrategyGrayStrategyMutation {
	return uausgsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uausgsu.sqlSave, uausgsu.mutation, uausgsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := uausgsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) Exec(ctx context.Context) error {
	_, err := uausgsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) ExecX(ctx context.Context) {
	if err := uausgsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausgsu *UpgradeApkUpgradeStrategyGrayStrategyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategygraystrategy.Table, upgradeapkupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategygraystrategy.FieldID, field.TypeInt))
	if ps := uausgsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausgsu.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausgsu.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausgsu.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uausgsu.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uausgsu.mutation.Limit(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausgsu.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausgsu.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausgsu.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausgsu.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausgsu.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausgsu.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausgsu.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uausgsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uausgsu.mutation.done = true
	return n, nil
}

// UpgradeApkUpgradeStrategyGrayStrategyUpdateOne is the builder for updating a single UpgradeApkUpgradeStrategyGrayStrategy entity.
type UpgradeApkUpgradeStrategyGrayStrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpgradeApkUpgradeStrategyGrayStrategyMutation
}

// SetEnable sets the "enable" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetEnable(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.ResetEnable()
	uausgsuo.mutation.SetEnable(i)
	return uausgsuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableEnable(i *int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uausgsuo.SetEnable(*i)
	}
	return uausgsuo
}

// AddEnable adds i to the "enable" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) AddEnable(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.AddEnable(i)
	return uausgsuo
}

// SetBeginDatetime sets the "begin_datetime" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetBeginDatetime(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.SetBeginDatetime(t)
	return uausgsuo
}

// SetNillableBeginDatetime sets the "begin_datetime" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableBeginDatetime(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uausgsuo.SetBeginDatetime(*t)
	}
	return uausgsuo
}

// SetEndDatetime sets the "end_datetime" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetEndDatetime(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.SetEndDatetime(t)
	return uausgsuo
}

// SetNillableEndDatetime sets the "end_datetime" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableEndDatetime(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uausgsuo.SetEndDatetime(*t)
	}
	return uausgsuo
}

// SetLimit sets the "limit" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetLimit(i int) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.ResetLimit()
	uausgsuo.mutation.SetLimit(i)
	return uausgsuo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableLimit(i *int) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uausgsuo.SetLimit(*i)
	}
	return uausgsuo
}

// AddLimit adds i to the "limit" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) AddLimit(i int) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.AddLimit(i)
	return uausgsuo
}

// SetIsDel sets the "is_del" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetIsDel(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.ResetIsDel()
	uausgsuo.mutation.SetIsDel(i)
	return uausgsuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableIsDel(i *int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if i != nil {
		uausgsuo.SetIsDel(*i)
	}
	return uausgsuo
}

// AddIsDel adds i to the "is_del" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) AddIsDel(i int32) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.AddIsDel(i)
	return uausgsuo
}

// SetCreateAt sets the "create_at" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetCreateAt(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.SetCreateAt(t)
	return uausgsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableCreateAt(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uausgsuo.SetCreateAt(*t)
	}
	return uausgsuo
}

// ClearCreateAt clears the value of the "create_at" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) ClearCreateAt() *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.ClearCreateAt()
	return uausgsuo
}

// SetUpdateAt sets the "update_at" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetUpdateAt(t time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.SetUpdateAt(t)
	return uausgsuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SetNillableUpdateAt(t *time.Time) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	if t != nil {
		uausgsuo.SetUpdateAt(*t)
	}
	return uausgsuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) ClearUpdateAt() *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.ClearUpdateAt()
	return uausgsuo
}

// Mutation returns the UpgradeApkUpgradeStrategyGrayStrategyMutation object of the builder.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) Mutation() *UpgradeApkUpgradeStrategyGrayStrategyMutation {
	return uausgsuo.mutation
}

// Where appends a list predicates to the UpgradeApkUpgradeStrategyGrayStrategyUpdate builder.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) Where(ps ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.mutation.Where(ps...)
	return uausgsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) Select(field string, fields ...string) *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne {
	uausgsuo.fields = append([]string{field}, fields...)
	return uausgsuo
}

// Save executes the query and returns the updated UpgradeApkUpgradeStrategyGrayStrategy entity.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) Save(ctx context.Context) (*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	return withHooks(ctx, uausgsuo.sqlSave, uausgsuo.mutation, uausgsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) SaveX(ctx context.Context) *UpgradeApkUpgradeStrategyGrayStrategy {
	node, err := uausgsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := uausgsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) ExecX(ctx context.Context) {
	if err := uausgsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uausgsuo *UpgradeApkUpgradeStrategyGrayStrategyUpdateOne) sqlSave(ctx context.Context) (_node *UpgradeApkUpgradeStrategyGrayStrategy, err error) {
	_spec := sqlgraph.NewUpdateSpec(upgradeapkupgradestrategygraystrategy.Table, upgradeapkupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategygraystrategy.FieldID, field.TypeInt))
	id, ok := uausgsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpgradeApkUpgradeStrategyGrayStrategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uausgsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapkupgradestrategygraystrategy.FieldID)
		for _, f := range fields {
			if !upgradeapkupgradestrategygraystrategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upgradeapkupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uausgsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uausgsuo.mutation.Enable(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausgsuo.mutation.AddedEnable(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldEnable, field.TypeInt32, value)
	}
	if value, ok := uausgsuo.mutation.BeginDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldBeginDatetime, field.TypeTime, value)
	}
	if value, ok := uausgsuo.mutation.EndDatetime(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldEndDatetime, field.TypeTime, value)
	}
	if value, ok := uausgsuo.mutation.Limit(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausgsuo.mutation.AddedLimit(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldLimit, field.TypeInt, value)
	}
	if value, ok := uausgsuo.mutation.IsDel(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausgsuo.mutation.AddedIsDel(); ok {
		_spec.AddField(upgradeapkupgradestrategygraystrategy.FieldIsDel, field.TypeInt32, value)
	}
	if value, ok := uausgsuo.mutation.CreateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldCreateAt, field.TypeTime, value)
	}
	if uausgsuo.mutation.CreateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategygraystrategy.FieldCreateAt, field.TypeTime)
	}
	if value, ok := uausgsuo.mutation.UpdateAt(); ok {
		_spec.SetField(upgradeapkupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime, value)
	}
	if uausgsuo.mutation.UpdateAtCleared() {
		_spec.ClearField(upgradeapkupgradestrategygraystrategy.FieldUpdateAt, field.TypeTime)
	}
	_node = &UpgradeApkUpgradeStrategyGrayStrategy{config: uausgsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uausgsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uausgsuo.mutation.done = true
	return _node, nil
}
