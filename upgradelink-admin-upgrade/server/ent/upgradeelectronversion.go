// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradeelectronversion"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeElectronVersion is the model entity for the UpgradeElectronVersion schema.
type UpgradeElectronVersion struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 公司ID
	CompanyID int `json:"company_id,omitempty"`
	// tauri应用ID
	ElectronID int `json:"electron_id,omitempty"`
	// 云文件id
	CloudFileID string `json:"cloud_file_id,omitempty"`
	// 生成的sha512
	Sha512 string `json:"sha512,omitempty"`
	// 云文件id 安装文件
	InstallCloudFileID string `json:"install_cloud_file_id,omitempty"`
	// 安装包生成的sha512
	InstallSha512 string `json:"install_sha512,omitempty"`
	// 版本名
	VersionName string `json:"version_name,omitempty"`
	// 版本号
	VersionCode int `json:"version_code,omitempty"`
	// 操作平台:linux、darwin、windows
	Platform string `json:"platform,omitempty"`
	// 机器架构:x64、arm64
	Arch string `json:"arch,omitempty"`
	// 描述信息
	Description string `json:"description,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeElectronVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradeelectronversion.FieldID, upgradeelectronversion.FieldCompanyID, upgradeelectronversion.FieldElectronID, upgradeelectronversion.FieldVersionCode, upgradeelectronversion.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradeelectronversion.FieldCloudFileID, upgradeelectronversion.FieldSha512, upgradeelectronversion.FieldInstallCloudFileID, upgradeelectronversion.FieldInstallSha512, upgradeelectronversion.FieldVersionName, upgradeelectronversion.FieldPlatform, upgradeelectronversion.FieldArch, upgradeelectronversion.FieldDescription:
			values[i] = new(sql.NullString)
		case upgradeelectronversion.FieldCreateAt, upgradeelectronversion.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeElectronVersion fields.
func (uev *UpgradeElectronVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradeelectronversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uev.ID = int(value.Int64)
		case upgradeelectronversion.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				uev.CompanyID = int(value.Int64)
			}
		case upgradeelectronversion.FieldElectronID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field electron_id", values[i])
			} else if value.Valid {
				uev.ElectronID = int(value.Int64)
			}
		case upgradeelectronversion.FieldCloudFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloud_file_id", values[i])
			} else if value.Valid {
				uev.CloudFileID = value.String
			}
		case upgradeelectronversion.FieldSha512:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha512", values[i])
			} else if value.Valid {
				uev.Sha512 = value.String
			}
		case upgradeelectronversion.FieldInstallCloudFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_cloud_file_id", values[i])
			} else if value.Valid {
				uev.InstallCloudFileID = value.String
			}
		case upgradeelectronversion.FieldInstallSha512:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_sha512", values[i])
			} else if value.Valid {
				uev.InstallSha512 = value.String
			}
		case upgradeelectronversion.FieldVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_name", values[i])
			} else if value.Valid {
				uev.VersionName = value.String
			}
		case upgradeelectronversion.FieldVersionCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_code", values[i])
			} else if value.Valid {
				uev.VersionCode = int(value.Int64)
			}
		case upgradeelectronversion.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				uev.Platform = value.String
			}
		case upgradeelectronversion.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				uev.Arch = value.String
			}
		case upgradeelectronversion.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				uev.Description = value.String
			}
		case upgradeelectronversion.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				uev.IsDel = int32(value.Int64)
			}
		case upgradeelectronversion.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				uev.CreateAt = value.Time
			}
		case upgradeelectronversion.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				uev.UpdateAt = value.Time
			}
		default:
			uev.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeElectronVersion.
// This includes values selected through modifiers, order, etc.
func (uev *UpgradeElectronVersion) Value(name string) (ent.Value, error) {
	return uev.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeElectronVersion.
// Note that you need to call UpgradeElectronVersion.Unwrap() before calling this method if this UpgradeElectronVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (uev *UpgradeElectronVersion) Update() *UpgradeElectronVersionUpdateOne {
	return NewUpgradeElectronVersionClient(uev.config).UpdateOne(uev)
}

// Unwrap unwraps the UpgradeElectronVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uev *UpgradeElectronVersion) Unwrap() *UpgradeElectronVersion {
	_tx, ok := uev.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeElectronVersion is not a transactional entity")
	}
	uev.config.driver = _tx.drv
	return uev
}

// String implements the fmt.Stringer.
func (uev *UpgradeElectronVersion) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeElectronVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uev.ID))
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", uev.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("electron_id=")
	builder.WriteString(fmt.Sprintf("%v", uev.ElectronID))
	builder.WriteString(", ")
	builder.WriteString("cloud_file_id=")
	builder.WriteString(uev.CloudFileID)
	builder.WriteString(", ")
	builder.WriteString("sha512=")
	builder.WriteString(uev.Sha512)
	builder.WriteString(", ")
	builder.WriteString("install_cloud_file_id=")
	builder.WriteString(uev.InstallCloudFileID)
	builder.WriteString(", ")
	builder.WriteString("install_sha512=")
	builder.WriteString(uev.InstallSha512)
	builder.WriteString(", ")
	builder.WriteString("version_name=")
	builder.WriteString(uev.VersionName)
	builder.WriteString(", ")
	builder.WriteString("version_code=")
	builder.WriteString(fmt.Sprintf("%v", uev.VersionCode))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(uev.Platform)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(uev.Arch)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(uev.Description)
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", uev.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(uev.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(uev.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeElectronVersions is a parsable slice of UpgradeElectronVersion.
type UpgradeElectronVersions []*UpgradeElectronVersion
