// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-upgrade/server/ent/upgradedevgrouprelation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UpgradeDevGroupRelation is the model entity for the UpgradeDevGroupRelation schema.
type UpgradeDevGroupRelation struct {
	config `json:"-"`
	// ID of the ent.
	// ID
	ID int `json:"id,omitempty"`
	// 设备id
	DevID int `json:"dev_id,omitempty"`
	// 设备分组 id
	DevGroupID int `json:"dev_group_id,omitempty"`
	// 是否删除 0：正常；1：已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 修改时间
	UpdateAt     time.Time `json:"update_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpgradeDevGroupRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upgradedevgrouprelation.FieldID, upgradedevgrouprelation.FieldDevID, upgradedevgrouprelation.FieldDevGroupID, upgradedevgrouprelation.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case upgradedevgrouprelation.FieldCreateAt, upgradedevgrouprelation.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpgradeDevGroupRelation fields.
func (udgr *UpgradeDevGroupRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upgradedevgrouprelation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			udgr.ID = int(value.Int64)
		case upgradedevgrouprelation.FieldDevID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dev_id", values[i])
			} else if value.Valid {
				udgr.DevID = int(value.Int64)
			}
		case upgradedevgrouprelation.FieldDevGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dev_group_id", values[i])
			} else if value.Valid {
				udgr.DevGroupID = int(value.Int64)
			}
		case upgradedevgrouprelation.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				udgr.IsDel = int32(value.Int64)
			}
		case upgradedevgrouprelation.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				udgr.CreateAt = value.Time
			}
		case upgradedevgrouprelation.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				udgr.UpdateAt = value.Time
			}
		default:
			udgr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpgradeDevGroupRelation.
// This includes values selected through modifiers, order, etc.
func (udgr *UpgradeDevGroupRelation) Value(name string) (ent.Value, error) {
	return udgr.selectValues.Get(name)
}

// Update returns a builder for updating this UpgradeDevGroupRelation.
// Note that you need to call UpgradeDevGroupRelation.Unwrap() before calling this method if this UpgradeDevGroupRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (udgr *UpgradeDevGroupRelation) Update() *UpgradeDevGroupRelationUpdateOne {
	return NewUpgradeDevGroupRelationClient(udgr.config).UpdateOne(udgr)
}

// Unwrap unwraps the UpgradeDevGroupRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (udgr *UpgradeDevGroupRelation) Unwrap() *UpgradeDevGroupRelation {
	_tx, ok := udgr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpgradeDevGroupRelation is not a transactional entity")
	}
	udgr.config.driver = _tx.drv
	return udgr
}

// String implements the fmt.Stringer.
func (udgr *UpgradeDevGroupRelation) String() string {
	var builder strings.Builder
	builder.WriteString("UpgradeDevGroupRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", udgr.ID))
	builder.WriteString("dev_id=")
	builder.WriteString(fmt.Sprintf("%v", udgr.DevID))
	builder.WriteString(", ")
	builder.WriteString("dev_group_id=")
	builder.WriteString(fmt.Sprintf("%v", udgr.DevGroupID))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", udgr.IsDel))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(udgr.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(udgr.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpgradeDevGroupRelations is a parsable slice of UpgradeDevGroupRelation.
type UpgradeDevGroupRelations []*UpgradeDevGroupRelation
