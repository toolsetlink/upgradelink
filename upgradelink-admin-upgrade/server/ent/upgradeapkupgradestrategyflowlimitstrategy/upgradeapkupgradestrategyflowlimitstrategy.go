// Code generated by ent, DO NOT EDIT.

package upgradeapkupgradestrategyflowlimitstrategy

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the upgradeapkupgradestrategyflowlimitstrategy type in the database.
	Label = "upgrade_apk_upgrade_strategy_flow_limit_strategy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldBeginTime holds the string denoting the begin_time field in the database.
	FieldBeginTime = "begin_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDimension holds the string denoting the dimension field in the database.
	FieldDimension = "dimension"
	// FieldLimit holds the string denoting the limit field in the database.
	FieldLimit = "limit"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// Table holds the table name of the upgradeapkupgradestrategyflowlimitstrategy in the database.
	Table = "upgrade_apk_upgrade_strategy_flow_limit_strategy"
)

// Columns holds all SQL columns for upgradeapkupgradestrategyflowlimitstrategy fields.
var Columns = []string{
	FieldID,
	FieldEnable,
	FieldBeginTime,
	FieldEndTime,
	FieldDimension,
	FieldLimit,
	FieldIsDel,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UpgradeApkUpgradeStrategyFlowLimitStrategy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByBeginTime orders the results by the begin_time field.
func ByBeginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeginTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByDimension orders the results by the dimension field.
func ByDimension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimension, opts...).ToFunc()
}

// ByLimit orders the results by the limit field.
func ByLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLimit, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}
