// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"upgradelink-admin-upgrade/server/ent/predicate"
	"upgradelink-admin-upgrade/server/ent/upgradeapkupgradestrategygraystrategy"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UpgradeApkUpgradeStrategyGrayStrategyQuery is the builder for querying UpgradeApkUpgradeStrategyGrayStrategy entities.
type UpgradeApkUpgradeStrategyGrayStrategyQuery struct {
	config
	ctx        *QueryContext
	order      []upgradeapkupgradestrategygraystrategy.OrderOption
	inters     []Interceptor
	predicates []predicate.UpgradeApkUpgradeStrategyGrayStrategy
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpgradeApkUpgradeStrategyGrayStrategyQuery builder.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Where(ps ...predicate.UpgradeApkUpgradeStrategyGrayStrategy) *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	uausgsq.predicates = append(uausgsq.predicates, ps...)
	return uausgsq
}

// Limit the number of records to be returned by this query.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Limit(limit int) *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	uausgsq.ctx.Limit = &limit
	return uausgsq
}

// Offset to start from.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Offset(offset int) *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	uausgsq.ctx.Offset = &offset
	return uausgsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Unique(unique bool) *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	uausgsq.ctx.Unique = &unique
	return uausgsq
}

// Order specifies how the records should be ordered.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Order(o ...upgradeapkupgradestrategygraystrategy.OrderOption) *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	uausgsq.order = append(uausgsq.order, o...)
	return uausgsq
}

// First returns the first UpgradeApkUpgradeStrategyGrayStrategy entity from the query.
// Returns a *NotFoundError when no UpgradeApkUpgradeStrategyGrayStrategy was found.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) First(ctx context.Context) (*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	nodes, err := uausgsq.Limit(1).All(setContextOp(ctx, uausgsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) FirstX(ctx context.Context) *UpgradeApkUpgradeStrategyGrayStrategy {
	node, err := uausgsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpgradeApkUpgradeStrategyGrayStrategy ID from the query.
// Returns a *NotFoundError when no UpgradeApkUpgradeStrategyGrayStrategy ID was found.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uausgsq.Limit(1).IDs(setContextOp(ctx, uausgsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) FirstIDX(ctx context.Context) int {
	id, err := uausgsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpgradeApkUpgradeStrategyGrayStrategy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpgradeApkUpgradeStrategyGrayStrategy entity is found.
// Returns a *NotFoundError when no UpgradeApkUpgradeStrategyGrayStrategy entities are found.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Only(ctx context.Context) (*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	nodes, err := uausgsq.Limit(2).All(setContextOp(ctx, uausgsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
	default:
		return nil, &NotSingularError{upgradeapkupgradestrategygraystrategy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) OnlyX(ctx context.Context) *UpgradeApkUpgradeStrategyGrayStrategy {
	node, err := uausgsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpgradeApkUpgradeStrategyGrayStrategy ID in the query.
// Returns a *NotSingularError when more than one UpgradeApkUpgradeStrategyGrayStrategy ID is found.
// Returns a *NotFoundError when no entities are found.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uausgsq.Limit(2).IDs(setContextOp(ctx, uausgsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upgradeapkupgradestrategygraystrategy.Label}
	default:
		err = &NotSingularError{upgradeapkupgradestrategygraystrategy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) OnlyIDX(ctx context.Context) int {
	id, err := uausgsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpgradeApkUpgradeStrategyGrayStrategies.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) All(ctx context.Context) ([]*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	ctx = setContextOp(ctx, uausgsq.ctx, ent.OpQueryAll)
	if err := uausgsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpgradeApkUpgradeStrategyGrayStrategy, *UpgradeApkUpgradeStrategyGrayStrategyQuery]()
	return withInterceptors[[]*UpgradeApkUpgradeStrategyGrayStrategy](ctx, uausgsq, qr, uausgsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) AllX(ctx context.Context) []*UpgradeApkUpgradeStrategyGrayStrategy {
	nodes, err := uausgsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpgradeApkUpgradeStrategyGrayStrategy IDs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uausgsq.ctx.Unique == nil && uausgsq.path != nil {
		uausgsq.Unique(true)
	}
	ctx = setContextOp(ctx, uausgsq.ctx, ent.OpQueryIDs)
	if err = uausgsq.Select(upgradeapkupgradestrategygraystrategy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) IDsX(ctx context.Context) []int {
	ids, err := uausgsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uausgsq.ctx, ent.OpQueryCount)
	if err := uausgsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uausgsq, querierCount[*UpgradeApkUpgradeStrategyGrayStrategyQuery](), uausgsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) CountX(ctx context.Context) int {
	count, err := uausgsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uausgsq.ctx, ent.OpQueryExist)
	switch _, err := uausgsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) ExistX(ctx context.Context) bool {
	exist, err := uausgsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpgradeApkUpgradeStrategyGrayStrategyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Clone() *UpgradeApkUpgradeStrategyGrayStrategyQuery {
	if uausgsq == nil {
		return nil
	}
	return &UpgradeApkUpgradeStrategyGrayStrategyQuery{
		config:     uausgsq.config,
		ctx:        uausgsq.ctx.Clone(),
		order:      append([]upgradeapkupgradestrategygraystrategy.OrderOption{}, uausgsq.order...),
		inters:     append([]Interceptor{}, uausgsq.inters...),
		predicates: append([]predicate.UpgradeApkUpgradeStrategyGrayStrategy{}, uausgsq.predicates...),
		// clone intermediate query.
		sql:  uausgsq.sql.Clone(),
		path: uausgsq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Enable int32 `json:"enable,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UpgradeApkUpgradeStrategyGrayStrategy.Query().
//		GroupBy(upgradeapkupgradestrategygraystrategy.FieldEnable).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) GroupBy(field string, fields ...string) *UpgradeApkUpgradeStrategyGrayStrategyGroupBy {
	uausgsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UpgradeApkUpgradeStrategyGrayStrategyGroupBy{build: uausgsq}
	grbuild.flds = &uausgsq.ctx.Fields
	grbuild.label = upgradeapkupgradestrategygraystrategy.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Enable int32 `json:"enable,omitempty"`
//	}
//
//	client.UpgradeApkUpgradeStrategyGrayStrategy.Query().
//		Select(upgradeapkupgradestrategygraystrategy.FieldEnable).
//		Scan(ctx, &v)
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Select(fields ...string) *UpgradeApkUpgradeStrategyGrayStrategySelect {
	uausgsq.ctx.Fields = append(uausgsq.ctx.Fields, fields...)
	sbuild := &UpgradeApkUpgradeStrategyGrayStrategySelect{UpgradeApkUpgradeStrategyGrayStrategyQuery: uausgsq}
	sbuild.label = upgradeapkupgradestrategygraystrategy.Label
	sbuild.flds, sbuild.scan = &uausgsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpgradeApkUpgradeStrategyGrayStrategySelect configured with the given aggregations.
func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) Aggregate(fns ...AggregateFunc) *UpgradeApkUpgradeStrategyGrayStrategySelect {
	return uausgsq.Select().Aggregate(fns...)
}

func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uausgsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uausgsq); err != nil {
				return err
			}
		}
	}
	for _, f := range uausgsq.ctx.Fields {
		if !upgradeapkupgradestrategygraystrategy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uausgsq.path != nil {
		prev, err := uausgsq.path(ctx)
		if err != nil {
			return err
		}
		uausgsq.sql = prev
	}
	return nil
}

func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpgradeApkUpgradeStrategyGrayStrategy, error) {
	var (
		nodes = []*UpgradeApkUpgradeStrategyGrayStrategy{}
		_spec = uausgsq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpgradeApkUpgradeStrategyGrayStrategy).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpgradeApkUpgradeStrategyGrayStrategy{config: uausgsq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uausgsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uausgsq.querySpec()
	_spec.Node.Columns = uausgsq.ctx.Fields
	if len(uausgsq.ctx.Fields) > 0 {
		_spec.Unique = uausgsq.ctx.Unique != nil && *uausgsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uausgsq.driver, _spec)
}

func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(upgradeapkupgradestrategygraystrategy.Table, upgradeapkupgradestrategygraystrategy.Columns, sqlgraph.NewFieldSpec(upgradeapkupgradestrategygraystrategy.FieldID, field.TypeInt))
	_spec.From = uausgsq.sql
	if unique := uausgsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uausgsq.path != nil {
		_spec.Unique = true
	}
	if fields := uausgsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upgradeapkupgradestrategygraystrategy.FieldID)
		for i := range fields {
			if fields[i] != upgradeapkupgradestrategygraystrategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uausgsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uausgsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uausgsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uausgsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uausgsq *UpgradeApkUpgradeStrategyGrayStrategyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uausgsq.driver.Dialect())
	t1 := builder.Table(upgradeapkupgradestrategygraystrategy.Table)
	columns := uausgsq.ctx.Fields
	if len(columns) == 0 {
		columns = upgradeapkupgradestrategygraystrategy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uausgsq.sql != nil {
		selector = uausgsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uausgsq.ctx.Unique != nil && *uausgsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uausgsq.predicates {
		p(selector)
	}
	for _, p := range uausgsq.order {
		p(selector)
	}
	if offset := uausgsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uausgsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpgradeApkUpgradeStrategyGrayStrategyGroupBy is the group-by builder for UpgradeApkUpgradeStrategyGrayStrategy entities.
type UpgradeApkUpgradeStrategyGrayStrategyGroupBy struct {
	selector
	build *UpgradeApkUpgradeStrategyGrayStrategyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uausgsgb *UpgradeApkUpgradeStrategyGrayStrategyGroupBy) Aggregate(fns ...AggregateFunc) *UpgradeApkUpgradeStrategyGrayStrategyGroupBy {
	uausgsgb.fns = append(uausgsgb.fns, fns...)
	return uausgsgb
}

// Scan applies the selector query and scans the result into the given value.
func (uausgsgb *UpgradeApkUpgradeStrategyGrayStrategyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uausgsgb.build.ctx, ent.OpQueryGroupBy)
	if err := uausgsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeApkUpgradeStrategyGrayStrategyQuery, *UpgradeApkUpgradeStrategyGrayStrategyGroupBy](ctx, uausgsgb.build, uausgsgb, uausgsgb.build.inters, v)
}

func (uausgsgb *UpgradeApkUpgradeStrategyGrayStrategyGroupBy) sqlScan(ctx context.Context, root *UpgradeApkUpgradeStrategyGrayStrategyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uausgsgb.fns))
	for _, fn := range uausgsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uausgsgb.flds)+len(uausgsgb.fns))
		for _, f := range *uausgsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uausgsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uausgsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpgradeApkUpgradeStrategyGrayStrategySelect is the builder for selecting fields of UpgradeApkUpgradeStrategyGrayStrategy entities.
type UpgradeApkUpgradeStrategyGrayStrategySelect struct {
	*UpgradeApkUpgradeStrategyGrayStrategyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uausgss *UpgradeApkUpgradeStrategyGrayStrategySelect) Aggregate(fns ...AggregateFunc) *UpgradeApkUpgradeStrategyGrayStrategySelect {
	uausgss.fns = append(uausgss.fns, fns...)
	return uausgss
}

// Scan applies the selector query and scans the result into the given value.
func (uausgss *UpgradeApkUpgradeStrategyGrayStrategySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uausgss.ctx, ent.OpQuerySelect)
	if err := uausgss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpgradeApkUpgradeStrategyGrayStrategyQuery, *UpgradeApkUpgradeStrategyGrayStrategySelect](ctx, uausgss.UpgradeApkUpgradeStrategyGrayStrategyQuery, uausgss, uausgss.inters, v)
}

func (uausgss *UpgradeApkUpgradeStrategyGrayStrategySelect) sqlScan(ctx context.Context, root *UpgradeApkUpgradeStrategyGrayStrategyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uausgss.fns))
	for _, fn := range uausgss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uausgss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uausgss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
