// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"upgradelink-admin-core/server/rpc/ent/companysecret"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CompanySecret is the model entity for the CompanySecret schema.
type CompanySecret struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Company ID | 公司ID
	CompanyID uint64 `json:"company_id,omitempty"`
	// access_key | 密钥id
	AccessKey string `json:"access_key,omitempty"`
	// secret_key | 密钥key
	SecretKey    string `json:"secret_key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanySecret) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companysecret.FieldID, companysecret.FieldCompanyID:
			values[i] = new(sql.NullInt64)
		case companysecret.FieldAccessKey, companysecret.FieldSecretKey:
			values[i] = new(sql.NullString)
		case companysecret.FieldCreatedAt, companysecret.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanySecret fields.
func (cs *CompanySecret) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companysecret.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = uint64(value.Int64)
		case companysecret.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cs.CreatedAt = value.Time
			}
		case companysecret.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cs.UpdatedAt = value.Time
			}
		case companysecret.FieldCompanyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field company_id", values[i])
			} else if value.Valid {
				cs.CompanyID = uint64(value.Int64)
			}
		case companysecret.FieldAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key", values[i])
			} else if value.Valid {
				cs.AccessKey = value.String
			}
		case companysecret.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				cs.SecretKey = value.String
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanySecret.
// This includes values selected through modifiers, order, etc.
func (cs *CompanySecret) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// Update returns a builder for updating this CompanySecret.
// Note that you need to call CompanySecret.Unwrap() before calling this method if this CompanySecret
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CompanySecret) Update() *CompanySecretUpdateOne {
	return NewCompanySecretClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CompanySecret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CompanySecret) Unwrap() *CompanySecret {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanySecret is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CompanySecret) String() string {
	var builder strings.Builder
	builder.WriteString("CompanySecret(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("company_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.CompanyID))
	builder.WriteString(", ")
	builder.WriteString("access_key=")
	builder.WriteString(cs.AccessKey)
	builder.WriteString(", ")
	builder.WriteString("secret_key=")
	builder.WriteString(cs.SecretKey)
	builder.WriteByte(')')
	return builder.String()
}

// CompanySecrets is a parsable slice of CompanySecret.
type CompanySecrets []*CompanySecret
