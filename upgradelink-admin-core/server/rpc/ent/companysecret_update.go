// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-core/server/rpc/ent/companysecret"
	"upgradelink-admin-core/server/rpc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanySecretUpdate is the builder for updating CompanySecret entities.
type CompanySecretUpdate struct {
	config
	hooks     []Hook
	mutation  *CompanySecretMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CompanySecretUpdate builder.
func (csu *CompanySecretUpdate) Where(ps ...predicate.CompanySecret) *CompanySecretUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetUpdatedAt sets the "updated_at" field.
func (csu *CompanySecretUpdate) SetUpdatedAt(t time.Time) *CompanySecretUpdate {
	csu.mutation.SetUpdatedAt(t)
	return csu
}

// SetCompanyID sets the "company_id" field.
func (csu *CompanySecretUpdate) SetCompanyID(u uint64) *CompanySecretUpdate {
	csu.mutation.ResetCompanyID()
	csu.mutation.SetCompanyID(u)
	return csu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (csu *CompanySecretUpdate) SetNillableCompanyID(u *uint64) *CompanySecretUpdate {
	if u != nil {
		csu.SetCompanyID(*u)
	}
	return csu
}

// AddCompanyID adds u to the "company_id" field.
func (csu *CompanySecretUpdate) AddCompanyID(u int64) *CompanySecretUpdate {
	csu.mutation.AddCompanyID(u)
	return csu
}

// ClearCompanyID clears the value of the "company_id" field.
func (csu *CompanySecretUpdate) ClearCompanyID() *CompanySecretUpdate {
	csu.mutation.ClearCompanyID()
	return csu
}

// SetAccessKey sets the "access_key" field.
func (csu *CompanySecretUpdate) SetAccessKey(s string) *CompanySecretUpdate {
	csu.mutation.SetAccessKey(s)
	return csu
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (csu *CompanySecretUpdate) SetNillableAccessKey(s *string) *CompanySecretUpdate {
	if s != nil {
		csu.SetAccessKey(*s)
	}
	return csu
}

// SetSecretKey sets the "secret_key" field.
func (csu *CompanySecretUpdate) SetSecretKey(s string) *CompanySecretUpdate {
	csu.mutation.SetSecretKey(s)
	return csu
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (csu *CompanySecretUpdate) SetNillableSecretKey(s *string) *CompanySecretUpdate {
	if s != nil {
		csu.SetSecretKey(*s)
	}
	return csu
}

// Mutation returns the CompanySecretMutation object of the builder.
func (csu *CompanySecretUpdate) Mutation() *CompanySecretMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CompanySecretUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CompanySecretUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CompanySecretUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CompanySecretUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CompanySecretUpdate) defaults() {
	if _, ok := csu.mutation.UpdatedAt(); !ok {
		v := companysecret.UpdateDefaultUpdatedAt()
		csu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csu *CompanySecretUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanySecretUpdate {
	csu.modifiers = append(csu.modifiers, modifiers...)
	return csu
}

func (csu *CompanySecretUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companysecret.Table, companysecret.Columns, sqlgraph.NewFieldSpec(companysecret.FieldID, field.TypeUint64))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.UpdatedAt(); ok {
		_spec.SetField(companysecret.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csu.mutation.CompanyID(); ok {
		_spec.SetField(companysecret.FieldCompanyID, field.TypeUint64, value)
	}
	if value, ok := csu.mutation.AddedCompanyID(); ok {
		_spec.AddField(companysecret.FieldCompanyID, field.TypeUint64, value)
	}
	if csu.mutation.CompanyIDCleared() {
		_spec.ClearField(companysecret.FieldCompanyID, field.TypeUint64)
	}
	if value, ok := csu.mutation.AccessKey(); ok {
		_spec.SetField(companysecret.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := csu.mutation.SecretKey(); ok {
		_spec.SetField(companysecret.FieldSecretKey, field.TypeString, value)
	}
	_spec.AddModifiers(csu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companysecret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CompanySecretUpdateOne is the builder for updating a single CompanySecret entity.
type CompanySecretUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CompanySecretMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (csuo *CompanySecretUpdateOne) SetUpdatedAt(t time.Time) *CompanySecretUpdateOne {
	csuo.mutation.SetUpdatedAt(t)
	return csuo
}

// SetCompanyID sets the "company_id" field.
func (csuo *CompanySecretUpdateOne) SetCompanyID(u uint64) *CompanySecretUpdateOne {
	csuo.mutation.ResetCompanyID()
	csuo.mutation.SetCompanyID(u)
	return csuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (csuo *CompanySecretUpdateOne) SetNillableCompanyID(u *uint64) *CompanySecretUpdateOne {
	if u != nil {
		csuo.SetCompanyID(*u)
	}
	return csuo
}

// AddCompanyID adds u to the "company_id" field.
func (csuo *CompanySecretUpdateOne) AddCompanyID(u int64) *CompanySecretUpdateOne {
	csuo.mutation.AddCompanyID(u)
	return csuo
}

// ClearCompanyID clears the value of the "company_id" field.
func (csuo *CompanySecretUpdateOne) ClearCompanyID() *CompanySecretUpdateOne {
	csuo.mutation.ClearCompanyID()
	return csuo
}

// SetAccessKey sets the "access_key" field.
func (csuo *CompanySecretUpdateOne) SetAccessKey(s string) *CompanySecretUpdateOne {
	csuo.mutation.SetAccessKey(s)
	return csuo
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (csuo *CompanySecretUpdateOne) SetNillableAccessKey(s *string) *CompanySecretUpdateOne {
	if s != nil {
		csuo.SetAccessKey(*s)
	}
	return csuo
}

// SetSecretKey sets the "secret_key" field.
func (csuo *CompanySecretUpdateOne) SetSecretKey(s string) *CompanySecretUpdateOne {
	csuo.mutation.SetSecretKey(s)
	return csuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (csuo *CompanySecretUpdateOne) SetNillableSecretKey(s *string) *CompanySecretUpdateOne {
	if s != nil {
		csuo.SetSecretKey(*s)
	}
	return csuo
}

// Mutation returns the CompanySecretMutation object of the builder.
func (csuo *CompanySecretUpdateOne) Mutation() *CompanySecretMutation {
	return csuo.mutation
}

// Where appends a list predicates to the CompanySecretUpdate builder.
func (csuo *CompanySecretUpdateOne) Where(ps ...predicate.CompanySecret) *CompanySecretUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CompanySecretUpdateOne) Select(field string, fields ...string) *CompanySecretUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CompanySecret entity.
func (csuo *CompanySecretUpdateOne) Save(ctx context.Context) (*CompanySecret, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CompanySecretUpdateOne) SaveX(ctx context.Context) *CompanySecret {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CompanySecretUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CompanySecretUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CompanySecretUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdatedAt(); !ok {
		v := companysecret.UpdateDefaultUpdatedAt()
		csuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csuo *CompanySecretUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CompanySecretUpdateOne {
	csuo.modifiers = append(csuo.modifiers, modifiers...)
	return csuo
}

func (csuo *CompanySecretUpdateOne) sqlSave(ctx context.Context) (_node *CompanySecret, err error) {
	_spec := sqlgraph.NewUpdateSpec(companysecret.Table, companysecret.Columns, sqlgraph.NewFieldSpec(companysecret.FieldID, field.TypeUint64))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanySecret.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companysecret.FieldID)
		for _, f := range fields {
			if !companysecret.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companysecret.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.UpdatedAt(); ok {
		_spec.SetField(companysecret.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.CompanyID(); ok {
		_spec.SetField(companysecret.FieldCompanyID, field.TypeUint64, value)
	}
	if value, ok := csuo.mutation.AddedCompanyID(); ok {
		_spec.AddField(companysecret.FieldCompanyID, field.TypeUint64, value)
	}
	if csuo.mutation.CompanyIDCleared() {
		_spec.ClearField(companysecret.FieldCompanyID, field.TypeUint64)
	}
	if value, ok := csuo.mutation.AccessKey(); ok {
		_spec.SetField(companysecret.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := csuo.mutation.SecretKey(); ok {
		_spec.SetField(companysecret.FieldSecretKey, field.TypeString, value)
	}
	_spec.AddModifiers(csuo.modifiers...)
	_node = &CompanySecret{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companysecret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
