// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"upgradelink-admin-core/server/rpc/ent/companysecret"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanySecretCreate is the builder for creating a CompanySecret entity.
type CompanySecretCreate struct {
	config
	mutation *CompanySecretMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (csc *CompanySecretCreate) SetCreatedAt(t time.Time) *CompanySecretCreate {
	csc.mutation.SetCreatedAt(t)
	return csc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csc *CompanySecretCreate) SetNillableCreatedAt(t *time.Time) *CompanySecretCreate {
	if t != nil {
		csc.SetCreatedAt(*t)
	}
	return csc
}

// SetUpdatedAt sets the "updated_at" field.
func (csc *CompanySecretCreate) SetUpdatedAt(t time.Time) *CompanySecretCreate {
	csc.mutation.SetUpdatedAt(t)
	return csc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (csc *CompanySecretCreate) SetNillableUpdatedAt(t *time.Time) *CompanySecretCreate {
	if t != nil {
		csc.SetUpdatedAt(*t)
	}
	return csc
}

// SetCompanyID sets the "company_id" field.
func (csc *CompanySecretCreate) SetCompanyID(u uint64) *CompanySecretCreate {
	csc.mutation.SetCompanyID(u)
	return csc
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (csc *CompanySecretCreate) SetNillableCompanyID(u *uint64) *CompanySecretCreate {
	if u != nil {
		csc.SetCompanyID(*u)
	}
	return csc
}

// SetAccessKey sets the "access_key" field.
func (csc *CompanySecretCreate) SetAccessKey(s string) *CompanySecretCreate {
	csc.mutation.SetAccessKey(s)
	return csc
}

// SetSecretKey sets the "secret_key" field.
func (csc *CompanySecretCreate) SetSecretKey(s string) *CompanySecretCreate {
	csc.mutation.SetSecretKey(s)
	return csc
}

// SetID sets the "id" field.
func (csc *CompanySecretCreate) SetID(u uint64) *CompanySecretCreate {
	csc.mutation.SetID(u)
	return csc
}

// Mutation returns the CompanySecretMutation object of the builder.
func (csc *CompanySecretCreate) Mutation() *CompanySecretMutation {
	return csc.mutation
}

// Save creates the CompanySecret in the database.
func (csc *CompanySecretCreate) Save(ctx context.Context) (*CompanySecret, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CompanySecretCreate) SaveX(ctx context.Context) *CompanySecret {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CompanySecretCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CompanySecretCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CompanySecretCreate) defaults() {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		v := companysecret.DefaultCreatedAt()
		csc.mutation.SetCreatedAt(v)
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		v := companysecret.DefaultUpdatedAt()
		csc.mutation.SetUpdatedAt(v)
	}
	if _, ok := csc.mutation.CompanyID(); !ok {
		v := companysecret.DefaultCompanyID
		csc.mutation.SetCompanyID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CompanySecretCreate) check() error {
	if _, ok := csc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CompanySecret.created_at"`)}
	}
	if _, ok := csc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CompanySecret.updated_at"`)}
	}
	if _, ok := csc.mutation.AccessKey(); !ok {
		return &ValidationError{Name: "access_key", err: errors.New(`ent: missing required field "CompanySecret.access_key"`)}
	}
	if _, ok := csc.mutation.SecretKey(); !ok {
		return &ValidationError{Name: "secret_key", err: errors.New(`ent: missing required field "CompanySecret.secret_key"`)}
	}
	return nil
}

func (csc *CompanySecretCreate) sqlSave(ctx context.Context) (*CompanySecret, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CompanySecretCreate) createSpec() (*CompanySecret, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanySecret{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(companysecret.Table, sqlgraph.NewFieldSpec(companysecret.FieldID, field.TypeUint64))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.CreatedAt(); ok {
		_spec.SetField(companysecret.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := csc.mutation.UpdatedAt(); ok {
		_spec.SetField(companysecret.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := csc.mutation.CompanyID(); ok {
		_spec.SetField(companysecret.FieldCompanyID, field.TypeUint64, value)
		_node.CompanyID = value
	}
	if value, ok := csc.mutation.AccessKey(); ok {
		_spec.SetField(companysecret.FieldAccessKey, field.TypeString, value)
		_node.AccessKey = value
	}
	if value, ok := csc.mutation.SecretKey(); ok {
		_spec.SetField(companysecret.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = value
	}
	return _node, _spec
}

// CompanySecretCreateBulk is the builder for creating many CompanySecret entities in bulk.
type CompanySecretCreateBulk struct {
	config
	err      error
	builders []*CompanySecretCreate
}

// Save creates the CompanySecret entities in the database.
func (cscb *CompanySecretCreateBulk) Save(ctx context.Context) ([]*CompanySecret, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CompanySecret, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanySecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CompanySecretCreateBulk) SaveX(ctx context.Context) []*CompanySecret {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CompanySecretCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CompanySecretCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
