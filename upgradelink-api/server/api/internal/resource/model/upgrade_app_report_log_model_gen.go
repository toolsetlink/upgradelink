// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeAppReportLogFieldNames          = builder.RawFieldNames(&UpgradeAppReportLog{})
	upgradeAppReportLogRows                = strings.Join(upgradeAppReportLogFieldNames, ",")
	upgradeAppReportLogRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeAppReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeAppReportLogRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeAppReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeAppReportLogModel interface {
		Insert(ctx context.Context, data *UpgradeAppReportLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeAppReportLog, error)
		Update(ctx context.Context, data *UpgradeAppReportLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeAppReportLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeAppReportLog struct {
		Id                  int64     `db:"id"`                    // ID
		CompanyId           int64     `db:"company_id"`            // 公司ID
		EventType           string    `db:"event_type"`            // 事件类型
		AppKey              string    `db:"app_key"`               // 应用Key
		VersionCode         int64     `db:"version_code"`          // 当前应用版本号
		DevModelKey         string    `db:"dev_model_key"`         // 设备机型唯一标识
		DevKey              string    `db:"dev_key"`               // 设备唯一标识
		Timestamp           time.Time `db:"timestamp"`             // 事件发生时间
		LaunchTime          time.Time `db:"launch_time"`           // 应用启动事件-应用启动时间
		Code                int64     `db:"code"`                  // 事件-状态码
		DownloadVersionCode int64     `db:"download_version_code"` // 应用升级-下载事件-应用版本号
		UpgradeVersionCode  int64     `db:"upgrade_version_code"`  // 应用升级-升级事件-应用版本号
		CreateAt            time.Time `db:"create_at"`             // 创建时间
	}
)

func newUpgradeAppReportLogModel(conn sqlx.SqlConn) *defaultUpgradeAppReportLogModel {
	return &defaultUpgradeAppReportLogModel{
		conn:  conn,
		table: "`upgrade_app_report_log`",
	}
}

func (m *defaultUpgradeAppReportLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeAppReportLogModel) FindOne(ctx context.Context, id int64) (*UpgradeAppReportLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeAppReportLogRows, m.table)
	var resp UpgradeAppReportLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeAppReportLogModel) Insert(ctx context.Context, data *UpgradeAppReportLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeAppReportLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.EventType, data.AppKey, data.VersionCode, data.DevModelKey, data.DevKey, data.Timestamp, data.LaunchTime, data.Code, data.DownloadVersionCode, data.UpgradeVersionCode)
	return ret, err
}

func (m *defaultUpgradeAppReportLogModel) Update(ctx context.Context, data *UpgradeAppReportLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeAppReportLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.EventType, data.AppKey, data.VersionCode, data.DevModelKey, data.DevKey, data.Timestamp, data.LaunchTime, data.Code, data.DownloadVersionCode, data.UpgradeVersionCode, data.Id)
	return err
}

func (m *defaultUpgradeAppReportLogModel) tableName() string {
	return m.table
}
