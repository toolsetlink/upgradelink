// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fmsCloudFilesFieldNames          = builder.RawFieldNames(&FmsCloudFiles{})
	fmsCloudFilesRows                = strings.Join(fmsCloudFilesFieldNames, ",")
	fmsCloudFilesRowsExpectAutoSet   = strings.Join(stringx.Remove(fmsCloudFilesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fmsCloudFilesRowsWithPlaceHolder = strings.Join(stringx.Remove(fmsCloudFilesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	fmsCloudFilesModel interface {
		Insert(ctx context.Context, data *FmsCloudFiles) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*FmsCloudFiles, error)
		Update(ctx context.Context, data *FmsCloudFiles) error
		Delete(ctx context.Context, id string) error
	}

	defaultFmsCloudFilesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FmsCloudFiles struct {
		Id                        string        `db:"id"`         // UUID
		CreatedAt                 time.Time     `db:"created_at"` // Create Time | 创建日期
		UpdatedAt                 time.Time     `db:"updated_at"` // Update Time | 修改日期
		State                     int64         `db:"state"`      // State true: normal false: ban | 状态 true 正常 false 禁用
		Name                      string        `db:"name"`       // The file''s name | 文件名
		Url                       string        `db:"url"`        // The file''s url | 文件地址
		Size                      uint64        `db:"size"`       // The file''s size | 文件大小
		FileType                  uint64        `db:"file_type"`  // The file''s type | 文件类型
		UserId                    string        `db:"user_id"`    // The user who upload the file | 上传用户的 ID
		CloudFileStorageProviders sql.NullInt64 `db:"cloud_file_storage_providers"`
	}
)

func newFmsCloudFilesModel(conn sqlx.SqlConn) *defaultFmsCloudFilesModel {
	return &defaultFmsCloudFilesModel{
		conn:  conn,
		table: "`fms_cloud_files`",
	}
}

func (m *defaultFmsCloudFilesModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFmsCloudFilesModel) FindOne(ctx context.Context, id string) (*FmsCloudFiles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fmsCloudFilesRows, m.table)
	var resp FmsCloudFiles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFmsCloudFilesModel) Insert(ctx context.Context, data *FmsCloudFiles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, fmsCloudFilesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.State, data.Name, data.Url, data.Size, data.FileType, data.UserId, data.CloudFileStorageProviders)
	return ret, err
}

func (m *defaultFmsCloudFilesModel) Update(ctx context.Context, data *FmsCloudFiles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fmsCloudFilesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.State, data.Name, data.Url, data.Size, data.FileType, data.UserId, data.CloudFileStorageProviders, data.Id)
	return err
}

func (m *defaultFmsCloudFilesModel) tableName() string {
	return m.table
}
