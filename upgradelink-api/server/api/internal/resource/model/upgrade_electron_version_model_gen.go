// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeElectronVersionFieldNames          = builder.RawFieldNames(&UpgradeElectronVersion{})
	upgradeElectronVersionRows                = strings.Join(upgradeElectronVersionFieldNames, ",")
	upgradeElectronVersionRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeElectronVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeElectronVersionRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeElectronVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeElectronVersionModel interface {
		Insert(ctx context.Context, data *UpgradeElectronVersion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeElectronVersion, error)
		Update(ctx context.Context, data *UpgradeElectronVersion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeElectronVersionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeElectronVersion struct {
		Id                 int64     `db:"id"`                    // ID
		CompanyId          int64     `db:"company_id"`            // 公司ID
		ElectronId         int64     `db:"electron_id"`           // tauri应用ID
		CloudFileId        string    `db:"cloud_file_id"`         // 云文件id
		Sha512             string    `db:"sha512"`                // 生成的sha512
		InstallCloudFileId string    `db:"install_cloud_file_id"` // 云文件id
		InstallSha512      string    `db:"install_sha512"`        // 安装包 生成的sha512
		VersionName        string    `db:"version_name"`          // 版本名
		VersionCode        int64     `db:"version_code"`          // 版本号
		Platform           string    `db:"platform"`              // 操作平台:linux、darwin、windows
		Arch               string    `db:"arch"`                  // 机器架构:x64、arm64
		Description        string    `db:"description"`           // 描述信息
		IsDel              int64     `db:"is_del"`                // 是否删除 0：正常；1：已删除
		CreateAt           time.Time `db:"create_at"`             // 创建时间
		UpdateAt           time.Time `db:"update_at"`             // 修改时间
	}
)

func newUpgradeElectronVersionModel(conn sqlx.SqlConn) *defaultUpgradeElectronVersionModel {
	return &defaultUpgradeElectronVersionModel{
		conn:  conn,
		table: "`upgrade_electron_version`",
	}
}

func (m *defaultUpgradeElectronVersionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeElectronVersionModel) FindOne(ctx context.Context, id int64) (*UpgradeElectronVersion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeElectronVersionRows, m.table)
	var resp UpgradeElectronVersion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeElectronVersionModel) Insert(ctx context.Context, data *UpgradeElectronVersion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeElectronVersionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ElectronId, data.CloudFileId, data.Sha512, data.InstallCloudFileId, data.InstallSha512, data.VersionName, data.VersionCode, data.Platform, data.Arch, data.Description, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeElectronVersionModel) Update(ctx context.Context, data *UpgradeElectronVersion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeElectronVersionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ElectronId, data.CloudFileId, data.Sha512, data.InstallCloudFileId, data.InstallSha512, data.VersionName, data.VersionCode, data.Platform, data.Arch, data.Description, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeElectronVersionModel) tableName() string {
	return m.table
}
