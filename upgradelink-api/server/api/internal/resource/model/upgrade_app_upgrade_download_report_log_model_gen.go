// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeAppUpgradeDownloadReportLogFieldNames          = builder.RawFieldNames(&UpgradeAppUpgradeDownloadReportLog{})
	upgradeAppUpgradeDownloadReportLogRows                = strings.Join(upgradeAppUpgradeDownloadReportLogFieldNames, ",")
	upgradeAppUpgradeDownloadReportLogRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeAppUpgradeDownloadReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeAppUpgradeDownloadReportLogRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeAppUpgradeDownloadReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeAppUpgradeDownloadReportLogModel interface {
		Insert(ctx context.Context, data *UpgradeAppUpgradeDownloadReportLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeAppUpgradeDownloadReportLog, error)
		Update(ctx context.Context, data *UpgradeAppUpgradeDownloadReportLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeAppUpgradeDownloadReportLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeAppUpgradeDownloadReportLog struct {
		Id                  int64     `db:"id"`                     // ID
		CompanyId           int64     `db:"company_id"`             // 公司ID
		Timestamp           time.Time `db:"timestamp"`              // 事件发生时间
		AppKey              string    `db:"app_key"`                // 应用Key
		AppVersionId        int64     `db:"app_version_id"`         // 应用版本ID
		AppVersionCode      int64     `db:"app_version_code"`       // 版本号
		AppVersionTarget    string    `db:"app_version_target"`     // 操作系统:linux、darwin、windows
		AppVersionArch      string    `db:"app_version_arch"`       // 机器架构:x86_64、i686、aarch64、armv7
		DevModelKey         string    `db:"dev_model_key"`          // 设备机型唯一标识
		DevKey              string    `db:"dev_key"`                // 设备唯一标识
		DownloadVersionCode int64     `db:"download_version_code"`  // 下载版本号
		DownloadCloudFileId string    `db:"download_cloud_file_id"` // 云文件id
		Code                int64     `db:"code"`                   // 事件-状态码
		CreateAt            time.Time `db:"create_at"`              // 创建时间
	}
)

func newUpgradeAppUpgradeDownloadReportLogModel(conn sqlx.SqlConn) *defaultUpgradeAppUpgradeDownloadReportLogModel {
	return &defaultUpgradeAppUpgradeDownloadReportLogModel{
		conn:  conn,
		table: "`upgrade_app_upgrade_download_report_log`",
	}
}

func (m *defaultUpgradeAppUpgradeDownloadReportLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeAppUpgradeDownloadReportLogModel) FindOne(ctx context.Context, id int64) (*UpgradeAppUpgradeDownloadReportLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeAppUpgradeDownloadReportLogRows, m.table)
	var resp UpgradeAppUpgradeDownloadReportLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeAppUpgradeDownloadReportLogModel) Insert(ctx context.Context, data *UpgradeAppUpgradeDownloadReportLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeAppUpgradeDownloadReportLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppVersionId, data.AppVersionCode, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.DownloadVersionCode, data.DownloadCloudFileId, data.Code)
	return ret, err
}

func (m *defaultUpgradeAppUpgradeDownloadReportLogModel) Update(ctx context.Context, data *UpgradeAppUpgradeDownloadReportLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeAppUpgradeDownloadReportLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppVersionId, data.AppVersionCode, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.DownloadVersionCode, data.DownloadCloudFileId, data.Code, data.Id)
	return err
}

func (m *defaultUpgradeAppUpgradeDownloadReportLogModel) tableName() string {
	return m.table
}
