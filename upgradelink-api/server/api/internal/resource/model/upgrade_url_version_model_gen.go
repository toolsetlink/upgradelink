// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeUrlVersionFieldNames          = builder.RawFieldNames(&UpgradeUrlVersion{})
	upgradeUrlVersionRows                = strings.Join(upgradeUrlVersionFieldNames, ",")
	upgradeUrlVersionRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeUrlVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeUrlVersionRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeUrlVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeUrlVersionModel interface {
		Insert(ctx context.Context, data *UpgradeUrlVersion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeUrlVersion, error)
		Update(ctx context.Context, data *UpgradeUrlVersion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeUrlVersionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeUrlVersion struct {
		Id          int64     `db:"id"`           // ID
		CompanyId   int64     `db:"company_id"`   // 公司ID
		UrlId       int64     `db:"url_id"`       // url应用ID
		UrlPath     string    `db:"url_path"`     // url链接
		VersionName string    `db:"version_name"` // 版本名
		VersionCode int64     `db:"version_code"` // 版本号
		Description string    `db:"description"`  // 描述信息
		IsDel       int64     `db:"is_del"`       // 是否删除 0：正常；1：已删除
		CreateAt    time.Time `db:"create_at"`    // 创建时间
		UpdateAt    time.Time `db:"update_at"`    // 修改时间
	}
)

func newUpgradeUrlVersionModel(conn sqlx.SqlConn) *defaultUpgradeUrlVersionModel {
	return &defaultUpgradeUrlVersionModel{
		conn:  conn,
		table: "`upgrade_url_version`",
	}
}

func (m *defaultUpgradeUrlVersionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeUrlVersionModel) FindOne(ctx context.Context, id int64) (*UpgradeUrlVersion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeUrlVersionRows, m.table)
	var resp UpgradeUrlVersion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeUrlVersionModel) Insert(ctx context.Context, data *UpgradeUrlVersion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, upgradeUrlVersionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.UrlId, data.UrlPath, data.VersionName, data.VersionCode, data.Description, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeUrlVersionModel) Update(ctx context.Context, data *UpgradeUrlVersion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeUrlVersionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.UrlId, data.UrlPath, data.VersionName, data.VersionCode, data.Description, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeUrlVersionModel) tableName() string {
	return m.table
}
