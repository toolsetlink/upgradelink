// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeAppStartReportLogFieldNames          = builder.RawFieldNames(&UpgradeAppStartReportLog{})
	upgradeAppStartReportLogRows                = strings.Join(upgradeAppStartReportLogFieldNames, ",")
	upgradeAppStartReportLogRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeAppStartReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeAppStartReportLogRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeAppStartReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeAppStartReportLogModel interface {
		Insert(ctx context.Context, data *UpgradeAppStartReportLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeAppStartReportLog, error)
		Update(ctx context.Context, data *UpgradeAppStartReportLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeAppStartReportLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeAppStartReportLog struct {
		Id               int64     `db:"id"`                 // ID
		CompanyId        int64     `db:"company_id"`         // 公司ID
		Timestamp        time.Time `db:"timestamp"`          // 事件发生时间
		AppKey           string    `db:"app_key"`            // 应用Key
		AppType          string    `db:"app_type"`           // 应用类型 url,file,tauri,apk,configuration
		AppVersionId     int64     `db:"app_version_id"`     // 应用版本ID
		AppVersionCode   int64     `db:"app_version_code"`   // 版本号
		AppVersionTarget string    `db:"app_version_target"` // 操作系统:linux、darwin、windows
		AppVersionArch   string    `db:"app_version_arch"`   // 机器架构:x86_64、i686、aarch64、armv7
		DevModelKey      string    `db:"dev_model_key"`      // 设备机型唯一标识
		DevKey           string    `db:"dev_key"`            // 设备唯一标识
		LaunchTime       time.Time `db:"launch_time"`        // 应用启动事件-应用启动时间
		CreateAt         time.Time `db:"create_at"`          // 创建时间
	}
)

func newUpgradeAppStartReportLogModel(conn sqlx.SqlConn) *defaultUpgradeAppStartReportLogModel {
	return &defaultUpgradeAppStartReportLogModel{
		conn:  conn,
		table: "`upgrade_app_start_report_log`",
	}
}

func (m *defaultUpgradeAppStartReportLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeAppStartReportLogModel) FindOne(ctx context.Context, id int64) (*UpgradeAppStartReportLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeAppStartReportLogRows, m.table)
	var resp UpgradeAppStartReportLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeAppStartReportLogModel) Insert(ctx context.Context, data *UpgradeAppStartReportLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeAppStartReportLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppType, data.AppVersionId, data.AppVersionCode, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.LaunchTime)
	return ret, err
}

func (m *defaultUpgradeAppStartReportLogModel) Update(ctx context.Context, data *UpgradeAppStartReportLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeAppStartReportLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppType, data.AppVersionId, data.AppVersionCode, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.LaunchTime, data.Id)
	return err
}

func (m *defaultUpgradeAppStartReportLogModel) tableName() string {
	return m.table
}
