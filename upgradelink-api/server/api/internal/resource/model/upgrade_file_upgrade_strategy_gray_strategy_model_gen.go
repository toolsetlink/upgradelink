// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeFileUpgradeStrategyGrayStrategyFieldNames          = builder.RawFieldNames(&UpgradeFileUpgradeStrategyGrayStrategy{})
	upgradeFileUpgradeStrategyGrayStrategyRows                = strings.Join(upgradeFileUpgradeStrategyGrayStrategyFieldNames, ",")
	upgradeFileUpgradeStrategyGrayStrategyRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeFileUpgradeStrategyGrayStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeFileUpgradeStrategyGrayStrategyRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeFileUpgradeStrategyGrayStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeFileUpgradeStrategyGrayStrategyModel interface {
		Insert(ctx context.Context, data *UpgradeFileUpgradeStrategyGrayStrategy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeFileUpgradeStrategyGrayStrategy, error)
		Update(ctx context.Context, data *UpgradeFileUpgradeStrategyGrayStrategy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeFileUpgradeStrategyGrayStrategyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeFileUpgradeStrategyGrayStrategy struct {
		Id            int64     `db:"id"`             // ID
		Enable        int64     `db:"enable"`         // 是否生效；可通过此控制策略是否生效0：失效；1：生效
		BeginDatetime time.Time `db:"begin_datetime"` // 开始时间
		EndDatetime   time.Time `db:"end_datetime"`   // 结束时间
		Limit         int64     `db:"limit"`          // 数量限制
		IsDel         int64     `db:"is_del"`         // 是否删除 0：正常；1：已删除
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 修改时间
	}
)

func newUpgradeFileUpgradeStrategyGrayStrategyModel(conn sqlx.SqlConn) *defaultUpgradeFileUpgradeStrategyGrayStrategyModel {
	return &defaultUpgradeFileUpgradeStrategyGrayStrategyModel{
		conn:  conn,
		table: "`upgrade_file_upgrade_strategy_gray_strategy`",
	}
}

func (m *defaultUpgradeFileUpgradeStrategyGrayStrategyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeFileUpgradeStrategyGrayStrategyModel) FindOne(ctx context.Context, id int64) (*UpgradeFileUpgradeStrategyGrayStrategy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeFileUpgradeStrategyGrayStrategyRows, m.table)
	var resp UpgradeFileUpgradeStrategyGrayStrategy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeFileUpgradeStrategyGrayStrategyModel) Insert(ctx context.Context, data *UpgradeFileUpgradeStrategyGrayStrategy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, upgradeFileUpgradeStrategyGrayStrategyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Enable, data.BeginDatetime, data.EndDatetime, data.Limit, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeFileUpgradeStrategyGrayStrategyModel) Update(ctx context.Context, data *UpgradeFileUpgradeStrategyGrayStrategy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeFileUpgradeStrategyGrayStrategyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Enable, data.BeginDatetime, data.EndDatetime, data.Limit, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeFileUpgradeStrategyGrayStrategyModel) tableName() string {
	return m.table
}
