// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysCompanysFieldNames          = builder.RawFieldNames(&SysCompanys{})
	sysCompanysRows                = strings.Join(sysCompanysFieldNames, ",")
	sysCompanysRowsExpectAutoSet   = strings.Join(stringx.Remove(sysCompanysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysCompanysRowsWithPlaceHolder = strings.Join(stringx.Remove(sysCompanysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysCompanysModel interface {
		Insert(ctx context.Context, data *SysCompanys) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysCompanys, error)
		Update(ctx context.Context, data *SysCompanys) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysCompanysModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysCompanys struct {
		Id        int64     `db:"id"`         // ID
		CreatedAt time.Time `db:"created_at"` // Create Time | 创建日期
		UpdatedAt time.Time `db:"updated_at"` // Update Time | 修改日期
		Name      string    `db:"name"`       // 公司名称
	}
)

func newSysCompanysModel(conn sqlx.SqlConn) *defaultSysCompanysModel {
	return &defaultSysCompanysModel{
		conn:  conn,
		table: "`sys_companys`",
	}
}

func (m *defaultSysCompanysModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysCompanysModel) FindOne(ctx context.Context, id int64) (*SysCompanys, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysCompanysRows, m.table)
	var resp SysCompanys
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysCompanysModel) Insert(ctx context.Context, data *SysCompanys) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, sysCompanysRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name)
	return ret, err
}

func (m *defaultSysCompanysModel) Update(ctx context.Context, data *SysCompanys) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysCompanysRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Id)
	return err
}

func (m *defaultSysCompanysModel) tableName() string {
	return m.table
}
