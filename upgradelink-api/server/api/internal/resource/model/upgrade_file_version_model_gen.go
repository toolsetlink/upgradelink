// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeFileVersionFieldNames          = builder.RawFieldNames(&UpgradeFileVersion{})
	upgradeFileVersionRows                = strings.Join(upgradeFileVersionFieldNames, ",")
	upgradeFileVersionRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeFileVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeFileVersionRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeFileVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeFileVersionModel interface {
		Insert(ctx context.Context, data *UpgradeFileVersion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeFileVersion, error)
		Update(ctx context.Context, data *UpgradeFileVersion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeFileVersionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeFileVersion struct {
		Id          int64     `db:"id"`            // ID
		CompanyId   int64     `db:"company_id"`    // 公司ID
		FileId      int64     `db:"file_id"`       // 文件应用ID
		CloudFileId string    `db:"cloud_file_id"` // 云文件id
		VersionName string    `db:"version_name"`  // 版本名
		VersionCode int64     `db:"version_code"`  // 版本号
		Description string    `db:"description"`   // 描述信息
		IsDel       int64     `db:"is_del"`        // 是否删除 0：正常；1：已删除
		CreateAt    time.Time `db:"create_at"`     // 创建时间
		UpdateAt    time.Time `db:"update_at"`     // 修改时间
	}
)

func newUpgradeFileVersionModel(conn sqlx.SqlConn) *defaultUpgradeFileVersionModel {
	return &defaultUpgradeFileVersionModel{
		conn:  conn,
		table: "`upgrade_file_version`",
	}
}

func (m *defaultUpgradeFileVersionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeFileVersionModel) FindOne(ctx context.Context, id int64) (*UpgradeFileVersion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeFileVersionRows, m.table)
	var resp UpgradeFileVersion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeFileVersionModel) Insert(ctx context.Context, data *UpgradeFileVersion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, upgradeFileVersionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.FileId, data.CloudFileId, data.VersionName, data.VersionCode, data.Description, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeFileVersionModel) Update(ctx context.Context, data *UpgradeFileVersion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeFileVersionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.FileId, data.CloudFileId, data.VersionName, data.VersionCode, data.Description, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeFileVersionModel) tableName() string {
	return m.table
}
