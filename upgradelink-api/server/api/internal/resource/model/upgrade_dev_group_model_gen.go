// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeDevGroupFieldNames          = builder.RawFieldNames(&UpgradeDevGroup{})
	upgradeDevGroupRows                = strings.Join(upgradeDevGroupFieldNames, ",")
	upgradeDevGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeDevGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeDevGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeDevGroupFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeDevGroupModel interface {
		Insert(ctx context.Context, data *UpgradeDevGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeDevGroup, error)
		Update(ctx context.Context, data *UpgradeDevGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeDevGroupModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeDevGroup struct {
		Id        int64     `db:"id"`         // ID
		CompanyId int64     `db:"company_id"` // 公司ID
		Name      string    `db:"name"`       // 设备分组名称
		IsDel     int64     `db:"is_del"`     // 是否删除 0：正常；1：已删除
		CreateAt  time.Time `db:"create_at"`  // 创建时间
		UpdateAt  time.Time `db:"update_at"`  // 修改时间
	}
)

func newUpgradeDevGroupModel(conn sqlx.SqlConn) *defaultUpgradeDevGroupModel {
	return &defaultUpgradeDevGroupModel{
		conn:  conn,
		table: "`upgrade_dev_group`",
	}
}

func (m *defaultUpgradeDevGroupModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeDevGroupModel) FindOne(ctx context.Context, id int64) (*UpgradeDevGroup, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeDevGroupRows, m.table)
	var resp UpgradeDevGroup
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeDevGroupModel) Insert(ctx context.Context, data *UpgradeDevGroup) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, upgradeDevGroupRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Name, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeDevGroupModel) Update(ctx context.Context, data *UpgradeDevGroup) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeDevGroupRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Name, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeDevGroupModel) tableName() string {
	return m.table
}
