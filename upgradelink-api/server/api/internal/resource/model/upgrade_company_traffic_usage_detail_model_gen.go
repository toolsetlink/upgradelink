// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeCompanyTrafficUsageDetailFieldNames          = builder.RawFieldNames(&UpgradeCompanyTrafficUsageDetail{})
	upgradeCompanyTrafficUsageDetailRows                = strings.Join(upgradeCompanyTrafficUsageDetailFieldNames, ",")
	upgradeCompanyTrafficUsageDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeCompanyTrafficUsageDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeCompanyTrafficUsageDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeCompanyTrafficUsageDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeCompanyTrafficUsageDetailModel interface {
		Insert(ctx context.Context, data *UpgradeCompanyTrafficUsageDetail) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UpgradeCompanyTrafficUsageDetail, error)
		Update(ctx context.Context, data *UpgradeCompanyTrafficUsageDetail) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUpgradeCompanyTrafficUsageDetailModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeCompanyTrafficUsageDetail struct {
		Id                     uint64    `db:"id"`                        // 记录ID
		CompanyId              int64     `db:"company_id"`                // 公司ID
		AppDownloadReportId    int64     `db:"app_download_report_id"`    // 下载记录ID
		CompanyTrafficPacketId int64     `db:"company_traffic_packet_id"` // 流量包记录ID
		UsedSize               int64     `db:"used_size"`                 // 使用流量(字节)
		UsedTime               time.Time `db:"used_time"`                 // 使用时间
		CreateAt               time.Time `db:"create_at"`                 // 创建时间
		UpdateAt               time.Time `db:"update_at"`                 // 修改时间
	}
)

func newUpgradeCompanyTrafficUsageDetailModel(conn sqlx.SqlConn) *defaultUpgradeCompanyTrafficUsageDetailModel {
	return &defaultUpgradeCompanyTrafficUsageDetailModel{
		conn:  conn,
		table: "`upgrade_company_traffic_usage_detail`",
	}
}

func (m *defaultUpgradeCompanyTrafficUsageDetailModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeCompanyTrafficUsageDetailModel) FindOne(ctx context.Context, id uint64) (*UpgradeCompanyTrafficUsageDetail, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeCompanyTrafficUsageDetailRows, m.table)
	var resp UpgradeCompanyTrafficUsageDetail
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeCompanyTrafficUsageDetailModel) Insert(ctx context.Context, data *UpgradeCompanyTrafficUsageDetail) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, upgradeCompanyTrafficUsageDetailRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.AppDownloadReportId, data.CompanyTrafficPacketId, data.UsedSize, data.UsedTime)
	return ret, err
}

func (m *defaultUpgradeCompanyTrafficUsageDetailModel) Update(ctx context.Context, data *UpgradeCompanyTrafficUsageDetail) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeCompanyTrafficUsageDetailRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.AppDownloadReportId, data.CompanyTrafficPacketId, data.UsedSize, data.UsedTime, data.Id)
	return err
}

func (m *defaultUpgradeCompanyTrafficUsageDetailModel) tableName() string {
	return m.table
}
