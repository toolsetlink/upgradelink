// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeCompanyTrafficPacketFieldNames          = builder.RawFieldNames(&UpgradeCompanyTrafficPacket{})
	upgradeCompanyTrafficPacketRows                = strings.Join(upgradeCompanyTrafficPacketFieldNames, ",")
	upgradeCompanyTrafficPacketRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeCompanyTrafficPacketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeCompanyTrafficPacketRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeCompanyTrafficPacketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeCompanyTrafficPacketModel interface {
		Insert(ctx context.Context, data *UpgradeCompanyTrafficPacket) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UpgradeCompanyTrafficPacket, error)
		Update(ctx context.Context, data *UpgradeCompanyTrafficPacket) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUpgradeCompanyTrafficPacketModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeCompanyTrafficPacket struct {
		Id            uint64    `db:"id"`             // 记录ID
		CompanyId     int64     `db:"company_id"`     // 公司ID
		PacketId      int64     `db:"packet_id"`      // 流量包ID
		StartTime     time.Time `db:"start_time"`     // 开始时间
		EndTime       time.Time `db:"end_time"`       // 结束时间
		InitialSize   int64     `db:"initial_size"`   // 初始流量大小(字节)
		RemainingSize int64     `db:"remaining_size"` // 剩余流量大小(字节)
		Status        int64     `db:"status"`         // 状态: 1=有效, 0=已过期, 2=已用完
		ExchangeTime  time.Time `db:"exchange_time"`  // 兑换流量包时间
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 修改时间
	}
)

func newUpgradeCompanyTrafficPacketModel(conn sqlx.SqlConn) *defaultUpgradeCompanyTrafficPacketModel {
	return &defaultUpgradeCompanyTrafficPacketModel{
		conn:  conn,
		table: "`upgrade_company_traffic_packet`",
	}
}

func (m *defaultUpgradeCompanyTrafficPacketModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeCompanyTrafficPacketModel) FindOne(ctx context.Context, id uint64) (*UpgradeCompanyTrafficPacket, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeCompanyTrafficPacketRows, m.table)
	var resp UpgradeCompanyTrafficPacket
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeCompanyTrafficPacketModel) Insert(ctx context.Context, data *UpgradeCompanyTrafficPacket) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeCompanyTrafficPacketRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.PacketId, data.StartTime, data.EndTime, data.InitialSize, data.RemainingSize, data.Status, data.ExchangeTime)
	return ret, err
}

func (m *defaultUpgradeCompanyTrafficPacketModel) Update(ctx context.Context, data *UpgradeCompanyTrafficPacket) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeCompanyTrafficPacketRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.PacketId, data.StartTime, data.EndTime, data.InitialSize, data.RemainingSize, data.Status, data.ExchangeTime, data.Id)
	return err
}

func (m *defaultUpgradeCompanyTrafficPacketModel) tableName() string {
	return m.table
}
