// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeApkUpgradeStrategyFlowLimitStrategyFieldNames          = builder.RawFieldNames(&UpgradeApkUpgradeStrategyFlowLimitStrategy{})
	upgradeApkUpgradeStrategyFlowLimitStrategyRows                = strings.Join(upgradeApkUpgradeStrategyFlowLimitStrategyFieldNames, ",")
	upgradeApkUpgradeStrategyFlowLimitStrategyRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeApkUpgradeStrategyFlowLimitStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeApkUpgradeStrategyFlowLimitStrategyRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeApkUpgradeStrategyFlowLimitStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeApkUpgradeStrategyFlowLimitStrategyModel interface {
		Insert(ctx context.Context, data *UpgradeApkUpgradeStrategyFlowLimitStrategy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeApkUpgradeStrategyFlowLimitStrategy, error)
		Update(ctx context.Context, data *UpgradeApkUpgradeStrategyFlowLimitStrategy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeApkUpgradeStrategyFlowLimitStrategy struct {
		Id        int64     `db:"id"`         // ID
		Enable    int64     `db:"enable"`     // 是否生效；可通过此控制策略是否生效0：失效；1：生效
		BeginTime string    `db:"begin_time"` // 开始时间段: 时分秒
		EndTime   string    `db:"end_time"`   // 结束时间段: 时分秒
		Dimension int64     `db:"dimension"`  // 流控维度；流控维度：1：秒；2：分；3：时；4：天
		Limit     int64     `db:"limit"`      // 频控限制；在流控维度上的次数
		IsDel     int64     `db:"is_del"`     // 是否删除 0：正常；1：已删除
		CreateAt  time.Time `db:"create_at"`  // 创建时间
		UpdateAt  time.Time `db:"update_at"`  // 修改时间
	}
)

func newUpgradeApkUpgradeStrategyFlowLimitStrategyModel(conn sqlx.SqlConn) *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel {
	return &defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel{
		conn:  conn,
		table: "`upgrade_apk_upgrade_strategy_flow_limit_strategy`",
	}
}

func (m *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel) FindOne(ctx context.Context, id int64) (*UpgradeApkUpgradeStrategyFlowLimitStrategy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeApkUpgradeStrategyFlowLimitStrategyRows, m.table)
	var resp UpgradeApkUpgradeStrategyFlowLimitStrategy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel) Insert(ctx context.Context, data *UpgradeApkUpgradeStrategyFlowLimitStrategy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, upgradeApkUpgradeStrategyFlowLimitStrategyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Enable, data.BeginTime, data.EndTime, data.Dimension, data.Limit, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel) Update(ctx context.Context, data *UpgradeApkUpgradeStrategyFlowLimitStrategy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeApkUpgradeStrategyFlowLimitStrategyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Enable, data.BeginTime, data.EndTime, data.Dimension, data.Limit, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeApkUpgradeStrategyFlowLimitStrategyModel) tableName() string {
	return m.table
}
