// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeAppUpgradeUpgradeReportLogFieldNames          = builder.RawFieldNames(&UpgradeAppUpgradeUpgradeReportLog{})
	upgradeAppUpgradeUpgradeReportLogRows                = strings.Join(upgradeAppUpgradeUpgradeReportLogFieldNames, ",")
	upgradeAppUpgradeUpgradeReportLogRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeAppUpgradeUpgradeReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeAppUpgradeUpgradeReportLogRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeAppUpgradeUpgradeReportLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeAppUpgradeUpgradeReportLogModel interface {
		Insert(ctx context.Context, data *UpgradeAppUpgradeUpgradeReportLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeAppUpgradeUpgradeReportLog, error)
		Update(ctx context.Context, data *UpgradeAppUpgradeUpgradeReportLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeAppUpgradeUpgradeReportLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeAppUpgradeUpgradeReportLog struct {
		Id                 int64     `db:"id"`                   // ID
		CompanyId          int64     `db:"company_id"`           // 公司ID
		Timestamp          time.Time `db:"timestamp"`            // 事件发生时间
		AppKey             string    `db:"app_key"`              // 应用Key
		AppType            string    `db:"app_type"`             // 应用类型 url,file,tauri,apk,configuration
		AppVersionId       int64     `db:"app_version_id"`       // 应用版本ID
		AppVersionCode     int64     `db:"app_version_code"`     // 版本号
		AppVersionPlatform string    `db:"app_version_platform"` // 操作系统:linux、darwin、windows
		AppVersionTarget   string    `db:"app_version_target"`   // 操作系统:linux、darwin、windows
		AppVersionArch     string    `db:"app_version_arch"`     // 机器架构:x86_64、i686、aarch64、armv7
		DevModelKey        string    `db:"dev_model_key"`        // 设备机型唯一标识
		DevKey             string    `db:"dev_key"`              // 设备唯一标识
		UpgradeVersionCode int64     `db:"upgrade_version_code"` // 升级应用版本号
		Code               int64     `db:"code"`                 // 事件-状态码
		CreateAt           time.Time `db:"create_at"`            // 创建时间
	}
)

func newUpgradeAppUpgradeUpgradeReportLogModel(conn sqlx.SqlConn) *defaultUpgradeAppUpgradeUpgradeReportLogModel {
	return &defaultUpgradeAppUpgradeUpgradeReportLogModel{
		conn:  conn,
		table: "`upgrade_app_upgrade_upgrade_report_log`",
	}
}

func (m *defaultUpgradeAppUpgradeUpgradeReportLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeAppUpgradeUpgradeReportLogModel) FindOne(ctx context.Context, id int64) (*UpgradeAppUpgradeUpgradeReportLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeAppUpgradeUpgradeReportLogRows, m.table)
	var resp UpgradeAppUpgradeUpgradeReportLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeAppUpgradeUpgradeReportLogModel) Insert(ctx context.Context, data *UpgradeAppUpgradeUpgradeReportLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeAppUpgradeUpgradeReportLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppType, data.AppVersionId, data.AppVersionCode, data.AppVersionPlatform, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.UpgradeVersionCode, data.Code)
	return ret, err
}

func (m *defaultUpgradeAppUpgradeUpgradeReportLogModel) Update(ctx context.Context, data *UpgradeAppUpgradeUpgradeReportLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeAppUpgradeUpgradeReportLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Timestamp, data.AppKey, data.AppType, data.AppVersionId, data.AppVersionCode, data.AppVersionPlatform, data.AppVersionTarget, data.AppVersionArch, data.DevModelKey, data.DevKey, data.UpgradeVersionCode, data.Code, data.Id)
	return err
}

func (m *defaultUpgradeAppUpgradeUpgradeReportLogModel) tableName() string {
	return m.table
}
