// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeConfigurationVersionFieldNames          = builder.RawFieldNames(&UpgradeConfigurationVersion{})
	upgradeConfigurationVersionRows                = strings.Join(upgradeConfigurationVersionFieldNames, ",")
	upgradeConfigurationVersionRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeConfigurationVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeConfigurationVersionRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeConfigurationVersionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeConfigurationVersionModel interface {
		Insert(ctx context.Context, data *UpgradeConfigurationVersion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeConfigurationVersion, error)
		Update(ctx context.Context, data *UpgradeConfigurationVersion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeConfigurationVersionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeConfigurationVersion struct {
		Id              int64     `db:"id"`               // ID
		CompanyId       int64     `db:"company_id"`       // 公司ID
		ConfigurationId int64     `db:"configuration_id"` // 配置ID
		Content         string    `db:"content"`          // 内容
		VersionName     string    `db:"version_name"`     // 版本名
		VersionCode     int64     `db:"version_code"`     // 版本号
		Description     string    `db:"description"`      // 描述信息
		IsDel           int64     `db:"is_del"`           // 是否删除 0：正常；1：已删除
		CreateAt        time.Time `db:"create_at"`        // 创建时间
		UpdateAt        time.Time `db:"update_at"`        // 修改时间
	}
)

func newUpgradeConfigurationVersionModel(conn sqlx.SqlConn) *defaultUpgradeConfigurationVersionModel {
	return &defaultUpgradeConfigurationVersionModel{
		conn:  conn,
		table: "`upgrade_configuration_version`",
	}
}

func (m *defaultUpgradeConfigurationVersionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeConfigurationVersionModel) FindOne(ctx context.Context, id int64) (*UpgradeConfigurationVersion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeConfigurationVersionRows, m.table)
	var resp UpgradeConfigurationVersion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeConfigurationVersionModel) Insert(ctx context.Context, data *UpgradeConfigurationVersion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, upgradeConfigurationVersionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ConfigurationId, data.Content, data.VersionName, data.VersionCode, data.Description, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeConfigurationVersionModel) Update(ctx context.Context, data *UpgradeConfigurationVersion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeConfigurationVersionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.ConfigurationId, data.Content, data.VersionName, data.VersionCode, data.Description, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeConfigurationVersionModel) tableName() string {
	return m.table
}
