// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeUrlUpgradeStrategyFieldNames          = builder.RawFieldNames(&UpgradeUrlUpgradeStrategy{})
	upgradeUrlUpgradeStrategyRows                = strings.Join(upgradeUrlUpgradeStrategyFieldNames, ",")
	upgradeUrlUpgradeStrategyRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeUrlUpgradeStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeUrlUpgradeStrategyRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeUrlUpgradeStrategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeUrlUpgradeStrategyModel interface {
		Insert(ctx context.Context, data *UpgradeUrlUpgradeStrategy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeUrlUpgradeStrategy, error)
		Update(ctx context.Context, data *UpgradeUrlUpgradeStrategy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeUrlUpgradeStrategyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeUrlUpgradeStrategy struct {
		Id                   int64     `db:"id"`                     // ID
		CompanyId            int64     `db:"company_id"`             // 公司ID
		Enable               int64     `db:"enable"`                 // 是否生效；可通过此控制策略是否生效0：失效；1：生效
		Name                 string    `db:"name"`                   // 任务名称
		Description          string    `db:"description"`            // 任务描述信息
		UrlId                int64     `db:"url_id"`                 // url应用ID
		UrlVersionId         int64     `db:"url_version_id"`         // url_version_id; 外键url_version.id
		BeginDatetime        time.Time `db:"begin_datetime"`         // 升级任务开始时间
		EndDatetime          time.Time `db:"end_datetime"`           // 升级任务结束时间
		UpgradeType          int64     `db:"upgrade_type"`           // 升级方式：0：未知方式；1：提示升级；2：静默升级；3: 强制升级
		PromptUpgradeContent string    `db:"prompt_upgrade_content"` // 提示升级描述内容
		UpgradeDevType       int64     `db:"upgrade_dev_type"`       // 指定升级的设备范围：0：全部设备；1：指定设备分组；2：指定机型
		UpgradeDevData       string    `db:"upgrade_dev_data"`       // 升级设备数据：0.当为全部设备时，此字段为空；；1.当指定设备分组时，此字段存储设备分组id；2.当指定设备机型时，此字段存储选中的设备机型id;
		UpgradeVersionType   int64     `db:"upgrade_version_type"`   // 指定升级的应用版本：0：全部版本；1：指定版本
		UpgradeVersionData   string    `db:"upgrade_version_data"`   // 升级设备数据：0.当为全部版本时，此字段为空；；1.当指定应用版本时，此字段存储应用版本id;
		IsGray               int64     `db:"is_gray"`                // 是否开启灰度 0：不开启；1：开启
		GrayData             string    `db:"gray_data"`              // 灰度策略id数据
		IsFlowLimit          int64     `db:"is_flow_limit"`          // 是否开启频控 0：不开启；1：开启
		FlowLimitData        string    `db:"flow_limit_data"`        // 频控策略id数据
		IsDel                int64     `db:"is_del"`                 // 是否删除 0：正常；1：已删除
		CreateAt             time.Time `db:"create_at"`              // 创建时间
		UpdateAt             time.Time `db:"update_at"`              // 修改时间
	}
)

func newUpgradeUrlUpgradeStrategyModel(conn sqlx.SqlConn) *defaultUpgradeUrlUpgradeStrategyModel {
	return &defaultUpgradeUrlUpgradeStrategyModel{
		conn:  conn,
		table: "`upgrade_url_upgrade_strategy`",
	}
}

func (m *defaultUpgradeUrlUpgradeStrategyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeUrlUpgradeStrategyModel) FindOne(ctx context.Context, id int64) (*UpgradeUrlUpgradeStrategy, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeUrlUpgradeStrategyRows, m.table)
	var resp UpgradeUrlUpgradeStrategy
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeUrlUpgradeStrategyModel) Insert(ctx context.Context, data *UpgradeUrlUpgradeStrategy) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, upgradeUrlUpgradeStrategyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Enable, data.Name, data.Description, data.UrlId, data.UrlVersionId, data.BeginDatetime, data.EndDatetime, data.UpgradeType, data.PromptUpgradeContent, data.UpgradeDevType, data.UpgradeDevData, data.UpgradeVersionType, data.UpgradeVersionData, data.IsGray, data.GrayData, data.IsFlowLimit, data.FlowLimitData, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeUrlUpgradeStrategyModel) Update(ctx context.Context, data *UpgradeUrlUpgradeStrategy) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeUrlUpgradeStrategyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Enable, data.Name, data.Description, data.UrlId, data.UrlVersionId, data.BeginDatetime, data.EndDatetime, data.UpgradeType, data.PromptUpgradeContent, data.UpgradeDevType, data.UpgradeDevData, data.UpgradeVersionType, data.UpgradeVersionData, data.IsGray, data.GrayData, data.IsFlowLimit, data.FlowLimitData, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeUrlUpgradeStrategyModel) tableName() string {
	return m.table
}
