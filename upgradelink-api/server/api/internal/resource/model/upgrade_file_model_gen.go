// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upgradeFileFieldNames          = builder.RawFieldNames(&UpgradeFile{})
	upgradeFileRows                = strings.Join(upgradeFileFieldNames, ",")
	upgradeFileRowsExpectAutoSet   = strings.Join(stringx.Remove(upgradeFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upgradeFileRowsWithPlaceHolder = strings.Join(stringx.Remove(upgradeFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upgradeFileModel interface {
		Insert(ctx context.Context, data *UpgradeFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpgradeFile, error)
		Update(ctx context.Context, data *UpgradeFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUpgradeFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpgradeFile struct {
		Id          int64     `db:"id"`          // ID
		CompanyId   int64     `db:"company_id"`  // 公司ID
		Key         string    `db:"key"`         // 文件应用唯一标识
		Name        string    `db:"name"`        // 文件应用名称
		Description string    `db:"description"` // 描述信息
		IsDel       int64     `db:"is_del"`      // 是否删除 0：正常；1：已删除
		CreateAt    time.Time `db:"create_at"`   // 创建时间
		UpdateAt    time.Time `db:"update_at"`   // 修改时间
	}
)

func newUpgradeFileModel(conn sqlx.SqlConn) *defaultUpgradeFileModel {
	return &defaultUpgradeFileModel{
		conn:  conn,
		table: "`upgrade_file`",
	}
}

func (m *defaultUpgradeFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpgradeFileModel) FindOne(ctx context.Context, id int64) (*UpgradeFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upgradeFileRows, m.table)
	var resp UpgradeFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpgradeFileModel) Insert(ctx context.Context, data *UpgradeFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, upgradeFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Key, data.Name, data.Description, data.IsDel)
	return ret, err
}

func (m *defaultUpgradeFileModel) Update(ctx context.Context, data *UpgradeFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upgradeFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.Key, data.Name, data.Description, data.IsDel, data.Id)
	return err
}

func (m *defaultUpgradeFileModel) tableName() string {
	return m.table
}
