// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysCompanySecretFieldNames          = builder.RawFieldNames(&SysCompanySecret{})
	sysCompanySecretRows                = strings.Join(sysCompanySecretFieldNames, ",")
	sysCompanySecretRowsExpectAutoSet   = strings.Join(stringx.Remove(sysCompanySecretFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysCompanySecretRowsWithPlaceHolder = strings.Join(stringx.Remove(sysCompanySecretFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysCompanySecretModel interface {
		Insert(ctx context.Context, data *SysCompanySecret) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysCompanySecret, error)
		Update(ctx context.Context, data *SysCompanySecret) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysCompanySecretModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysCompanySecret struct {
		Id        int64     `db:"id"`         // ID
		CreatedAt time.Time `db:"created_at"` // Create Time | 创建日期
		UpdatedAt time.Time `db:"updated_at"` // Update Time | 修改日期
		CompanyId int64     `db:"company_id"` // 公司ID
		AccessKey string    `db:"access_key"` // 密钥id
		SecretKey string    `db:"secret_key"` // 密钥key
	}
)

func newSysCompanySecretModel(conn sqlx.SqlConn) *defaultSysCompanySecretModel {
	return &defaultSysCompanySecretModel{
		conn:  conn,
		table: "`sys_company_secret`",
	}
}

func (m *defaultSysCompanySecretModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysCompanySecretModel) FindOne(ctx context.Context, id int64) (*SysCompanySecret, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysCompanySecretRows, m.table)
	var resp SysCompanySecret
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysCompanySecretModel) Insert(ctx context.Context, data *SysCompanySecret) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sysCompanySecretRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.AccessKey, data.SecretKey)
	return ret, err
}

func (m *defaultSysCompanySecretModel) Update(ctx context.Context, data *SysCompanySecret) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysCompanySecretRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CompanyId, data.AccessKey, data.SecretKey, data.Id)
	return err
}

func (m *defaultSysCompanySecretModel) tableName() string {
	return m.table
}
