// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0

package handler

import (
	"net/http"
	"time"

	apk "upgradelink-api/server/apils/internal/handler/apk"
	app "upgradelink-api/server/apils/internal/handler/app"
	configuration "upgradelink-api/server/apils/internal/handler/configuration"
	download "upgradelink-api/server/apils/internal/handler/download"
	electron "upgradelink-api/server/apils/internal/handler/electron"
	file "upgradelink-api/server/apils/internal/handler/file"
	tauri "upgradelink-api/server/apils/internal/handler/tauri"
	url "upgradelink-api/server/apils/internal/handler/url"
	"upgradelink-api/server/apils/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.ReplayAttack, serverCtx.Signature},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade",
					Handler: apk.GetApkUpgradeInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/apk"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.ReplayAttack, serverCtx.Signature},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/report",
					Handler: app.ReportHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/app"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/download/info",
				Handler: app.DownloadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/app"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.ReplayAttack, serverCtx.Signature},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade",
					Handler: configuration.GetConfigurationUpgradeInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/configuration"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CdnRateLimit},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: download.GetUrlDownloadInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/url"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CdnRateLimit},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: download.GetFileDownloadInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/file"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CdnRateLimit},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: download.GetElectronDownloadInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download.AppImage",
					Handler: download.GetElectronDownloadInfoAppImageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download.dmg",
					Handler: download.GetElectronDownloadInfoDmgHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download.exe",
					Handler: download.GetElectronDownloadInfoExeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/download.zip",
					Handler: download.GetElectronDownloadInfoZipHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/electron"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CdnRateLimit},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: download.GetApkDownloadInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/apk"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CdnRateLimit},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/download",
					Handler: download.GetTauriDownloadInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/tauri"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/github-aciton/upload",
					Handler: electron.PostElectronUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/upgrade",
					Handler: electron.GetElectronUpgradeInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/upgrade/latest-linux.yml",
					Handler: electron.GetElectronUpgradeInfoByLinuxYmlHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/upgrade/latest-mac.yml",
					Handler: electron.GetElectronUpgradeInfoByMacYmlHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/upgrade/latest.yml",
					Handler: electron.GetElectronUpgradeInfoByWindowsYmlHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/electron"),
		rest.WithTimeout(600000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.ReplayAttack, serverCtx.Signature},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade",
					Handler: file.GetFileUpgradeInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/file"),
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/github-aciton/upload",
					Handler: tauri.PostTauriUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/upgrade",
					Handler: tauri.GetTauriUpgradeInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/tauri"),
		rest.WithTimeout(600000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.ReplayAttack, serverCtx.Signature},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/upgrade",
					Handler: url.GetUrlUpgradeInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/url"),
		rest.WithTimeout(30000*time.Millisecond),
	)
}
