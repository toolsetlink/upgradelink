// Code generated by ent, DO NOT EDIT.

package cloudfiletag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cloudfiletag type in the database.
	Label = "cloud_file_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeCloudFiles holds the string denoting the cloud_files edge name in mutations.
	EdgeCloudFiles = "cloud_files"
	// Table holds the table name of the cloudfiletag in the database.
	Table = "fms_cloud_file_tags"
	// CloudFilesTable is the table that holds the cloud_files relation/edge. The primary key declared below.
	CloudFilesTable = "cloud_file_tag_cloud_files"
	// CloudFilesInverseTable is the table name for the CloudFile entity.
	// It exists in this package in order to avoid circular dependency with the "cloudfile" package.
	CloudFilesInverseTable = "fms_cloud_files"
)

// Columns holds all SQL columns for cloudfiletag fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldRemark,
}

var (
	// CloudFilesPrimaryKey and CloudFilesColumn2 are the table columns denoting the
	// primary key for the cloud_files relation (M2M).
	CloudFilesPrimaryKey = []string{"cloud_file_tag_id", "cloud_file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the CloudFileTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCloudFilesCount orders the results by cloud_files count.
func ByCloudFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCloudFilesStep(), opts...)
	}
}

// ByCloudFiles orders the results by cloud_files terms.
func ByCloudFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCloudFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCloudFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CloudFilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CloudFilesTable, CloudFilesPrimaryKey...),
	)
}
